%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(gateway_miner_client_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_helium.close_state'/1, 'enum_value_by_symbol_helium.close_state'/1]).
-export(['enum_symbol_by_value_helium.Region'/1, 'enum_value_by_symbol_helium.Region'/1]).
-export(['enum_symbol_by_value_helium.blockchain_state_channel_state_v1'/1, 'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'/1]).
-export(['enum_symbol_by_value_packet_pb.packet_type'/1, 'enum_value_by_symbol_packet_pb.packet_type'/1]).
-export(['enum_symbol_by_value_helium.origin'/1, 'enum_value_by_symbol_helium.origin'/1]).
-export(['enum_symbol_by_value_helium.RegionSpreading'/1, 'enum_value_by_symbol_helium.RegionSpreading'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("gateway_miner_client_pb.hrl").

%% enumerated types
-type 'helium.close_state'() :: close_state_closable | close_state_closing | close_state_closed | close_state_dispute.
-type 'helium.Region'() :: 'US915' | 'EU868' | 'EU433' | 'CN470' | 'CN779' | 'AU915' | 'AS923_1' | 'KR920' | 'IN865' | 'AS923_2' | 'AS923_3' | 'AS923_4'.
-type 'helium.blockchain_state_channel_state_v1'() :: open | closed.
-type 'packet_pb.packet_type'() :: longfi | lorawan.
-type 'helium.origin'() :: p2p | radio.
-type 'helium.RegionSpreading'() :: 'SF_INVALID' | 'SF7' | 'SF8' | 'SF9' | 'SF10' | 'SF11' | 'SF12'.
-export_type(['helium.close_state'/0, 'helium.Region'/0, 'helium.blockchain_state_channel_state_v1'/0, 'packet_pb.packet_type'/0, 'helium.origin'/0, 'helium.RegionSpreading'/0]).

%% message types
-type empty_pb() :: #empty_pb{}.

-type gateway_success_resp_pb() :: #gateway_success_resp_pb{}.

-type gateway_error_resp_pb() :: #gateway_error_resp_pb{}.

-type gateway_config_req_v1_pb() :: #gateway_config_req_v1_pb{}.

-type gateway_config_resp_v1_pb() :: #gateway_config_resp_v1_pb{}.

-type gateway_config_update_req_v1_pb() :: #gateway_config_update_req_v1_pb{}.

-type gateway_config_update_streamed_resp_v1_pb() :: #gateway_config_update_streamed_resp_v1_pb{}.

-type gateway_validators_req_v1_pb() :: #gateway_validators_req_v1_pb{}.

-type gateway_validators_resp_v1_pb() :: #gateway_validators_resp_v1_pb{}.

-type gateway_resp_v1_pb() :: #gateway_resp_v1_pb{}.

-type gateway_sc_is_active_req_v1_pb() :: #gateway_sc_is_active_req_v1_pb{}.

-type gateway_sc_is_active_resp_v1_pb() :: #gateway_sc_is_active_resp_v1_pb{}.

-type gateway_sc_is_overpaid_req_v1_pb() :: #gateway_sc_is_overpaid_req_v1_pb{}.

-type gateway_sc_is_overpaid_resp_v1_pb() :: #gateway_sc_is_overpaid_resp_v1_pb{}.

-type gateway_sc_close_req_v1_pb() :: #gateway_sc_close_req_v1_pb{}.

-type gateway_sc_close_resp_v1_pb() :: #gateway_sc_close_resp_v1_pb{}.

-type gateway_sc_follow_req_v1_pb() :: #gateway_sc_follow_req_v1_pb{}.

-type gateway_sc_follow_streamed_resp_v1_pb() :: #gateway_sc_follow_streamed_resp_v1_pb{}.

-type routing_pb() :: #routing_pb{}.

-type routing_address_pb() :: #routing_address_pb{}.

-type gateway_routing_req_v1_pb() :: #gateway_routing_req_v1_pb{}.

-type gateway_routing_streamed_resp_v1_pb() :: #gateway_routing_streamed_resp_v1_pb{}.

-type gateway_poc_req_v1_pb() :: #gateway_poc_req_v1_pb{}.

-type gateway_poc_challenge_notification_resp_v1_pb() :: #gateway_poc_challenge_notification_resp_v1_pb{}.

-type gateway_poc_check_challenge_target_req_v1_pb() :: #gateway_poc_check_challenge_target_req_v1_pb{}.

-type gateway_poc_region_params_req_v1_pb() :: #gateway_poc_region_params_req_v1_pb{}.

-type gateway_poc_region_params_resp_v1_pb() :: #gateway_poc_region_params_resp_v1_pb{}.

-type gateway_poc_check_challenge_target_resp_v1_pb() :: #gateway_poc_check_challenge_target_resp_v1_pb{}.

-type gateway_poc_report_req_v1_pb() :: #gateway_poc_report_req_v1_pb{}.

-type gateway_address_routing_data_req_v1_pb() :: #gateway_address_routing_data_req_v1_pb{}.

-type gateway_poc_key_routing_data_req_v1_pb() :: #gateway_poc_key_routing_data_req_v1_pb{}.

-type gateway_public_routing_data_resp_v1_pb() :: #gateway_public_routing_data_resp_v1_pb{}.

-type blockchain_state_channel_summary_v1_pb() :: #blockchain_state_channel_summary_v1_pb{}.

-type blockchain_state_channel_v1_pb() :: #blockchain_state_channel_v1_pb{}.

-type blockchain_state_channel_response_v1_pb() :: #blockchain_state_channel_response_v1_pb{}.

-type blockchain_state_channel_packet_v1_pb() :: #blockchain_state_channel_packet_v1_pb{}.

-type blockchain_state_channel_offer_v1_pb() :: #blockchain_state_channel_offer_v1_pb{}.

-type blockchain_state_channel_purchase_v1_pb() :: #blockchain_state_channel_purchase_v1_pb{}.

-type blockchain_state_channel_diff_v1_pb() :: #blockchain_state_channel_diff_v1_pb{}.

-type blockchain_state_channel_diff_entry_v1_pb() :: #blockchain_state_channel_diff_entry_v1_pb{}.

-type blockchain_state_channel_diff_append_summary_v1_pb() :: #blockchain_state_channel_diff_append_summary_v1_pb{}.

-type blockchain_state_channel_diff_update_summary_v1_pb() :: #blockchain_state_channel_diff_update_summary_v1_pb{}.

-type blockchain_state_channel_banner_v1_pb() :: #blockchain_state_channel_banner_v1_pb{}.

-type blockchain_state_channel_rejection_v1_pb() :: #blockchain_state_channel_rejection_v1_pb{}.

-type blockchain_state_channel_message_v1_pb() :: #blockchain_state_channel_message_v1_pb{}.

-type eui_pb() :: #eui_pb{}.

-type routing_information_pb() :: #routing_information_pb{}.

-type window_pb() :: #window_pb{}.

-type packet_pb() :: #packet_pb{}.

-type blockchain_txn_state_channel_close_v1_pb() :: #blockchain_txn_state_channel_close_v1_pb{}.

-type blockchain_var_v1_pb() :: #blockchain_var_v1_pb{}.

-type blockchain_txn_vars_v1_pb() :: #blockchain_txn_vars_v1_pb{}.

-type blockchain_txn_poc_receipts_v1_pb() :: #blockchain_txn_poc_receipts_v1_pb{}.

-type blockchain_poc_receipt_v1_pb() :: #blockchain_poc_receipt_v1_pb{}.

-type blockchain_poc_witness_v1_pb() :: #blockchain_poc_witness_v1_pb{}.

-type blockchain_poc_response_v1_pb() :: #blockchain_poc_response_v1_pb{}.

-type blockchain_poc_path_element_v1_pb() :: #blockchain_poc_path_element_v1_pb{}.

-type blockchain_txn_poc_receipts_v2_pb() :: #blockchain_txn_poc_receipts_v2_pb{}.

-type blockchain_region_params_v1_pb() :: #blockchain_region_params_v1_pb{}.

-type tagged_spreading_pb() :: #tagged_spreading_pb{}.

-type blockchain_region_spreading_v1_pb() :: #blockchain_region_spreading_v1_pb{}.

-type blockchain_region_param_v1_pb() :: #blockchain_region_param_v1_pb{}.

-export_type(['empty_pb'/0, 'gateway_success_resp_pb'/0, 'gateway_error_resp_pb'/0, 'gateway_config_req_v1_pb'/0, 'gateway_config_resp_v1_pb'/0, 'gateway_config_update_req_v1_pb'/0, 'gateway_config_update_streamed_resp_v1_pb'/0, 'gateway_validators_req_v1_pb'/0, 'gateway_validators_resp_v1_pb'/0, 'gateway_resp_v1_pb'/0, 'gateway_sc_is_active_req_v1_pb'/0, 'gateway_sc_is_active_resp_v1_pb'/0, 'gateway_sc_is_overpaid_req_v1_pb'/0, 'gateway_sc_is_overpaid_resp_v1_pb'/0, 'gateway_sc_close_req_v1_pb'/0, 'gateway_sc_close_resp_v1_pb'/0, 'gateway_sc_follow_req_v1_pb'/0, 'gateway_sc_follow_streamed_resp_v1_pb'/0, 'routing_pb'/0, 'routing_address_pb'/0, 'gateway_routing_req_v1_pb'/0, 'gateway_routing_streamed_resp_v1_pb'/0, 'gateway_poc_req_v1_pb'/0, 'gateway_poc_challenge_notification_resp_v1_pb'/0, 'gateway_poc_check_challenge_target_req_v1_pb'/0, 'gateway_poc_region_params_req_v1_pb'/0, 'gateway_poc_region_params_resp_v1_pb'/0, 'gateway_poc_check_challenge_target_resp_v1_pb'/0, 'gateway_poc_report_req_v1_pb'/0, 'gateway_address_routing_data_req_v1_pb'/0, 'gateway_poc_key_routing_data_req_v1_pb'/0, 'gateway_public_routing_data_resp_v1_pb'/0, 'blockchain_state_channel_summary_v1_pb'/0, 'blockchain_state_channel_v1_pb'/0, 'blockchain_state_channel_response_v1_pb'/0, 'blockchain_state_channel_packet_v1_pb'/0, 'blockchain_state_channel_offer_v1_pb'/0, 'blockchain_state_channel_purchase_v1_pb'/0, 'blockchain_state_channel_diff_v1_pb'/0, 'blockchain_state_channel_diff_entry_v1_pb'/0, 'blockchain_state_channel_diff_append_summary_v1_pb'/0, 'blockchain_state_channel_diff_update_summary_v1_pb'/0, 'blockchain_state_channel_banner_v1_pb'/0, 'blockchain_state_channel_rejection_v1_pb'/0, 'blockchain_state_channel_message_v1_pb'/0, 'eui_pb'/0, 'routing_information_pb'/0, 'window_pb'/0, 'packet_pb'/0, 'blockchain_txn_state_channel_close_v1_pb'/0, 'blockchain_var_v1_pb'/0, 'blockchain_txn_vars_v1_pb'/0, 'blockchain_txn_poc_receipts_v1_pb'/0, 'blockchain_poc_receipt_v1_pb'/0, 'blockchain_poc_witness_v1_pb'/0, 'blockchain_poc_response_v1_pb'/0, 'blockchain_poc_path_element_v1_pb'/0, 'blockchain_txn_poc_receipts_v2_pb'/0, 'blockchain_region_params_v1_pb'/0, 'tagged_spreading_pb'/0, 'blockchain_region_spreading_v1_pb'/0, 'blockchain_region_param_v1_pb'/0]).

-spec encode_msg(#empty_pb{} | #gateway_success_resp_pb{} | #gateway_error_resp_pb{} | #gateway_config_req_v1_pb{} | #gateway_config_resp_v1_pb{} | #gateway_config_update_req_v1_pb{} | #gateway_config_update_streamed_resp_v1_pb{} | #gateway_validators_req_v1_pb{} | #gateway_validators_resp_v1_pb{} | #gateway_resp_v1_pb{} | #gateway_sc_is_active_req_v1_pb{} | #gateway_sc_is_active_resp_v1_pb{} | #gateway_sc_is_overpaid_req_v1_pb{} | #gateway_sc_is_overpaid_resp_v1_pb{} | #gateway_sc_close_req_v1_pb{} | #gateway_sc_close_resp_v1_pb{} | #gateway_sc_follow_req_v1_pb{} | #gateway_sc_follow_streamed_resp_v1_pb{} | #routing_pb{} | #routing_address_pb{} | #gateway_routing_req_v1_pb{} | #gateway_routing_streamed_resp_v1_pb{} | #gateway_poc_req_v1_pb{} | #gateway_poc_challenge_notification_resp_v1_pb{} | #gateway_poc_check_challenge_target_req_v1_pb{} | #gateway_poc_region_params_req_v1_pb{} | #gateway_poc_region_params_resp_v1_pb{} | #gateway_poc_check_challenge_target_resp_v1_pb{} | #gateway_poc_report_req_v1_pb{} | #gateway_address_routing_data_req_v1_pb{} | #gateway_poc_key_routing_data_req_v1_pb{} | #gateway_public_routing_data_resp_v1_pb{} | #blockchain_state_channel_summary_v1_pb{} | #blockchain_state_channel_v1_pb{} | #blockchain_state_channel_response_v1_pb{} | #blockchain_state_channel_packet_v1_pb{} | #blockchain_state_channel_offer_v1_pb{} | #blockchain_state_channel_purchase_v1_pb{} | #blockchain_state_channel_diff_v1_pb{} | #blockchain_state_channel_diff_entry_v1_pb{} | #blockchain_state_channel_diff_append_summary_v1_pb{} | #blockchain_state_channel_diff_update_summary_v1_pb{} | #blockchain_state_channel_banner_v1_pb{} | #blockchain_state_channel_rejection_v1_pb{} | #blockchain_state_channel_message_v1_pb{} | #eui_pb{} | #routing_information_pb{} | #window_pb{} | #packet_pb{} | #blockchain_txn_state_channel_close_v1_pb{} | #blockchain_var_v1_pb{} | #blockchain_txn_vars_v1_pb{} | #blockchain_txn_poc_receipts_v1_pb{} | #blockchain_poc_receipt_v1_pb{} | #blockchain_poc_witness_v1_pb{} | #blockchain_poc_response_v1_pb{} | #blockchain_poc_path_element_v1_pb{} | #blockchain_txn_poc_receipts_v2_pb{} | #blockchain_region_params_v1_pb{} | #tagged_spreading_pb{} | #blockchain_region_spreading_v1_pb{} | #blockchain_region_param_v1_pb{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#empty_pb{} | #gateway_success_resp_pb{} | #gateway_error_resp_pb{} | #gateway_config_req_v1_pb{} | #gateway_config_resp_v1_pb{} | #gateway_config_update_req_v1_pb{} | #gateway_config_update_streamed_resp_v1_pb{} | #gateway_validators_req_v1_pb{} | #gateway_validators_resp_v1_pb{} | #gateway_resp_v1_pb{} | #gateway_sc_is_active_req_v1_pb{} | #gateway_sc_is_active_resp_v1_pb{} | #gateway_sc_is_overpaid_req_v1_pb{} | #gateway_sc_is_overpaid_resp_v1_pb{} | #gateway_sc_close_req_v1_pb{} | #gateway_sc_close_resp_v1_pb{} | #gateway_sc_follow_req_v1_pb{} | #gateway_sc_follow_streamed_resp_v1_pb{} | #routing_pb{} | #routing_address_pb{} | #gateway_routing_req_v1_pb{} | #gateway_routing_streamed_resp_v1_pb{} | #gateway_poc_req_v1_pb{} | #gateway_poc_challenge_notification_resp_v1_pb{} | #gateway_poc_check_challenge_target_req_v1_pb{} | #gateway_poc_region_params_req_v1_pb{} | #gateway_poc_region_params_resp_v1_pb{} | #gateway_poc_check_challenge_target_resp_v1_pb{} | #gateway_poc_report_req_v1_pb{} | #gateway_address_routing_data_req_v1_pb{} | #gateway_poc_key_routing_data_req_v1_pb{} | #gateway_public_routing_data_resp_v1_pb{} | #blockchain_state_channel_summary_v1_pb{} | #blockchain_state_channel_v1_pb{} | #blockchain_state_channel_response_v1_pb{} | #blockchain_state_channel_packet_v1_pb{} | #blockchain_state_channel_offer_v1_pb{} | #blockchain_state_channel_purchase_v1_pb{} | #blockchain_state_channel_diff_v1_pb{} | #blockchain_state_channel_diff_entry_v1_pb{} | #blockchain_state_channel_diff_append_summary_v1_pb{} | #blockchain_state_channel_diff_update_summary_v1_pb{} | #blockchain_state_channel_banner_v1_pb{} | #blockchain_state_channel_rejection_v1_pb{} | #blockchain_state_channel_message_v1_pb{} | #eui_pb{} | #routing_information_pb{} | #window_pb{} | #packet_pb{} | #blockchain_txn_state_channel_close_v1_pb{} | #blockchain_var_v1_pb{} | #blockchain_txn_vars_v1_pb{} | #blockchain_txn_poc_receipts_v1_pb{} | #blockchain_poc_receipt_v1_pb{} | #blockchain_poc_witness_v1_pb{} | #blockchain_poc_response_v1_pb{} | #blockchain_poc_path_element_v1_pb{} | #blockchain_txn_poc_receipts_v2_pb{} | #blockchain_region_params_v1_pb{} | #tagged_spreading_pb{} | #blockchain_region_spreading_v1_pb{} | #blockchain_region_param_v1_pb{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#empty_pb{} | #gateway_success_resp_pb{} | #gateway_error_resp_pb{} | #gateway_config_req_v1_pb{} | #gateway_config_resp_v1_pb{} | #gateway_config_update_req_v1_pb{} | #gateway_config_update_streamed_resp_v1_pb{} | #gateway_validators_req_v1_pb{} | #gateway_validators_resp_v1_pb{} | #gateway_resp_v1_pb{} | #gateway_sc_is_active_req_v1_pb{} | #gateway_sc_is_active_resp_v1_pb{} | #gateway_sc_is_overpaid_req_v1_pb{} | #gateway_sc_is_overpaid_resp_v1_pb{} | #gateway_sc_close_req_v1_pb{} | #gateway_sc_close_resp_v1_pb{} | #gateway_sc_follow_req_v1_pb{} | #gateway_sc_follow_streamed_resp_v1_pb{} | #routing_pb{} | #routing_address_pb{} | #gateway_routing_req_v1_pb{} | #gateway_routing_streamed_resp_v1_pb{} | #gateway_poc_req_v1_pb{} | #gateway_poc_challenge_notification_resp_v1_pb{} | #gateway_poc_check_challenge_target_req_v1_pb{} | #gateway_poc_region_params_req_v1_pb{} | #gateway_poc_region_params_resp_v1_pb{} | #gateway_poc_check_challenge_target_resp_v1_pb{} | #gateway_poc_report_req_v1_pb{} | #gateway_address_routing_data_req_v1_pb{} | #gateway_poc_key_routing_data_req_v1_pb{} | #gateway_public_routing_data_resp_v1_pb{} | #blockchain_state_channel_summary_v1_pb{} | #blockchain_state_channel_v1_pb{} | #blockchain_state_channel_response_v1_pb{} | #blockchain_state_channel_packet_v1_pb{} | #blockchain_state_channel_offer_v1_pb{} | #blockchain_state_channel_purchase_v1_pb{} | #blockchain_state_channel_diff_v1_pb{} | #blockchain_state_channel_diff_entry_v1_pb{} | #blockchain_state_channel_diff_append_summary_v1_pb{} | #blockchain_state_channel_diff_update_summary_v1_pb{} | #blockchain_state_channel_banner_v1_pb{} | #blockchain_state_channel_rejection_v1_pb{} | #blockchain_state_channel_message_v1_pb{} | #eui_pb{} | #routing_information_pb{} | #window_pb{} | #packet_pb{} | #blockchain_txn_state_channel_close_v1_pb{} | #blockchain_var_v1_pb{} | #blockchain_txn_vars_v1_pb{} | #blockchain_txn_poc_receipts_v1_pb{} | #blockchain_poc_receipt_v1_pb{} | #blockchain_poc_witness_v1_pb{} | #blockchain_poc_response_v1_pb{} | #blockchain_poc_path_element_v1_pb{} | #blockchain_txn_poc_receipts_v2_pb{} | #blockchain_region_params_v1_pb{} | #tagged_spreading_pb{} | #blockchain_region_spreading_v1_pb{} | #blockchain_region_param_v1_pb{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        empty_pb ->
            encode_msg_empty_pb(id(Msg, TrUserData), TrUserData);
        gateway_success_resp_pb ->
            encode_msg_gateway_success_resp_pb(id(Msg, TrUserData),
                                               TrUserData);
        gateway_error_resp_pb ->
            encode_msg_gateway_error_resp_pb(id(Msg, TrUserData),
                                             TrUserData);
        gateway_config_req_v1_pb ->
            encode_msg_gateway_config_req_v1_pb(id(Msg, TrUserData),
                                                TrUserData);
        gateway_config_resp_v1_pb ->
            encode_msg_gateway_config_resp_v1_pb(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        gateway_config_update_req_v1_pb ->
            encode_msg_gateway_config_update_req_v1_pb(id(Msg,
                                                          TrUserData),
                                                       TrUserData);
        gateway_config_update_streamed_resp_v1_pb ->
            encode_msg_gateway_config_update_streamed_resp_v1_pb(id(Msg,
                                                                    TrUserData),
                                                                 TrUserData);
        gateway_validators_req_v1_pb ->
            encode_msg_gateway_validators_req_v1_pb(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        gateway_validators_resp_v1_pb ->
            encode_msg_gateway_validators_resp_v1_pb(id(Msg,
                                                        TrUserData),
                                                     TrUserData);
        gateway_resp_v1_pb ->
            encode_msg_gateway_resp_v1_pb(id(Msg, TrUserData),
                                          TrUserData);
        gateway_sc_is_active_req_v1_pb ->
            encode_msg_gateway_sc_is_active_req_v1_pb(id(Msg,
                                                         TrUserData),
                                                      TrUserData);
        gateway_sc_is_active_resp_v1_pb ->
            encode_msg_gateway_sc_is_active_resp_v1_pb(id(Msg,
                                                          TrUserData),
                                                       TrUserData);
        gateway_sc_is_overpaid_req_v1_pb ->
            encode_msg_gateway_sc_is_overpaid_req_v1_pb(id(Msg,
                                                           TrUserData),
                                                        TrUserData);
        gateway_sc_is_overpaid_resp_v1_pb ->
            encode_msg_gateway_sc_is_overpaid_resp_v1_pb(id(Msg,
                                                            TrUserData),
                                                         TrUserData);
        gateway_sc_close_req_v1_pb ->
            encode_msg_gateway_sc_close_req_v1_pb(id(Msg,
                                                     TrUserData),
                                                  TrUserData);
        gateway_sc_close_resp_v1_pb ->
            encode_msg_gateway_sc_close_resp_v1_pb(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        gateway_sc_follow_req_v1_pb ->
            encode_msg_gateway_sc_follow_req_v1_pb(id(Msg,
                                                      TrUserData),
                                                   TrUserData);
        gateway_sc_follow_streamed_resp_v1_pb ->
            encode_msg_gateway_sc_follow_streamed_resp_v1_pb(id(Msg,
                                                                TrUserData),
                                                             TrUserData);
        routing_pb ->
            encode_msg_routing_pb(id(Msg, TrUserData), TrUserData);
        routing_address_pb ->
            encode_msg_routing_address_pb(id(Msg, TrUserData),
                                          TrUserData);
        gateway_routing_req_v1_pb ->
            encode_msg_gateway_routing_req_v1_pb(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        gateway_routing_streamed_resp_v1_pb ->
            encode_msg_gateway_routing_streamed_resp_v1_pb(id(Msg,
                                                              TrUserData),
                                                           TrUserData);
        gateway_poc_req_v1_pb ->
            encode_msg_gateway_poc_req_v1_pb(id(Msg, TrUserData),
                                             TrUserData);
        gateway_poc_challenge_notification_resp_v1_pb ->
            encode_msg_gateway_poc_challenge_notification_resp_v1_pb(id(Msg,
                                                                        TrUserData),
                                                                     TrUserData);
        gateway_poc_check_challenge_target_req_v1_pb ->
            encode_msg_gateway_poc_check_challenge_target_req_v1_pb(id(Msg,
                                                                       TrUserData),
                                                                    TrUserData);
        gateway_poc_region_params_req_v1_pb ->
            encode_msg_gateway_poc_region_params_req_v1_pb(id(Msg,
                                                              TrUserData),
                                                           TrUserData);
        gateway_poc_region_params_resp_v1_pb ->
            encode_msg_gateway_poc_region_params_resp_v1_pb(id(Msg,
                                                               TrUserData),
                                                            TrUserData);
        gateway_poc_check_challenge_target_resp_v1_pb ->
            encode_msg_gateway_poc_check_challenge_target_resp_v1_pb(id(Msg,
                                                                        TrUserData),
                                                                     TrUserData);
        gateway_poc_report_req_v1_pb ->
            encode_msg_gateway_poc_report_req_v1_pb(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        gateway_address_routing_data_req_v1_pb ->
            encode_msg_gateway_address_routing_data_req_v1_pb(id(Msg,
                                                                 TrUserData),
                                                              TrUserData);
        gateway_poc_key_routing_data_req_v1_pb ->
            encode_msg_gateway_poc_key_routing_data_req_v1_pb(id(Msg,
                                                                 TrUserData),
                                                              TrUserData);
        gateway_public_routing_data_resp_v1_pb ->
            encode_msg_gateway_public_routing_data_resp_v1_pb(id(Msg,
                                                                 TrUserData),
                                                              TrUserData);
        blockchain_state_channel_summary_v1_pb ->
            encode_msg_blockchain_state_channel_summary_v1_pb(id(Msg,
                                                                 TrUserData),
                                                              TrUserData);
        blockchain_state_channel_v1_pb ->
            encode_msg_blockchain_state_channel_v1_pb(id(Msg,
                                                         TrUserData),
                                                      TrUserData);
        blockchain_state_channel_response_v1_pb ->
            encode_msg_blockchain_state_channel_response_v1_pb(id(Msg,
                                                                  TrUserData),
                                                               TrUserData);
        blockchain_state_channel_packet_v1_pb ->
            encode_msg_blockchain_state_channel_packet_v1_pb(id(Msg,
                                                                TrUserData),
                                                             TrUserData);
        blockchain_state_channel_offer_v1_pb ->
            encode_msg_blockchain_state_channel_offer_v1_pb(id(Msg,
                                                               TrUserData),
                                                            TrUserData);
        blockchain_state_channel_purchase_v1_pb ->
            encode_msg_blockchain_state_channel_purchase_v1_pb(id(Msg,
                                                                  TrUserData),
                                                               TrUserData);
        blockchain_state_channel_diff_v1_pb ->
            encode_msg_blockchain_state_channel_diff_v1_pb(id(Msg,
                                                              TrUserData),
                                                           TrUserData);
        blockchain_state_channel_diff_entry_v1_pb ->
            encode_msg_blockchain_state_channel_diff_entry_v1_pb(id(Msg,
                                                                    TrUserData),
                                                                 TrUserData);
        blockchain_state_channel_diff_append_summary_v1_pb ->
            encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(id(Msg,
                                                                             TrUserData),
                                                                          TrUserData);
        blockchain_state_channel_diff_update_summary_v1_pb ->
            encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(id(Msg,
                                                                             TrUserData),
                                                                          TrUserData);
        blockchain_state_channel_banner_v1_pb ->
            encode_msg_blockchain_state_channel_banner_v1_pb(id(Msg,
                                                                TrUserData),
                                                             TrUserData);
        blockchain_state_channel_rejection_v1_pb ->
            encode_msg_blockchain_state_channel_rejection_v1_pb(id(Msg,
                                                                   TrUserData),
                                                                TrUserData);
        blockchain_state_channel_message_v1_pb ->
            encode_msg_blockchain_state_channel_message_v1_pb(id(Msg,
                                                                 TrUserData),
                                                              TrUserData);
        eui_pb ->
            encode_msg_eui_pb(id(Msg, TrUserData), TrUserData);
        routing_information_pb ->
            encode_msg_routing_information_pb(id(Msg, TrUserData),
                                              TrUserData);
        window_pb ->
            encode_msg_window_pb(id(Msg, TrUserData), TrUserData);
        packet_pb ->
            encode_msg_packet_pb(id(Msg, TrUserData), TrUserData);
        blockchain_txn_state_channel_close_v1_pb ->
            encode_msg_blockchain_txn_state_channel_close_v1_pb(id(Msg,
                                                                   TrUserData),
                                                                TrUserData);
        blockchain_var_v1_pb ->
            encode_msg_blockchain_var_v1_pb(id(Msg, TrUserData),
                                            TrUserData);
        blockchain_txn_vars_v1_pb ->
            encode_msg_blockchain_txn_vars_v1_pb(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        blockchain_txn_poc_receipts_v1_pb ->
            encode_msg_blockchain_txn_poc_receipts_v1_pb(id(Msg,
                                                            TrUserData),
                                                         TrUserData);
        blockchain_poc_receipt_v1_pb ->
            encode_msg_blockchain_poc_receipt_v1_pb(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        blockchain_poc_witness_v1_pb ->
            encode_msg_blockchain_poc_witness_v1_pb(id(Msg,
                                                       TrUserData),
                                                    TrUserData);
        blockchain_poc_response_v1_pb ->
            encode_msg_blockchain_poc_response_v1_pb(id(Msg,
                                                        TrUserData),
                                                     TrUserData);
        blockchain_poc_path_element_v1_pb ->
            encode_msg_blockchain_poc_path_element_v1_pb(id(Msg,
                                                            TrUserData),
                                                         TrUserData);
        blockchain_txn_poc_receipts_v2_pb ->
            encode_msg_blockchain_txn_poc_receipts_v2_pb(id(Msg,
                                                            TrUserData),
                                                         TrUserData);
        blockchain_region_params_v1_pb ->
            encode_msg_blockchain_region_params_v1_pb(id(Msg,
                                                         TrUserData),
                                                      TrUserData);
        tagged_spreading_pb ->
            encode_msg_tagged_spreading_pb(id(Msg, TrUserData),
                                           TrUserData);
        blockchain_region_spreading_v1_pb ->
            encode_msg_blockchain_region_spreading_v1_pb(id(Msg,
                                                            TrUserData),
                                                         TrUserData);
        blockchain_region_param_v1_pb ->
            encode_msg_blockchain_region_param_v1_pb(id(Msg,
                                                        TrUserData),
                                                     TrUserData)
    end.


encode_msg_empty_pb(_Msg, _TrUserData) -> <<>>.

encode_msg_gateway_success_resp_pb(Msg, TrUserData) ->
    encode_msg_gateway_success_resp_pb(Msg,
                                       <<>>,
                                       TrUserData).


encode_msg_gateway_success_resp_pb(#gateway_success_resp_pb{resp
                                                                = F1,
                                                            details = F2},
                                   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_error_resp_pb(Msg, TrUserData) ->
    encode_msg_gateway_error_resp_pb(Msg, <<>>, TrUserData).


encode_msg_gateway_error_resp_pb(#gateway_error_resp_pb{error
                                                            = F1,
                                                        details = F2},
                                 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_config_req_v1_pb(Msg, TrUserData) ->
    encode_msg_gateway_config_req_v1_pb(Msg,
                                        <<>>,
                                        TrUserData).


encode_msg_gateway_config_req_v1_pb(#gateway_config_req_v1_pb{keys
                                                                  = F1},
                                    Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_gateway_config_req_v1_pb_keys(TrF1,
                                                     Bin,
                                                     TrUserData)
        end
    end.

encode_msg_gateway_config_resp_v1_pb(Msg, TrUserData) ->
    encode_msg_gateway_config_resp_v1_pb(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_gateway_config_resp_v1_pb(#gateway_config_resp_v1_pb{result
                                                                    = F1},
                                     Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_gateway_config_resp_v1_pb_result(TrF1,
                                                        Bin,
                                                        TrUserData)
        end
    end.

encode_msg_gateway_config_update_req_v1_pb(_Msg,
                                           _TrUserData) ->
    <<>>.

encode_msg_gateway_config_update_streamed_resp_v1_pb(Msg,
                                                     TrUserData) ->
    encode_msg_gateway_config_update_streamed_resp_v1_pb(Msg,
                                                         <<>>,
                                                         TrUserData).


encode_msg_gateway_config_update_streamed_resp_v1_pb(#gateway_config_update_streamed_resp_v1_pb{keys
                                                                                                    =
                                                                                                    F1},
                                                     Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_gateway_config_update_streamed_resp_v1_pb_keys(TrF1,
                                                                      Bin,
                                                                      TrUserData)
        end
    end.

encode_msg_gateway_validators_req_v1_pb(Msg,
                                        TrUserData) ->
    encode_msg_gateway_validators_req_v1_pb(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_gateway_validators_req_v1_pb(#gateway_validators_req_v1_pb{quantity
                                                                          = F1},
                                        Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_validators_resp_v1_pb(Msg,
                                         TrUserData) ->
    encode_msg_gateway_validators_resp_v1_pb(Msg,
                                             <<>>,
                                             TrUserData).


encode_msg_gateway_validators_resp_v1_pb(#gateway_validators_resp_v1_pb{result
                                                                            =
                                                                            F1},
                                         Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_gateway_validators_resp_v1_pb_result(TrF1,
                                                            Bin,
                                                            TrUserData)
        end
    end.

encode_msg_gateway_resp_v1_pb(Msg, TrUserData) ->
    encode_msg_gateway_resp_v1_pb(Msg, <<>>, TrUserData).


encode_msg_gateway_resp_v1_pb(#gateway_resp_v1_pb{height
                                                      = F1,
                                                  signature = F2, msg = F3,
                                                  block_time = F4,
                                                  block_age = F5},
                              Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 =:= undefined -> B2;
            true ->
                case id(F3, TrUserData) of
                    {is_active_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_is_active_resp(TrTF3,
                                                                       <<B2/binary,
                                                                         26>>,
                                                                       TrUserData)
                        end;
                    {is_overpaid_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_is_overpaid_resp(TrTF3,
                                                                         <<B2/binary,
                                                                           34>>,
                                                                         TrUserData)
                        end;
                    {close_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_close_resp(TrTF3,
                                                                   <<B2/binary,
                                                                     42>>,
                                                                   TrUserData)
                        end;
                    {follow_streamed_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_follow_streamed_resp(TrTF3,
                                                                             <<B2/binary,
                                                                               50>>,
                                                                             TrUserData)
                        end;
                    {routing_streamed_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_routing_streamed_resp(TrTF3,
                                                                              <<B2/binary,
                                                                                58>>,
                                                                              TrUserData)
                        end;
                    {config_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_config_resp(TrTF3,
                                                                    <<B2/binary,
                                                                      66>>,
                                                                    TrUserData)
                        end;
                    {config_update_streamed_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_config_update_streamed_resp(TrTF3,
                                                                                    <<B2/binary,
                                                                                      74>>,
                                                                                    TrUserData)
                        end;
                    {validators_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_validators_resp(TrTF3,
                                                                        <<B2/binary,
                                                                          98>>,
                                                                        TrUserData)
                        end;
                    {success_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_success_resp(TrTF3,
                                                                     <<B2/binary,
                                                                       106>>,
                                                                     TrUserData)
                        end;
                    {error_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_error_resp(TrTF3,
                                                                   <<B2/binary,
                                                                     114>>,
                                                                   TrUserData)
                        end;
                    {poc_challenge_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_poc_challenge_resp(TrTF3,
                                                                           <<B2/binary,
                                                                             122>>,
                                                                           TrUserData)
                        end;
                    {poc_check_target_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_poc_check_target_resp(TrTF3,
                                                                              <<B2/binary,
                                                                                130,
                                                                                1>>,
                                                                              TrUserData)
                        end;
                    {public_route, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_public_route(TrTF3,
                                                                     <<B2/binary,
                                                                       138, 1>>,
                                                                     TrUserData)
                        end;
                    {poc_region_params_resp, TF3} ->
                        begin
                            TrTF3 = id(TF3, TrUserData),
                            e_mfield_gateway_resp_v1_pb_poc_region_params_resp(TrTF3,
                                                                               <<B2/binary,
                                                                                 146,
                                                                                 1>>,
                                                                               TrUserData)
                        end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 80>>, TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= 0 -> B4;
                  true -> e_varint(TrF5, <<B4/binary, 88>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_is_active_req_v1_pb(Msg,
                                          TrUserData) ->
    encode_msg_gateway_sc_is_active_req_v1_pb(Msg,
                                              <<>>,
                                              TrUserData).


encode_msg_gateway_sc_is_active_req_v1_pb(#gateway_sc_is_active_req_v1_pb{sc_id
                                                                              =
                                                                              F1,
                                                                          sc_owner
                                                                              =
                                                                              F2},
                                          Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_is_active_resp_v1_pb(Msg,
                                           TrUserData) ->
    encode_msg_gateway_sc_is_active_resp_v1_pb(Msg,
                                               <<>>,
                                               TrUserData).


encode_msg_gateway_sc_is_active_resp_v1_pb(#gateway_sc_is_active_resp_v1_pb{sc_id
                                                                                =
                                                                                F1,
                                                                            sc_owner
                                                                                =
                                                                                F2,
                                                                            active
                                                                                =
                                                                                F3,
                                                                            sc_expiry_at_block
                                                                                =
                                                                                F4,
                                                                            sc_original_dc_amount
                                                                                =
                                                                                F5},
                                           Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= false -> B2;
                       true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= 0 -> B4;
                  true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_is_overpaid_req_v1_pb(Msg,
                                            TrUserData) ->
    encode_msg_gateway_sc_is_overpaid_req_v1_pb(Msg,
                                                <<>>,
                                                TrUserData).


encode_msg_gateway_sc_is_overpaid_req_v1_pb(#gateway_sc_is_overpaid_req_v1_pb{sc_id
                                                                                  =
                                                                                  F1,
                                                                              sc_owner
                                                                                  =
                                                                                  F2,
                                                                              total_dcs
                                                                                  =
                                                                                  F3},
                                            Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_is_overpaid_resp_v1_pb(Msg,
                                             TrUserData) ->
    encode_msg_gateway_sc_is_overpaid_resp_v1_pb(Msg,
                                                 <<>>,
                                                 TrUserData).


encode_msg_gateway_sc_is_overpaid_resp_v1_pb(#gateway_sc_is_overpaid_resp_v1_pb{sc_id
                                                                                    =
                                                                                    F1,
                                                                                sc_owner
                                                                                    =
                                                                                    F2,
                                                                                overpaid
                                                                                    =
                                                                                    F3},
                                             Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= false -> B2;
                  true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_close_req_v1_pb(Msg,
                                      TrUserData) ->
    encode_msg_gateway_sc_close_req_v1_pb(Msg,
                                          <<>>,
                                          TrUserData).


encode_msg_gateway_sc_close_req_v1_pb(#gateway_sc_close_req_v1_pb{close_txn
                                                                      = F1},
                                      Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= undefined -> Bin;
                  true ->
                      e_mfield_gateway_sc_close_req_v1_pb_close_txn(TrF1,
                                                                    <<Bin/binary,
                                                                      10>>,
                                                                    TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_close_resp_v1_pb(Msg,
                                       TrUserData) ->
    encode_msg_gateway_sc_close_resp_v1_pb(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_gateway_sc_close_resp_v1_pb(#gateway_sc_close_resp_v1_pb{sc_id
                                                                        = F1,
                                                                    response =
                                                                        F2},
                                       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_follow_req_v1_pb(Msg,
                                       TrUserData) ->
    encode_msg_gateway_sc_follow_req_v1_pb(Msg,
                                           <<>>,
                                           TrUserData).


encode_msg_gateway_sc_follow_req_v1_pb(#gateway_sc_follow_req_v1_pb{sc_id
                                                                        = F1,
                                                                    sc_owner =
                                                                        F2},
                                       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_sc_follow_streamed_resp_v1_pb(Msg,
                                                 TrUserData) ->
    encode_msg_gateway_sc_follow_streamed_resp_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData).


encode_msg_gateway_sc_follow_streamed_resp_v1_pb(#gateway_sc_follow_streamed_resp_v1_pb{sc_id
                                                                                            =
                                                                                            F1,
                                                                                        sc_owner
                                                                                            =
                                                                                            F2,
                                                                                        close_state
                                                                                            =
                                                                                            F3},
                                                 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= close_state_closable; TrF3 =:= 0 -> B2;
                  true ->
                      'e_enum_helium.close_state'(TrF3,
                                                  <<B2/binary, 24>>,
                                                  TrUserData)
               end
           end
    end.

encode_msg_routing_pb(Msg, TrUserData) ->
    encode_msg_routing_pb(Msg, <<>>, TrUserData).


encode_msg_routing_pb(#routing_pb{oui = F1, owner = F2,
                                  addresses = F3, filters = F4, subnets = F5},
                      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true ->
                    e_field_routing_pb_addresses(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_routing_pb_filters(TrF4, B3, TrUserData)
             end
         end,
    begin
        TrF5 = id(F5, TrUserData),
        if TrF5 == [] -> B4;
           true -> e_field_routing_pb_subnets(TrF5, B4, TrUserData)
        end
    end.

encode_msg_routing_address_pb(Msg, TrUserData) ->
    encode_msg_routing_address_pb(Msg, <<>>, TrUserData).


encode_msg_routing_address_pb(#routing_address_pb{pub_key
                                                      = F1,
                                                  uri = F2},
                              Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_routing_req_v1_pb(Msg, TrUserData) ->
    encode_msg_gateway_routing_req_v1_pb(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_gateway_routing_req_v1_pb(#gateway_routing_req_v1_pb{height
                                                                    = F1},
                                     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_routing_streamed_resp_v1_pb(Msg,
                                               TrUserData) ->
    encode_msg_gateway_routing_streamed_resp_v1_pb(Msg,
                                                   <<>>,
                                                   TrUserData).


encode_msg_gateway_routing_streamed_resp_v1_pb(#gateway_routing_streamed_resp_v1_pb{routings
                                                                                        =
                                                                                        F1},
                                               Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_gateway_routing_streamed_resp_v1_pb_routings(TrF1,
                                                                    Bin,
                                                                    TrUserData)
        end
    end.

encode_msg_gateway_poc_req_v1_pb(Msg, TrUserData) ->
    encode_msg_gateway_poc_req_v1_pb(Msg, <<>>, TrUserData).


encode_msg_gateway_poc_req_v1_pb(#gateway_poc_req_v1_pb{address
                                                            = F1,
                                                        signature = F2},
                                 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_challenge_notification_resp_v1_pb(Msg,
                                                         TrUserData) ->
    encode_msg_gateway_poc_challenge_notification_resp_v1_pb(Msg,
                                                             <<>>,
                                                             TrUserData).


encode_msg_gateway_poc_challenge_notification_resp_v1_pb(#gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                                                                            =
                                                                                                            F1,
                                                                                                        block_hash
                                                                                                            =
                                                                                                            F2,
                                                                                                        onion_key_hash
                                                                                                            =
                                                                                                            F3},
                                                         Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true ->
                           e_mfield_gateway_poc_challenge_notification_resp_v1_pb_challenger(TrF1,
                                                                                             <<Bin/binary,
                                                                                               10>>,
                                                                                             TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case iolist_size(TrF3) of
                   0 -> B2;
                   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_check_challenge_target_req_v1_pb(Msg,
                                                        TrUserData) ->
    encode_msg_gateway_poc_check_challenge_target_req_v1_pb(Msg,
                                                            <<>>,
                                                            TrUserData).


encode_msg_gateway_poc_check_challenge_target_req_v1_pb(#gateway_poc_check_challenge_target_req_v1_pb{address
                                                                                                          =
                                                                                                          F1,
                                                                                                      challenger
                                                                                                          =
                                                                                                          F2,
                                                                                                      block_hash
                                                                                                          =
                                                                                                          F3,
                                                                                                      onion_key_hash
                                                                                                          =
                                                                                                          F4,
                                                                                                      height
                                                                                                          =
                                                                                                          F5,
                                                                                                      notifier
                                                                                                          =
                                                                                                          F6,
                                                                                                      notifier_sig
                                                                                                          =
                                                                                                          F7,
                                                                                                      challengee_sig
                                                                                                          =
                                                                                                          F8},
                                                        Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if TrF5 =:= 0 -> B4;
                       true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case iolist_size(TrF7) of
                        0 -> B6;
                        _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end
         end,
    if F8 == undefined -> B7;
       true ->
           begin
               TrF8 = id(F8, TrUserData),
               case iolist_size(TrF8) of
                   0 -> B7;
                   _ -> e_type_bytes(TrF8, <<B7/binary, 66>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_region_params_req_v1_pb(Msg,
                                               TrUserData) ->
    encode_msg_gateway_poc_region_params_req_v1_pb(Msg,
                                                   <<>>,
                                                   TrUserData).


encode_msg_gateway_poc_region_params_req_v1_pb(#gateway_poc_region_params_req_v1_pb{address
                                                                                        =
                                                                                        F1,
                                                                                    signature
                                                                                        =
                                                                                        F2},
                                               Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_region_params_resp_v1_pb(Msg,
                                                TrUserData) ->
    encode_msg_gateway_poc_region_params_resp_v1_pb(Msg,
                                                    <<>>,
                                                    TrUserData).


encode_msg_gateway_poc_region_params_resp_v1_pb(#gateway_poc_region_params_resp_v1_pb{address
                                                                                          =
                                                                                          F1,
                                                                                      region
                                                                                          =
                                                                                          F2,
                                                                                      params
                                                                                          =
                                                                                          F3},
                                                Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= undefined -> B2;
                  true ->
                      e_mfield_gateway_poc_region_params_resp_v1_pb_params(TrF3,
                                                                           <<B2/binary,
                                                                             26>>,
                                                                           TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_check_challenge_target_resp_v1_pb(Msg,
                                                         TrUserData) ->
    encode_msg_gateway_poc_check_challenge_target_resp_v1_pb(Msg,
                                                             <<>>,
                                                             TrUserData).


encode_msg_gateway_poc_check_challenge_target_resp_v1_pb(#gateway_poc_check_challenge_target_resp_v1_pb{target
                                                                                                            =
                                                                                                            F1,
                                                                                                        onion
                                                                                                            =
                                                                                                            F2},
                                                         Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= false -> Bin;
                       true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_report_req_v1_pb(Msg,
                                        TrUserData) ->
    encode_msg_gateway_poc_report_req_v1_pb(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_gateway_poc_report_req_v1_pb(#gateway_poc_report_req_v1_pb{onion_key_hash
                                                                          = F1,
                                                                      msg = F2},
                                        Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 =:= undefined -> B1;
       true ->
           case id(F2, TrUserData) of
               {receipt, TF2} ->
                   begin
                       TrTF2 = id(TF2, TrUserData),
                       e_mfield_gateway_poc_report_req_v1_pb_receipt(TrTF2,
                                                                     <<B1/binary,
                                                                       18>>,
                                                                     TrUserData)
                   end;
               {witness, TF2} ->
                   begin
                       TrTF2 = id(TF2, TrUserData),
                       e_mfield_gateway_poc_report_req_v1_pb_witness(TrTF2,
                                                                     <<B1/binary,
                                                                       26>>,
                                                                     TrUserData)
                   end
           end
    end.

encode_msg_gateway_address_routing_data_req_v1_pb(Msg,
                                                  TrUserData) ->
    encode_msg_gateway_address_routing_data_req_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData).


encode_msg_gateway_address_routing_data_req_v1_pb(#gateway_address_routing_data_req_v1_pb{address
                                                                                              =
                                                                                              F1},
                                                  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case iolist_size(TrF1) of
                   0 -> Bin;
                   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_poc_key_routing_data_req_v1_pb(Msg,
                                                  TrUserData) ->
    encode_msg_gateway_poc_key_routing_data_req_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData).


encode_msg_gateway_poc_key_routing_data_req_v1_pb(#gateway_poc_key_routing_data_req_v1_pb{key
                                                                                              =
                                                                                              F1},
                                                  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case iolist_size(TrF1) of
                   0 -> Bin;
                   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_gateway_public_routing_data_resp_v1_pb(Msg,
                                                  TrUserData) ->
    encode_msg_gateway_public_routing_data_resp_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData).


encode_msg_gateway_public_routing_data_resp_v1_pb(#gateway_public_routing_data_resp_v1_pb{address
                                                                                              =
                                                                                              F1,
                                                                                          public_uri
                                                                                              =
                                                                                              F2},
                                                  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true ->
                      e_mfield_gateway_public_routing_data_resp_v1_pb_public_uri(TrF2,
                                                                                 <<B1/binary,
                                                                                   18>>,
                                                                                 TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_summary_v1_pb(Msg,
                                                  TrUserData) ->
    encode_msg_blockchain_state_channel_summary_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData).


encode_msg_blockchain_state_channel_summary_v1_pb(#blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                                                              =
                                                                                              F1,
                                                                                          num_packets
                                                                                              =
                                                                                              F2,
                                                                                          num_dcs
                                                                                              =
                                                                                              F3},
                                                  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_v1_pb(Msg,
                                          TrUserData) ->
    encode_msg_blockchain_state_channel_v1_pb(Msg,
                                              <<>>,
                                              TrUserData).


encode_msg_blockchain_state_channel_v1_pb(#blockchain_state_channel_v1_pb{id
                                                                              =
                                                                              F1,
                                                                          owner
                                                                              =
                                                                              F2,
                                                                          credits
                                                                              =
                                                                              F3,
                                                                          nonce
                                                                              =
                                                                              F4,
                                                                          summaries
                                                                              =
                                                                              F5,
                                                                          root_hash
                                                                              =
                                                                              F6,
                                                                          skewed
                                                                              =
                                                                              F7,
                                                                          state
                                                                              =
                                                                              F8,
                                                                          expire_at_block
                                                                              =
                                                                              F9,
                                                                          signature
                                                                              =
                                                                              F10},
                                          Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             if TrF5 == [] -> B4;
                true ->
                    e_field_blockchain_state_channel_v1_pb_summaries(TrF5,
                                                                     B4,
                                                                     TrUserData)
             end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case iolist_size(TrF7) of
                        0 -> B6;
                        _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end
         end,
    B8 = if F8 == undefined -> B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if TrF8 =:= open; TrF8 =:= 0 -> B7;
                       true ->
                           'e_enum_helium.blockchain_state_channel_state_v1'(TrF8,
                                                                             <<B7/binary,
                                                                               64>>,
                                                                             TrUserData)
                    end
                end
         end,
    B9 = if F9 == undefined -> B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if TrF9 =:= 0 -> B8;
                       true -> e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
                    end
                end
         end,
    if F10 == undefined -> B9;
       true ->
           begin
               TrF10 = id(F10, TrUserData),
               case iolist_size(TrF10) of
                   0 -> B9;
                   _ -> e_type_bytes(TrF10, <<B9/binary, 82>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_response_v1_pb(Msg,
                                                   TrUserData) ->
    encode_msg_blockchain_state_channel_response_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData).


encode_msg_blockchain_state_channel_response_v1_pb(#blockchain_state_channel_response_v1_pb{accepted
                                                                                                =
                                                                                                F1,
                                                                                            downlink
                                                                                                =
                                                                                                F2},
                                                   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= false -> Bin;
                       true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true ->
                      e_mfield_blockchain_state_channel_response_v1_pb_downlink(TrF2,
                                                                                <<B1/binary,
                                                                                  34>>,
                                                                                TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_packet_v1_pb(Msg,
                                                 TrUserData) ->
    encode_msg_blockchain_state_channel_packet_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData).


encode_msg_blockchain_state_channel_packet_v1_pb(#blockchain_state_channel_packet_v1_pb{packet
                                                                                            =
                                                                                            F1,
                                                                                        hotspot
                                                                                            =
                                                                                            F2,
                                                                                        signature
                                                                                            =
                                                                                            F3,
                                                                                        region
                                                                                            =
                                                                                            F4,
                                                                                        hold_time
                                                                                            =
                                                                                            F5},
                                                 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true ->
                           e_mfield_blockchain_state_channel_packet_v1_pb_packet(TrF1,
                                                                                 <<Bin/binary,
                                                                                   10>>,
                                                                                 TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 'US915'; TrF4 =:= 0 -> B3;
                       true ->
                           'e_enum_helium.Region'(TrF4,
                                                  <<B3/binary, 32>>,
                                                  TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= 0 -> B4;
                  true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_offer_v1_pb(Msg,
                                                TrUserData) ->
    encode_msg_blockchain_state_channel_offer_v1_pb(Msg,
                                                    <<>>,
                                                    TrUserData).


encode_msg_blockchain_state_channel_offer_v1_pb(#blockchain_state_channel_offer_v1_pb{routing
                                                                                          =
                                                                                          F1,
                                                                                      packet_hash
                                                                                          =
                                                                                          F2,
                                                                                      payload_size
                                                                                          =
                                                                                          F3,
                                                                                      fcnt
                                                                                          =
                                                                                          F4,
                                                                                      hotspot
                                                                                          =
                                                                                          F5,
                                                                                      signature
                                                                                          =
                                                                                          F6,
                                                                                      region
                                                                                          =
                                                                                          F7,
                                                                                      req_diff
                                                                                          =
                                                                                          F8},
                                                Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true ->
                           e_mfield_blockchain_state_channel_offer_v1_pb_routing(TrF1,
                                                                                 <<Bin/binary,
                                                                                   10>>,
                                                                                 TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if TrF7 =:= 'US915'; TrF7 =:= 0 -> B6;
                       true ->
                           'e_enum_helium.Region'(TrF7,
                                                  <<B6/binary, 56>>,
                                                  TrUserData)
                    end
                end
         end,
    if F8 == undefined -> B7;
       true ->
           begin
               TrF8 = id(F8, TrUserData),
               if TrF8 =:= false -> B7;
                  true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_purchase_v1_pb(Msg,
                                                   TrUserData) ->
    encode_msg_blockchain_state_channel_purchase_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData).


encode_msg_blockchain_state_channel_purchase_v1_pb(#blockchain_state_channel_purchase_v1_pb{sc
                                                                                                =
                                                                                                F1,
                                                                                            hotspot
                                                                                                =
                                                                                                F2,
                                                                                            packet_hash
                                                                                                =
                                                                                                F3,
                                                                                            region
                                                                                                =
                                                                                                F4,
                                                                                            sc_diff
                                                                                                =
                                                                                                F5},
                                                   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true ->
                           e_mfield_blockchain_state_channel_purchase_v1_pb_sc(TrF1,
                                                                               <<Bin/binary,
                                                                                 10>>,
                                                                               TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 'US915'; TrF4 =:= 0 -> B3;
                       true ->
                           'e_enum_helium.Region'(TrF4,
                                                  <<B3/binary, 32>>,
                                                  TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= undefined -> B4;
                  true ->
                      e_mfield_blockchain_state_channel_purchase_v1_pb_sc_diff(TrF5,
                                                                               <<B4/binary,
                                                                                 42>>,
                                                                               TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_diff_v1_pb(Msg,
                                               TrUserData) ->
    encode_msg_blockchain_state_channel_diff_v1_pb(Msg,
                                                   <<>>,
                                                   TrUserData).


encode_msg_blockchain_state_channel_diff_v1_pb(#blockchain_state_channel_diff_v1_pb{id
                                                                                        =
                                                                                        F1,
                                                                                    add_nonce
                                                                                        =
                                                                                        F2,
                                                                                    signature
                                                                                        =
                                                                                        F3,
                                                                                    diffs
                                                                                        =
                                                                                        F4},
                                               Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    begin
        TrF4 = id(F4, TrUserData),
        if TrF4 == [] -> B3;
           true ->
               e_field_blockchain_state_channel_diff_v1_pb_diffs(TrF4,
                                                                 B3,
                                                                 TrUserData)
        end
    end.

encode_msg_blockchain_state_channel_diff_entry_v1_pb(Msg,
                                                     TrUserData) ->
    encode_msg_blockchain_state_channel_diff_entry_v1_pb(Msg,
                                                         <<>>,
                                                         TrUserData).


encode_msg_blockchain_state_channel_diff_entry_v1_pb(#blockchain_state_channel_diff_entry_v1_pb{entry
                                                                                                    =
                                                                                                    F1},
                                                     Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
           case id(F1, TrUserData) of
               {append, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_diff_entry_v1_pb_append(TrTF1,
                                                                                 <<Bin/binary,
                                                                                   10>>,
                                                                                 TrUserData)
                   end;
               {add, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_diff_entry_v1_pb_add(TrTF1,
                                                                              <<Bin/binary,
                                                                                18>>,
                                                                              TrUserData)
                   end
           end
    end.

encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(Msg,
                                                              TrUserData) ->
    encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(Msg,
                                                                  <<>>,
                                                                  TrUserData).


encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(#blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                                                                                      =
                                                                                                                      F1,
                                                                                                                  num_packets
                                                                                                                      =
                                                                                                                      F2,
                                                                                                                  num_dcs
                                                                                                                      =
                                                                                                                      F3},
                                                              Bin,
                                                              TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(Msg,
                                                              TrUserData) ->
    encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(Msg,
                                                                  <<>>,
                                                                  TrUserData).


encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(#blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                                                                                      =
                                                                                                                      F1,
                                                                                                                  add_packets
                                                                                                                      =
                                                                                                                      F2,
                                                                                                                  add_dcs
                                                                                                                      =
                                                                                                                      F3},
                                                              Bin,
                                                              TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_banner_v1_pb(Msg,
                                                 TrUserData) ->
    encode_msg_blockchain_state_channel_banner_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData).


encode_msg_blockchain_state_channel_banner_v1_pb(#blockchain_state_channel_banner_v1_pb{sc
                                                                                            =
                                                                                            F1},
                                                 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= undefined -> Bin;
                  true ->
                      e_mfield_blockchain_state_channel_banner_v1_pb_sc(TrF1,
                                                                        <<Bin/binary,
                                                                          10>>,
                                                                        TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_rejection_v1_pb(Msg,
                                                    TrUserData) ->
    encode_msg_blockchain_state_channel_rejection_v1_pb(Msg,
                                                        <<>>,
                                                        TrUserData).


encode_msg_blockchain_state_channel_rejection_v1_pb(#blockchain_state_channel_rejection_v1_pb{reject
                                                                                                  =
                                                                                                  F1,
                                                                                              packet_hash
                                                                                                  =
                                                                                                  F2},
                                                    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_state_channel_message_v1_pb(Msg,
                                                  TrUserData) ->
    encode_msg_blockchain_state_channel_message_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData).


encode_msg_blockchain_state_channel_message_v1_pb(#blockchain_state_channel_message_v1_pb{msg
                                                                                              =
                                                                                              F1},
                                                  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
           case id(F1, TrUserData) of
               {response, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_message_v1_pb_response(TrTF1,
                                                                                <<Bin/binary,
                                                                                  18>>,
                                                                                TrUserData)
                   end;
               {packet, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_message_v1_pb_packet(TrTF1,
                                                                              <<Bin/binary,
                                                                                34>>,
                                                                              TrUserData)
                   end;
               {offer, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_message_v1_pb_offer(TrTF1,
                                                                             <<Bin/binary,
                                                                               42>>,
                                                                             TrUserData)
                   end;
               {purchase, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_message_v1_pb_purchase(TrTF1,
                                                                                <<Bin/binary,
                                                                                  50>>,
                                                                                TrUserData)
                   end;
               {banner, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_message_v1_pb_banner(TrTF1,
                                                                              <<Bin/binary,
                                                                                58>>,
                                                                              TrUserData)
                   end;
               {reject, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_state_channel_message_v1_pb_reject(TrTF1,
                                                                              <<Bin/binary,
                                                                                66>>,
                                                                              TrUserData)
                   end
           end
    end.

encode_msg_eui_pb(Msg, TrUserData) ->
    encode_msg_eui_pb(Msg, <<>>, TrUserData).


encode_msg_eui_pb(#eui_pb{deveui = F1, appeui = F2},
                  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_routing_information_pb(Msg, TrUserData) ->
    encode_msg_routing_information_pb(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_routing_information_pb(#routing_information_pb{data
                                                              = F1},
                                  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
           case id(F1, TrUserData) of
               {devaddr, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData)
                   end;
               {eui, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_routing_information_pb_eui(TrTF1,
                                                           <<Bin/binary, 18>>,
                                                           TrUserData)
                   end
           end
    end.

encode_msg_window_pb(Msg, TrUserData) ->
    encode_msg_window_pb(Msg, <<>>, TrUserData).


encode_msg_window_pb(#window_pb{timestamp = F1,
                                frequency = F2, datarate = F3},
                     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0.0 -> B1;
                       true ->
                           e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case is_empty_string(TrF3) of
                   true -> B2;
                   false ->
                       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_packet_pb(Msg, TrUserData) ->
    encode_msg_packet_pb(Msg, <<>>, TrUserData).


encode_msg_packet_pb(#packet_pb{oui = F1, type = F2,
                                payload = F3, timestamp = F4,
                                signal_strength = F5, frequency = F6,
                                datarate = F7, snr = F8, routing = F9,
                                rx2_window = F10},
                     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= longfi; TrF2 =:= 0 -> B1;
                       true ->
                           'e_enum_packet_pb.packet_type'(TrF2,
                                                          <<B1/binary, 16>>,
                                                          TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if TrF5 =:= 0.0 -> B4;
                       true ->
                           e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if TrF6 =:= 0.0 -> B5;
                       true ->
                           e_type_float(TrF6, <<B5/binary, 53>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case is_empty_string(TrF7) of
                        true -> B6;
                        false ->
                            e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end
         end,
    B8 = if F8 == undefined -> B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if TrF8 =:= 0.0 -> B7;
                       true ->
                           e_type_float(TrF8, <<B7/binary, 69>>, TrUserData)
                    end
                end
         end,
    B9 = if F9 == undefined -> B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if TrF9 =:= undefined -> B8;
                       true ->
                           e_mfield_packet_pb_routing(TrF9,
                                                      <<B8/binary, 74>>,
                                                      TrUserData)
                    end
                end
         end,
    if F10 == undefined -> B9;
       true ->
           begin
               TrF10 = id(F10, TrUserData),
               if TrF10 =:= undefined -> B9;
                  true ->
                      e_mfield_packet_pb_rx2_window(TrF10,
                                                    <<B9/binary, 82>>,
                                                    TrUserData)
               end
           end
    end.

encode_msg_blockchain_txn_state_channel_close_v1_pb(Msg,
                                                    TrUserData) ->
    encode_msg_blockchain_txn_state_channel_close_v1_pb(Msg,
                                                        <<>>,
                                                        TrUserData).


encode_msg_blockchain_txn_state_channel_close_v1_pb(#blockchain_txn_state_channel_close_v1_pb{state_channel
                                                                                                  =
                                                                                                  F1,
                                                                                              closer
                                                                                                  =
                                                                                                  F2,
                                                                                              signature
                                                                                                  =
                                                                                                  F3,
                                                                                              fee
                                                                                                  =
                                                                                                  F4,
                                                                                              conflicts_with
                                                                                                  =
                                                                                                  F5},
                                                    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true ->
                           e_mfield_blockchain_txn_state_channel_close_v1_pb_state_channel(TrF1,
                                                                                           <<Bin/binary,
                                                                                             10>>,
                                                                                           TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if TrF4 =:= 0 -> B3;
                       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end
         end,
    if F5 == undefined -> B4;
       true ->
           begin
               TrF5 = id(F5, TrUserData),
               if TrF5 =:= undefined -> B4;
                  true ->
                      e_mfield_blockchain_txn_state_channel_close_v1_pb_conflicts_with(TrF5,
                                                                                       <<B4/binary,
                                                                                         42>>,
                                                                                       TrUserData)
               end
           end
    end.

encode_msg_blockchain_var_v1_pb(Msg, TrUserData) ->
    encode_msg_blockchain_var_v1_pb(Msg, <<>>, TrUserData).


encode_msg_blockchain_var_v1_pb(#blockchain_var_v1_pb{name
                                                          = F1,
                                                      type = F2, value = F3},
                                Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false ->
                            e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false ->
                            e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case iolist_size(TrF3) of
                   0 -> B2;
                   _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_txn_vars_v1_pb(Msg, TrUserData) ->
    encode_msg_blockchain_txn_vars_v1_pb(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_blockchain_txn_vars_v1_pb(#blockchain_txn_vars_v1_pb{vars
                                                                    = F1,
                                                                version_predicate
                                                                    = F2,
                                                                proof = F3,
                                                                master_key = F4,
                                                                key_proof = F5,
                                                                cancels = F6,
                                                                unsets = F7,
                                                                nonce = F8,
                                                                multi_keys = F9,
                                                                multi_proofs =
                                                                    F10,
                                                                multi_key_proofs
                                                                    = F11},
                                     Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true ->
                    e_field_blockchain_txn_vars_v1_pb_vars(TrF1,
                                                           Bin,
                                                           TrUserData)
             end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             if TrF6 == [] -> B5;
                true ->
                    e_field_blockchain_txn_vars_v1_pb_cancels(TrF6,
                                                              B5,
                                                              TrUserData)
             end
         end,
    B7 = begin
             TrF7 = id(F7, TrUserData),
             if TrF7 == [] -> B6;
                true ->
                    e_field_blockchain_txn_vars_v1_pb_unsets(TrF7,
                                                             B6,
                                                             TrUserData)
             end
         end,
    B8 = if F8 == undefined -> B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if TrF8 =:= 0 -> B7;
                       true -> e_varint(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
         end,
    B9 = begin
             TrF9 = id(F9, TrUserData),
             if TrF9 == [] -> B8;
                true ->
                    e_field_blockchain_txn_vars_v1_pb_multi_keys(TrF9,
                                                                 B8,
                                                                 TrUserData)
             end
         end,
    B10 = begin
              TrF10 = id(F10, TrUserData),
              if TrF10 == [] -> B9;
                 true ->
                     e_field_blockchain_txn_vars_v1_pb_multi_proofs(TrF10,
                                                                    B9,
                                                                    TrUserData)
              end
          end,
    begin
        TrF11 = id(F11, TrUserData),
        if TrF11 == [] -> B10;
           true ->
               e_field_blockchain_txn_vars_v1_pb_multi_key_proofs(TrF11,
                                                                  B10,
                                                                  TrUserData)
        end
    end.

encode_msg_blockchain_txn_poc_receipts_v1_pb(Msg,
                                             TrUserData) ->
    encode_msg_blockchain_txn_poc_receipts_v1_pb(Msg,
                                                 <<>>,
                                                 TrUserData).


encode_msg_blockchain_txn_poc_receipts_v1_pb(#blockchain_txn_poc_receipts_v1_pb{challenger
                                                                                    =
                                                                                    F1,
                                                                                secret
                                                                                    =
                                                                                    F2,
                                                                                onion_key_hash
                                                                                    =
                                                                                    F3,
                                                                                path
                                                                                    =
                                                                                    F4,
                                                                                fee
                                                                                    =
                                                                                    F5,
                                                                                signature
                                                                                    =
                                                                                    F6,
                                                                                request_block_hash
                                                                                    =
                                                                                    F7},
                                             Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true ->
                    e_field_blockchain_txn_poc_receipts_v1_pb_path(TrF4,
                                                                   B3,
                                                                   TrUserData)
             end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if TrF5 =:= 0 -> B4;
                       true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
         end,
    if F7 == undefined -> B6;
       true ->
           begin
               TrF7 = id(F7, TrUserData),
               case iolist_size(TrF7) of
                   0 -> B6;
                   _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_poc_receipt_v1_pb(Msg,
                                        TrUserData) ->
    encode_msg_blockchain_poc_receipt_v1_pb(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_blockchain_poc_receipt_v1_pb(#blockchain_poc_receipt_v1_pb{gateway
                                                                          = F1,
                                                                      timestamp
                                                                          = F2,
                                                                      signal =
                                                                          F3,
                                                                      data = F4,
                                                                      origin =
                                                                          F5,
                                                                      signature
                                                                          = F6,
                                                                      snr = F7,
                                                                      frequency
                                                                          = F8,
                                                                      channel =
                                                                          F9,
                                                                      datarate =
                                                                          F10,
                                                                      addr_hash
                                                                          = F11,
                                                                      tx_power =
                                                                          F12},
                                        Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_type_sint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if TrF5 =:= p2p; TrF5 =:= 0 -> B4;
                       true ->
                           'e_enum_helium.origin'(TrF5,
                                                  <<B4/binary, 40>>,
                                                  TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if TrF7 =:= 0.0 -> B6;
                       true ->
                           e_type_float(TrF7, <<B6/binary, 61>>, TrUserData)
                    end
                end
         end,
    B8 = if F8 == undefined -> B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if TrF8 =:= 0.0 -> B7;
                       true ->
                           e_type_float(TrF8, <<B7/binary, 69>>, TrUserData)
                    end
                end
         end,
    B9 = if F9 == undefined -> B8;
            true ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if TrF9 =:= 0 -> B8;
                       true ->
                           e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
                    end
                end
         end,
    B10 = if F10 == undefined -> B9;
             true ->
                 begin
                     TrF10 = id(F10, TrUserData),
                     case is_empty_string(TrF10) of
                         true -> B9;
                         false ->
                             e_type_string(TrF10, <<B9/binary, 82>>, TrUserData)
                     end
                 end
          end,
    B11 = if F11 == undefined -> B10;
             true ->
                 begin
                     TrF11 = id(F11, TrUserData),
                     case iolist_size(TrF11) of
                         0 -> B10;
                         _ ->
                             e_type_bytes(TrF11, <<B10/binary, 90>>, TrUserData)
                     end
                 end
          end,
    if F12 == undefined -> B11;
       true ->
           begin
               TrF12 = id(F12, TrUserData),
               if TrF12 =:= 0 -> B11;
                  true ->
                      e_type_int32(TrF12, <<B11/binary, 96>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_poc_witness_v1_pb(Msg,
                                        TrUserData) ->
    encode_msg_blockchain_poc_witness_v1_pb(Msg,
                                            <<>>,
                                            TrUserData).


encode_msg_blockchain_poc_witness_v1_pb(#blockchain_poc_witness_v1_pb{gateway
                                                                          = F1,
                                                                      timestamp
                                                                          = F2,
                                                                      signal =
                                                                          F3,
                                                                      packet_hash
                                                                          = F4,
                                                                      signature
                                                                          = F5,
                                                                      snr = F6,
                                                                      frequency
                                                                          = F7,
                                                                      channel =
                                                                          F8,
                                                                      datarate =
                                                                          F9},
                                        Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_type_sint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    B4 = if F4 == undefined -> B3;
            true ->
                begin
                    TrF4 = id(F4, TrUserData),
                    case iolist_size(TrF4) of
                        0 -> B3;
                        _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                    end
                end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if TrF6 =:= 0.0 -> B5;
                       true ->
                           e_type_float(TrF6, <<B5/binary, 53>>, TrUserData)
                    end
                end
         end,
    B7 = if F7 == undefined -> B6;
            true ->
                begin
                    TrF7 = id(F7, TrUserData),
                    if TrF7 =:= 0.0 -> B6;
                       true ->
                           e_type_float(TrF7, <<B6/binary, 61>>, TrUserData)
                    end
                end
         end,
    B8 = if F8 == undefined -> B7;
            true ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if TrF8 =:= 0 -> B7;
                       true ->
                           e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
                    end
                end
         end,
    if F9 == undefined -> B8;
       true ->
           begin
               TrF9 = id(F9, TrUserData),
               case is_empty_string(TrF9) of
                   true -> B8;
                   false ->
                       e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_poc_response_v1_pb(Msg,
                                         TrUserData) ->
    encode_msg_blockchain_poc_response_v1_pb(Msg,
                                             <<>>,
                                             TrUserData).


encode_msg_blockchain_poc_response_v1_pb(#blockchain_poc_response_v1_pb{payload
                                                                            =
                                                                            F1},
                                         Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
           case id(F1, TrUserData) of
               {receipt, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_poc_response_v1_pb_receipt(TrTF1,
                                                                      <<Bin/binary,
                                                                        10>>,
                                                                      TrUserData)
                   end;
               {witness, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_blockchain_poc_response_v1_pb_witness(TrTF1,
                                                                      <<Bin/binary,
                                                                        18>>,
                                                                      TrUserData)
                   end
           end
    end.

encode_msg_blockchain_poc_path_element_v1_pb(Msg,
                                             TrUserData) ->
    encode_msg_blockchain_poc_path_element_v1_pb(Msg,
                                                 <<>>,
                                                 TrUserData).


encode_msg_blockchain_poc_path_element_v1_pb(#blockchain_poc_path_element_v1_pb{challengee
                                                                                    =
                                                                                    F1,
                                                                                receipt
                                                                                    =
                                                                                    F2,
                                                                                witnesses
                                                                                    =
                                                                                    F3},
                                             Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= undefined -> B1;
                       true ->
                           e_mfield_blockchain_poc_path_element_v1_pb_receipt(TrF2,
                                                                              <<B1/binary,
                                                                                18>>,
                                                                              TrUserData)
                    end
                end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true ->
               e_field_blockchain_poc_path_element_v1_pb_witnesses(TrF3,
                                                                   B2,
                                                                   TrUserData)
        end
    end.

encode_msg_blockchain_txn_poc_receipts_v2_pb(Msg,
                                             TrUserData) ->
    encode_msg_blockchain_txn_poc_receipts_v2_pb(Msg,
                                                 <<>>,
                                                 TrUserData).


encode_msg_blockchain_txn_poc_receipts_v2_pb(#blockchain_txn_poc_receipts_v2_pb{challenger
                                                                                    =
                                                                                    F1,
                                                                                secret
                                                                                    =
                                                                                    F2,
                                                                                onion_key_hash
                                                                                    =
                                                                                    F3,
                                                                                path
                                                                                    =
                                                                                    F4,
                                                                                fee
                                                                                    =
                                                                                    F5,
                                                                                signature
                                                                                    =
                                                                                    F6,
                                                                                block_hash
                                                                                    =
                                                                                    F7},
                                             Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true ->
                    e_field_blockchain_txn_poc_receipts_v2_pb_path(TrF4,
                                                                   B3,
                                                                   TrUserData)
             end
         end,
    B5 = if F5 == undefined -> B4;
            true ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if TrF5 =:= 0 -> B4;
                       true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                    end
                end
         end,
    B6 = if F6 == undefined -> B5;
            true ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end
         end,
    if F7 == undefined -> B6;
       true ->
           begin
               TrF7 = id(F7, TrUserData),
               case iolist_size(TrF7) of
                   0 -> B6;
                   _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_region_params_v1_pb(Msg,
                                          TrUserData) ->
    encode_msg_blockchain_region_params_v1_pb(Msg,
                                              <<>>,
                                              TrUserData).


encode_msg_blockchain_region_params_v1_pb(#blockchain_region_params_v1_pb{region_params
                                                                              =
                                                                              F1},
                                          Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_blockchain_region_params_v1_pb_region_params(TrF1,
                                                                    Bin,
                                                                    TrUserData)
        end
    end.

encode_msg_tagged_spreading_pb(Msg, TrUserData) ->
    encode_msg_tagged_spreading_pb(Msg, <<>>, TrUserData).


encode_msg_tagged_spreading_pb(#tagged_spreading_pb{region_spreading
                                                        = F1,
                                                    max_packet_size = F2},
                               Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'SF_INVALID'; TrF1 =:= 0 -> Bin;
                       true ->
                           'e_enum_helium.RegionSpreading'(TrF1,
                                                           <<Bin/binary, 8>>,
                                                           TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= 0 -> B1;
                  true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
               end
           end
    end.

encode_msg_blockchain_region_spreading_v1_pb(Msg,
                                             TrUserData) ->
    encode_msg_blockchain_region_spreading_v1_pb(Msg,
                                                 <<>>,
                                                 TrUserData).


encode_msg_blockchain_region_spreading_v1_pb(#blockchain_region_spreading_v1_pb{tagged_spreading
                                                                                    =
                                                                                    F1},
                                             Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true ->
               e_field_blockchain_region_spreading_v1_pb_tagged_spreading(TrF1,
                                                                          Bin,
                                                                          TrUserData)
        end
    end.

encode_msg_blockchain_region_param_v1_pb(Msg,
                                         TrUserData) ->
    encode_msg_blockchain_region_param_v1_pb(Msg,
                                             <<>>,
                                             TrUserData).


encode_msg_blockchain_region_param_v1_pb(#blockchain_region_param_v1_pb{channel_frequency
                                                                            =
                                                                            F1,
                                                                        bandwidth
                                                                            =
                                                                            F2,
                                                                        max_eirp
                                                                            =
                                                                            F3,
                                                                        spreading
                                                                            =
                                                                            F4},
                                         Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= undefined -> B3;
                  true ->
                      e_mfield_blockchain_region_param_v1_pb_spreading(TrF4,
                                                                       <<B3/binary,
                                                                         34>>,
                                                                       TrUserData)
               end
           end
    end.

e_field_gateway_config_req_v1_pb_keys([Elem | Rest],
                                      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_gateway_config_req_v1_pb_keys(Rest,
                                          Bin3,
                                          TrUserData);
e_field_gateway_config_req_v1_pb_keys([], Bin,
                                      _TrUserData) ->
    Bin.

e_mfield_gateway_config_resp_v1_pb_result(Msg, Bin,
                                          TrUserData) ->
    SubBin = encode_msg_blockchain_var_v1_pb(Msg,
                                             <<>>,
                                             TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_gateway_config_resp_v1_pb_result([Elem | Rest],
                                         Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_gateway_config_resp_v1_pb_result(id(Elem,
                                                     TrUserData),
                                                  Bin2,
                                                  TrUserData),
    e_field_gateway_config_resp_v1_pb_result(Rest,
                                             Bin3,
                                             TrUserData);
e_field_gateway_config_resp_v1_pb_result([], Bin,
                                         _TrUserData) ->
    Bin.

e_field_gateway_config_update_streamed_resp_v1_pb_keys([Elem
                                                        | Rest],
                                                       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData),
                         Bin2,
                         TrUserData),
    e_field_gateway_config_update_streamed_resp_v1_pb_keys(Rest,
                                                           Bin3,
                                                           TrUserData);
e_field_gateway_config_update_streamed_resp_v1_pb_keys([],
                                                       Bin, _TrUserData) ->
    Bin.

e_mfield_gateway_validators_resp_v1_pb_result(Msg, Bin,
                                              TrUserData) ->
    SubBin = encode_msg_routing_address_pb(Msg,
                                           <<>>,
                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_gateway_validators_resp_v1_pb_result([Elem
                                              | Rest],
                                             Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_gateway_validators_resp_v1_pb_result(id(Elem,
                                                         TrUserData),
                                                      Bin2,
                                                      TrUserData),
    e_field_gateway_validators_resp_v1_pb_result(Rest,
                                                 Bin3,
                                                 TrUserData);
e_field_gateway_validators_resp_v1_pb_result([], Bin,
                                             _TrUserData) ->
    Bin.

e_mfield_gateway_resp_v1_pb_is_active_resp(Msg, Bin,
                                           TrUserData) ->
    SubBin = encode_msg_gateway_sc_is_active_resp_v1_pb(Msg,
                                                        <<>>,
                                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_is_overpaid_resp(Msg, Bin,
                                             TrUserData) ->
    SubBin =
        encode_msg_gateway_sc_is_overpaid_resp_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_close_resp(Msg, Bin,
                                       TrUserData) ->
    SubBin = encode_msg_gateway_sc_close_resp_v1_pb(Msg,
                                                    <<>>,
                                                    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_follow_streamed_resp(Msg,
                                                 Bin, TrUserData) ->
    SubBin =
        encode_msg_gateway_sc_follow_streamed_resp_v1_pb(Msg,
                                                         <<>>,
                                                         TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_routing_streamed_resp(Msg,
                                                  Bin, TrUserData) ->
    SubBin =
        encode_msg_gateway_routing_streamed_resp_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_config_resp(Msg, Bin,
                                        TrUserData) ->
    SubBin = encode_msg_gateway_config_resp_v1_pb(Msg,
                                                  <<>>,
                                                  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_config_update_streamed_resp(Msg,
                                                        Bin, TrUserData) ->
    SubBin =
        encode_msg_gateway_config_update_streamed_resp_v1_pb(Msg,
                                                             <<>>,
                                                             TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_validators_resp(Msg, Bin,
                                            TrUserData) ->
    SubBin = encode_msg_gateway_validators_resp_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_success_resp(Msg, Bin,
                                         TrUserData) ->
    SubBin = encode_msg_gateway_success_resp_pb(Msg,
                                                <<>>,
                                                TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_error_resp(Msg, Bin,
                                       TrUserData) ->
    SubBin = encode_msg_gateway_error_resp_pb(Msg,
                                              <<>>,
                                              TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_poc_challenge_resp(Msg, Bin,
                                               TrUserData) ->
    SubBin =
        encode_msg_gateway_poc_challenge_notification_resp_v1_pb(Msg,
                                                                 <<>>,
                                                                 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_poc_check_target_resp(Msg,
                                                  Bin, TrUserData) ->
    SubBin =
        encode_msg_gateway_poc_check_challenge_target_resp_v1_pb(Msg,
                                                                 <<>>,
                                                                 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_public_route(Msg, Bin,
                                         TrUserData) ->
    SubBin =
        encode_msg_gateway_public_routing_data_resp_v1_pb(Msg,
                                                          <<>>,
                                                          TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_resp_v1_pb_poc_region_params_resp(Msg,
                                                   Bin, TrUserData) ->
    SubBin =
        encode_msg_gateway_poc_region_params_resp_v1_pb(Msg,
                                                        <<>>,
                                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_sc_close_req_v1_pb_close_txn(Msg, Bin,
                                              TrUserData) ->
    SubBin =
        encode_msg_blockchain_txn_state_channel_close_v1_pb(Msg,
                                                            <<>>,
                                                            TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_routing_pb_addresses(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_routing_address_pb(Msg,
                                           <<>>,
                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_routing_pb_addresses([Elem | Rest], Bin,
                             TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_routing_pb_addresses(id(Elem,
                                            TrUserData),
                                         Bin2,
                                         TrUserData),
    e_field_routing_pb_addresses(Rest, Bin3, TrUserData);
e_field_routing_pb_addresses([], Bin, _TrUserData) ->
    Bin.

e_field_routing_pb_filters([Elem | Rest], Bin,
                           TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_routing_pb_filters(Rest, Bin3, TrUserData);
e_field_routing_pb_filters([], Bin, _TrUserData) -> Bin.

e_field_routing_pb_subnets([Elem | Rest], Bin,
                           TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_routing_pb_subnets(Rest, Bin3, TrUserData);
e_field_routing_pb_subnets([], Bin, _TrUserData) -> Bin.

e_mfield_gateway_routing_streamed_resp_v1_pb_routings(Msg,
                                                      Bin, TrUserData) ->
    SubBin = encode_msg_routing_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_gateway_routing_streamed_resp_v1_pb_routings([Elem
                                                      | Rest],
                                                     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_gateway_routing_streamed_resp_v1_pb_routings(id(Elem,
                                                                 TrUserData),
                                                              Bin2,
                                                              TrUserData),
    e_field_gateway_routing_streamed_resp_v1_pb_routings(Rest,
                                                         Bin3,
                                                         TrUserData);
e_field_gateway_routing_streamed_resp_v1_pb_routings([],
                                                     Bin, _TrUserData) ->
    Bin.

e_mfield_gateway_poc_challenge_notification_resp_v1_pb_challenger(Msg,
                                                                  Bin,
                                                                  TrUserData) ->
    SubBin = encode_msg_routing_address_pb(Msg,
                                           <<>>,
                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_poc_region_params_resp_v1_pb_params(Msg,
                                                     Bin, TrUserData) ->
    SubBin = encode_msg_blockchain_region_params_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_poc_report_req_v1_pb_receipt(Msg, Bin,
                                              TrUserData) ->
    SubBin = encode_msg_blockchain_poc_receipt_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_poc_report_req_v1_pb_witness(Msg, Bin,
                                              TrUserData) ->
    SubBin = encode_msg_blockchain_poc_witness_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_gateway_public_routing_data_resp_v1_pb_public_uri(Msg,
                                                           Bin, TrUserData) ->
    SubBin = encode_msg_routing_address_pb(Msg,
                                           <<>>,
                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_v1_pb_summaries(Msg,
                                                  Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_summary_v1_pb(Msg,
                                                          <<>>,
                                                          TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_state_channel_v1_pb_summaries([Elem
                                                  | Rest],
                                                 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
        e_mfield_blockchain_state_channel_v1_pb_summaries(id(Elem,
                                                             TrUserData),
                                                          Bin2,
                                                          TrUserData),
    e_field_blockchain_state_channel_v1_pb_summaries(Rest,
                                                     Bin3,
                                                     TrUserData);
e_field_blockchain_state_channel_v1_pb_summaries([],
                                                 Bin, _TrUserData) ->
    Bin.

e_mfield_blockchain_state_channel_response_v1_pb_downlink(Msg,
                                                          Bin, TrUserData) ->
    SubBin = encode_msg_packet_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_packet_v1_pb_packet(Msg,
                                                      Bin, TrUserData) ->
    SubBin = encode_msg_packet_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_offer_v1_pb_routing(Msg,
                                                      Bin, TrUserData) ->
    SubBin = encode_msg_routing_information_pb(Msg,
                                               <<>>,
                                               TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_purchase_v1_pb_sc(Msg,
                                                    Bin, TrUserData) ->
    SubBin = encode_msg_blockchain_state_channel_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_purchase_v1_pb_sc_diff(Msg,
                                                         Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_diff_v1_pb_diffs(Msg,
                                                   Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_entry_v1_pb(Msg,
                                                             <<>>,
                                                             TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_state_channel_diff_v1_pb_diffs([Elem
                                                   | Rest],
                                                  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
        e_mfield_blockchain_state_channel_diff_v1_pb_diffs(id(Elem,
                                                              TrUserData),
                                                           Bin2,
                                                           TrUserData),
    e_field_blockchain_state_channel_diff_v1_pb_diffs(Rest,
                                                      Bin3,
                                                      TrUserData);
e_field_blockchain_state_channel_diff_v1_pb_diffs([],
                                                  Bin, _TrUserData) ->
    Bin.

e_mfield_blockchain_state_channel_diff_entry_v1_pb_append(Msg,
                                                          Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_append_summary_v1_pb(Msg,
                                                                      <<>>,
                                                                      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_diff_entry_v1_pb_add(Msg,
                                                       Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_diff_update_summary_v1_pb(Msg,
                                                                      <<>>,
                                                                      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_banner_v1_pb_sc(Msg,
                                                  Bin, TrUserData) ->
    SubBin = encode_msg_blockchain_state_channel_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_response(Msg,
                                                         Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_response_v1_pb(Msg,
                                                           <<>>,
                                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_packet(Msg,
                                                       Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_packet_v1_pb(Msg,
                                                         <<>>,
                                                         TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_offer(Msg,
                                                      Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_offer_v1_pb(Msg,
                                                        <<>>,
                                                        TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_purchase(Msg,
                                                         Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_purchase_v1_pb(Msg,
                                                           <<>>,
                                                           TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_banner(Msg,
                                                       Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_banner_v1_pb(Msg,
                                                         <<>>,
                                                         TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v1_pb_reject(Msg,
                                                       Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_state_channel_rejection_v1_pb(Msg,
                                                            <<>>,
                                                            TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_routing_information_pb_eui(Msg, Bin,
                                    TrUserData) ->
    SubBin = encode_msg_eui_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_packet_pb_routing(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_routing_information_pb(Msg,
                                               <<>>,
                                               TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_packet_pb_rx2_window(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_window_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_txn_state_channel_close_v1_pb_state_channel(Msg,
                                                                Bin,
                                                                TrUserData) ->
    SubBin = encode_msg_blockchain_state_channel_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_txn_state_channel_close_v1_pb_conflicts_with(Msg,
                                                                 Bin,
                                                                 TrUserData) ->
    SubBin = encode_msg_blockchain_state_channel_v1_pb(Msg,
                                                       <<>>,
                                                       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_txn_vars_v1_pb_vars(Msg, Bin,
                                        TrUserData) ->
    SubBin = encode_msg_blockchain_var_v1_pb(Msg,
                                             <<>>,
                                             TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_txn_vars_v1_pb_vars([Elem | Rest],
                                       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_blockchain_txn_vars_v1_pb_vars(id(Elem,
                                                      TrUserData),
                                                   Bin2,
                                                   TrUserData),
    e_field_blockchain_txn_vars_v1_pb_vars(Rest,
                                           Bin3,
                                           TrUserData);
e_field_blockchain_txn_vars_v1_pb_vars([], Bin,
                                       _TrUserData) ->
    Bin.

e_field_blockchain_txn_vars_v1_pb_cancels([Elem | Rest],
                                          Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_blockchain_txn_vars_v1_pb_cancels(Rest,
                                              Bin3,
                                              TrUserData);
e_field_blockchain_txn_vars_v1_pb_cancels([], Bin,
                                          _TrUserData) ->
    Bin.

e_field_blockchain_txn_vars_v1_pb_unsets([Elem | Rest],
                                         Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_blockchain_txn_vars_v1_pb_unsets(Rest,
                                             Bin3,
                                             TrUserData);
e_field_blockchain_txn_vars_v1_pb_unsets([], Bin,
                                         _TrUserData) ->
    Bin.

e_field_blockchain_txn_vars_v1_pb_multi_keys([Elem
                                              | Rest],
                                             Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_blockchain_txn_vars_v1_pb_multi_keys(Rest,
                                                 Bin3,
                                                 TrUserData);
e_field_blockchain_txn_vars_v1_pb_multi_keys([], Bin,
                                             _TrUserData) ->
    Bin.

e_field_blockchain_txn_vars_v1_pb_multi_proofs([Elem
                                                | Rest],
                                               Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_blockchain_txn_vars_v1_pb_multi_proofs(Rest,
                                                   Bin3,
                                                   TrUserData);
e_field_blockchain_txn_vars_v1_pb_multi_proofs([], Bin,
                                               _TrUserData) ->
    Bin.

e_field_blockchain_txn_vars_v1_pb_multi_key_proofs([Elem
                                                    | Rest],
                                                   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData),
                        Bin2,
                        TrUserData),
    e_field_blockchain_txn_vars_v1_pb_multi_key_proofs(Rest,
                                                       Bin3,
                                                       TrUserData);
e_field_blockchain_txn_vars_v1_pb_multi_key_proofs([],
                                                   Bin, _TrUserData) ->
    Bin.

e_mfield_blockchain_txn_poc_receipts_v1_pb_path(Msg,
                                                Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_poc_path_element_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_txn_poc_receipts_v1_pb_path([Elem
                                                | Rest],
                                               Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
        e_mfield_blockchain_txn_poc_receipts_v1_pb_path(id(Elem,
                                                           TrUserData),
                                                        Bin2,
                                                        TrUserData),
    e_field_blockchain_txn_poc_receipts_v1_pb_path(Rest,
                                                   Bin3,
                                                   TrUserData);
e_field_blockchain_txn_poc_receipts_v1_pb_path([], Bin,
                                               _TrUserData) ->
    Bin.

e_mfield_blockchain_poc_response_v1_pb_receipt(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_blockchain_poc_receipt_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_poc_response_v1_pb_witness(Msg, Bin,
                                               TrUserData) ->
    SubBin = encode_msg_blockchain_poc_witness_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_poc_path_element_v1_pb_receipt(Msg,
                                                   Bin, TrUserData) ->
    SubBin = encode_msg_blockchain_poc_receipt_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_poc_path_element_v1_pb_witnesses(Msg,
                                                     Bin, TrUserData) ->
    SubBin = encode_msg_blockchain_poc_witness_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_poc_path_element_v1_pb_witnesses([Elem
                                                     | Rest],
                                                    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
        e_mfield_blockchain_poc_path_element_v1_pb_witnesses(id(Elem,
                                                                TrUserData),
                                                             Bin2,
                                                             TrUserData),
    e_field_blockchain_poc_path_element_v1_pb_witnesses(Rest,
                                                        Bin3,
                                                        TrUserData);
e_field_blockchain_poc_path_element_v1_pb_witnesses([],
                                                    Bin, _TrUserData) ->
    Bin.

e_mfield_blockchain_txn_poc_receipts_v2_pb_path(Msg,
                                                Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_poc_path_element_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_txn_poc_receipts_v2_pb_path([Elem
                                                | Rest],
                                               Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
        e_mfield_blockchain_txn_poc_receipts_v2_pb_path(id(Elem,
                                                           TrUserData),
                                                        Bin2,
                                                        TrUserData),
    e_field_blockchain_txn_poc_receipts_v2_pb_path(Rest,
                                                   Bin3,
                                                   TrUserData);
e_field_blockchain_txn_poc_receipts_v2_pb_path([], Bin,
                                               _TrUserData) ->
    Bin.

e_mfield_blockchain_region_params_v1_pb_region_params(Msg,
                                                      Bin, TrUserData) ->
    SubBin = encode_msg_blockchain_region_param_v1_pb(Msg,
                                                      <<>>,
                                                      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_region_params_v1_pb_region_params([Elem
                                                      | Rest],
                                                     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_blockchain_region_params_v1_pb_region_params(id(Elem,
                                                                 TrUserData),
                                                              Bin2,
                                                              TrUserData),
    e_field_blockchain_region_params_v1_pb_region_params(Rest,
                                                         Bin3,
                                                         TrUserData);
e_field_blockchain_region_params_v1_pb_region_params([],
                                                     Bin, _TrUserData) ->
    Bin.

e_mfield_blockchain_region_spreading_v1_pb_tagged_spreading(Msg,
                                                            Bin, TrUserData) ->
    SubBin = encode_msg_tagged_spreading_pb(Msg,
                                            <<>>,
                                            TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_region_spreading_v1_pb_tagged_spreading([Elem
                                                            | Rest],
                                                           Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
        e_mfield_blockchain_region_spreading_v1_pb_tagged_spreading(id(Elem,
                                                                       TrUserData),
                                                                    Bin2,
                                                                    TrUserData),
    e_field_blockchain_region_spreading_v1_pb_tagged_spreading(Rest,
                                                               Bin3,
                                                               TrUserData);
e_field_blockchain_region_spreading_v1_pb_tagged_spreading([],
                                                           Bin, _TrUserData) ->
    Bin.

e_mfield_blockchain_region_param_v1_pb_spreading(Msg,
                                                 Bin, TrUserData) ->
    SubBin =
        encode_msg_blockchain_region_spreading_v1_pb(Msg,
                                                     <<>>,
                                                     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_helium.close_state'(close_state_closable, Bin,
                            _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.close_state'(close_state_closing, Bin,
                            _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.close_state'(close_state_closed, Bin,
                            _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_helium.close_state'(close_state_dispute, Bin,
                            _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_helium.close_state'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_helium.Region'('US915', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.Region'('EU868', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.Region'('EU433', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_helium.Region'('CN470', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_helium.Region'('CN779', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_helium.Region'('AU915', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_helium.Region'('AS923_1', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_helium.Region'('KR920', Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_helium.Region'('IN865', Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_helium.Region'('AS923_2', Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_helium.Region'('AS923_3', Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_helium.Region'('AS923_4', Bin, _TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_helium.Region'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_helium.blockchain_state_channel_state_v1'(open,
                                                  Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.blockchain_state_channel_state_v1'(closed,
                                                  Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.blockchain_state_channel_state_v1'(V,
                                                  Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_packet_pb.packet_type'(longfi, Bin,
                               _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_packet_pb.packet_type'(lorawan, Bin,
                               _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_packet_pb.packet_type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_helium.origin'(p2p, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.origin'(radio, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.origin'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_helium.RegionSpreading'('SF_INVALID', Bin,
                                _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.RegionSpreading'('SF7', Bin,
                                _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.RegionSpreading'('SF8', Bin,
                                _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_helium.RegionSpreading'('SF9', Bin,
                                _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_helium.RegionSpreading'('SF10', Bin,
                                _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_helium.RegionSpreading'('SF11', Bin,
                                _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_helium.RegionSpreading'('SF12', Bin,
                                _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_helium.RegionSpreading'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(empty_pb, Bin, TrUserData) ->
    id(decode_msg_empty_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(gateway_success_resp_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_success_resp_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_error_resp_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_error_resp_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_config_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_config_req_v1_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_config_resp_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_config_resp_v1_pb(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_config_update_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_config_update_req_v1_pb(Bin,
                                                  TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_config_update_streamed_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_config_update_streamed_resp_v1_pb(Bin,
                                                            TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_validators_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_validators_req_v1_pb(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_validators_resp_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_validators_resp_v1_pb(Bin,
                                                TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_resp_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_resp_v1_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_is_active_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_sc_is_active_req_v1_pb(Bin,
                                                 TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_is_active_resp_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_sc_is_active_resp_v1_pb(Bin,
                                                  TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_is_overpaid_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_sc_is_overpaid_req_v1_pb(Bin,
                                                   TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_is_overpaid_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_sc_is_overpaid_resp_v1_pb(Bin,
                                                    TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_close_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_sc_close_req_v1_pb(Bin,
                                             TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_close_resp_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_sc_close_resp_v1_pb(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_follow_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_sc_follow_req_v1_pb(Bin,
                                              TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_sc_follow_streamed_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_sc_follow_streamed_resp_v1_pb(Bin,
                                                        TrUserData),
       TrUserData);
decode_msg_2_doit(routing_pb, Bin, TrUserData) ->
    id(decode_msg_routing_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(routing_address_pb, Bin,
                  TrUserData) ->
    id(decode_msg_routing_address_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_routing_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_routing_req_v1_pb(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_routing_streamed_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_routing_streamed_resp_v1_pb(Bin,
                                                      TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_poc_req_v1_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_challenge_notification_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_poc_challenge_notification_resp_v1_pb(Bin,
                                                                TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_check_challenge_target_req_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_poc_check_challenge_target_req_v1_pb(Bin,
                                                               TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_region_params_req_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_poc_region_params_req_v1_pb(Bin,
                                                      TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_region_params_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_poc_region_params_resp_v1_pb(Bin,
                                                       TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_check_challenge_target_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_poc_check_challenge_target_resp_v1_pb(Bin,
                                                                TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_report_req_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_gateway_poc_report_req_v1_pb(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_address_routing_data_req_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_address_routing_data_req_v1_pb(Bin,
                                                         TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_poc_key_routing_data_req_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_poc_key_routing_data_req_v1_pb(Bin,
                                                         TrUserData),
       TrUserData);
decode_msg_2_doit(gateway_public_routing_data_resp_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_gateway_public_routing_data_resp_v1_pb(Bin,
                                                         TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_summary_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_summary_v1_pb(Bin,
                                                         TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_state_channel_v1_pb(Bin,
                                                 TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_response_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_response_v1_pb(Bin,
                                                          TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_packet_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_packet_v1_pb(Bin,
                                                        TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_offer_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_offer_v1_pb(Bin,
                                                       TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_purchase_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_purchase_v1_pb(Bin,
                                                          TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_diff_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_diff_v1_pb(Bin,
                                                      TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_diff_entry_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_diff_entry_v1_pb(Bin,
                                                            TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_diff_append_summary_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_diff_append_summary_v1_pb(Bin,
                                                                     TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_diff_update_summary_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_diff_update_summary_v1_pb(Bin,
                                                                     TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_banner_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_banner_v1_pb(Bin,
                                                        TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_rejection_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_rejection_v1_pb(Bin,
                                                           TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_state_channel_message_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_state_channel_message_v1_pb(Bin,
                                                         TrUserData),
       TrUserData);
decode_msg_2_doit(eui_pb, Bin, TrUserData) ->
    id(decode_msg_eui_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(routing_information_pb, Bin,
                  TrUserData) ->
    id(decode_msg_routing_information_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(window_pb, Bin, TrUserData) ->
    id(decode_msg_window_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(packet_pb, Bin, TrUserData) ->
    id(decode_msg_packet_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(blockchain_txn_state_channel_close_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_txn_state_channel_close_v1_pb(Bin,
                                                           TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_var_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_var_v1_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_txn_vars_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_txn_vars_v1_pb(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_txn_poc_receipts_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_txn_poc_receipts_v1_pb(Bin,
                                                    TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_poc_receipt_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_poc_receipt_v1_pb(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_poc_witness_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_poc_witness_v1_pb(Bin,
                                               TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_poc_response_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_poc_response_v1_pb(Bin,
                                                TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_poc_path_element_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_poc_path_element_v1_pb(Bin,
                                                    TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_txn_poc_receipts_v2_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_txn_poc_receipts_v2_pb(Bin,
                                                    TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_region_params_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_region_params_v1_pb(Bin,
                                                 TrUserData),
       TrUserData);
decode_msg_2_doit(tagged_spreading_pb, Bin,
                  TrUserData) ->
    id(decode_msg_tagged_spreading_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_region_spreading_v1_pb,
                  Bin, TrUserData) ->
    id(decode_msg_blockchain_region_spreading_v1_pb(Bin,
                                                    TrUserData),
       TrUserData);
decode_msg_2_doit(blockchain_region_param_v1_pb, Bin,
                  TrUserData) ->
    id(decode_msg_blockchain_region_param_v1_pb(Bin,
                                                TrUserData),
       TrUserData).



decode_msg_empty_pb(Bin, TrUserData) ->
    dfp_read_field_def_empty_pb(Bin, 0, 0, TrUserData).

dfp_read_field_def_empty_pb(<<>>, 0, 0, _) ->
    #empty_pb{};
dfp_read_field_def_empty_pb(Other, Z1, Z2,
                            TrUserData) ->
    dg_read_field_def_empty_pb(Other, Z1, Z2, TrUserData).

dg_read_field_def_empty_pb(<<1:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_empty_pb(Rest,
                               N + 7,
                               X bsl N + Acc,
                               TrUserData);
dg_read_field_def_empty_pb(<<0:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_empty_pb(Rest, 0, 0, TrUserData);
        1 -> skip_64_empty_pb(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_empty_pb(Rest, 0, 0, TrUserData);
        3 ->
            skip_group_empty_pb(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_empty_pb(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_empty_pb(<<>>, 0, 0, _) ->
    #empty_pb{}.

skip_varint_empty_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    skip_varint_empty_pb(Rest, Z1, Z2, TrUserData);
skip_varint_empty_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    dfp_read_field_def_empty_pb(Rest, Z1, Z2, TrUserData).

skip_length_delimited_empty_pb(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_empty_pb(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   TrUserData);
skip_length_delimited_empty_pb(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_empty_pb(Rest2, 0, 0, TrUserData).

skip_group_empty_pb(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_empty_pb(Rest, 0, Z2, TrUserData).

skip_32_empty_pb(<<_:32, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_empty_pb(Rest, Z1, Z2, TrUserData).

skip_64_empty_pb(<<_:64, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_empty_pb(Rest, Z1, Z2, TrUserData).

decode_msg_gateway_success_resp_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_success_resp_pb(Bin,
                                               0,
                                               0,
                                               id(<<>>, TrUserData),
                                               id(<<>>, TrUserData),
                                               TrUserData).

dfp_read_field_def_gateway_success_resp_pb(<<10,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_gateway_success_resp_pb_resp(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
dfp_read_field_def_gateway_success_resp_pb(<<18,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_gateway_success_resp_pb_details(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dfp_read_field_def_gateway_success_resp_pb(<<>>, 0, 0,
                                           F@_1, F@_2, _) ->
    #gateway_success_resp_pb{resp = F@_1, details = F@_2};
dfp_read_field_def_gateway_success_resp_pb(Other, Z1,
                                           Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_gateway_success_resp_pb(Other,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData).

dg_read_field_def_gateway_success_resp_pb(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_success_resp_pb(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dg_read_field_def_gateway_success_resp_pb(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_success_resp_pb_resp(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
        18 ->
            d_field_gateway_success_resp_pb_details(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_success_resp_pb(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                1 ->
                    skip_64_gateway_success_resp_pb(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                2 ->
                    skip_length_delimited_gateway_success_resp_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  TrUserData);
                3 ->
                    skip_group_gateway_success_resp_pb(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
                5 ->
                    skip_32_gateway_success_resp_pb(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData)
            end
    end;
dg_read_field_def_gateway_success_resp_pb(<<>>, 0, 0,
                                          F@_1, F@_2, _) ->
    #gateway_success_resp_pb{resp = F@_1, details = F@_2}.

d_field_gateway_success_resp_pb_resp(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_success_resp_pb_resp(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
d_field_gateway_success_resp_pb_resp(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_success_resp_pb(RestF,
                                               0,
                                               0,
                                               NewFValue,
                                               F@_2,
                                               TrUserData).

d_field_gateway_success_resp_pb_details(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_success_resp_pb_details(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
d_field_gateway_success_resp_pb_details(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_success_resp_pb(RestF,
                                               0,
                                               0,
                                               F@_1,
                                               NewFValue,
                                               TrUserData).

skip_varint_gateway_success_resp_pb(<<1:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_success_resp_pb(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
skip_varint_gateway_success_resp_pb(<<0:1, _:7,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_success_resp_pb(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_length_delimited_gateway_success_resp_pb(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_success_resp_pb(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
skip_length_delimited_gateway_success_resp_pb(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_success_resp_pb(Rest2,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_group_gateway_success_resp_pb(Bin, FNum, Z2, F@_1,
                                   F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_success_resp_pb(Rest,
                                               0,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_32_gateway_success_resp_pb(<<_:32, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_success_resp_pb(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

skip_64_gateway_success_resp_pb(<<_:64, Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_success_resp_pb(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData).

decode_msg_gateway_error_resp_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_error_resp_pb(Bin,
                                             0,
                                             0,
                                             id(<<>>, TrUserData),
                                             id(<<>>, TrUserData),
                                             TrUserData).

dfp_read_field_def_gateway_error_resp_pb(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_gateway_error_resp_pb_error(Rest,
                                        Z1,
                                        Z2,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
dfp_read_field_def_gateway_error_resp_pb(<<18,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_gateway_error_resp_pb_details(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dfp_read_field_def_gateway_error_resp_pb(<<>>, 0, 0,
                                         F@_1, F@_2, _) ->
    #gateway_error_resp_pb{error = F@_1, details = F@_2};
dfp_read_field_def_gateway_error_resp_pb(Other, Z1, Z2,
                                         F@_1, F@_2, TrUserData) ->
    dg_read_field_def_gateway_error_resp_pb(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

dg_read_field_def_gateway_error_resp_pb(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_error_resp_pb(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dg_read_field_def_gateway_error_resp_pb(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_error_resp_pb_error(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
        18 ->
            d_field_gateway_error_resp_pb_details(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_error_resp_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                1 ->
                    skip_64_gateway_error_resp_pb(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_gateway_error_resp_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
                3 ->
                    skip_group_gateway_error_resp_pb(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
                5 ->
                    skip_32_gateway_error_resp_pb(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData)
            end
    end;
dg_read_field_def_gateway_error_resp_pb(<<>>, 0, 0,
                                        F@_1, F@_2, _) ->
    #gateway_error_resp_pb{error = F@_1, details = F@_2}.

d_field_gateway_error_resp_pb_error(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_error_resp_pb_error(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        F@_2,
                                        TrUserData);
d_field_gateway_error_resp_pb_error(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_error_resp_pb(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             F@_2,
                                             TrUserData).

d_field_gateway_error_resp_pb_details(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_error_resp_pb_details(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
d_field_gateway_error_resp_pb_details(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_error_resp_pb(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             NewFValue,
                                             TrUserData).

skip_varint_gateway_error_resp_pb(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_error_resp_pb(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
skip_varint_gateway_error_resp_pb(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_error_resp_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_length_delimited_gateway_error_resp_pb(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_error_resp_pb(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
skip_length_delimited_gateway_error_resp_pb(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_error_resp_pb(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_group_gateway_error_resp_pb(Bin, FNum, Z2, F@_1,
                                 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_error_resp_pb(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_32_gateway_error_resp_pb(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_error_resp_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_64_gateway_error_resp_pb(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_error_resp_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

decode_msg_gateway_config_req_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_config_req_v1_pb(Bin,
                                                0,
                                                0,
                                                id([], TrUserData),
                                                TrUserData).

dfp_read_field_def_gateway_config_req_v1_pb(<<10,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    d_field_gateway_config_req_v1_pb_keys(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
dfp_read_field_def_gateway_config_req_v1_pb(<<>>, 0, 0,
                                            R1, TrUserData) ->
    #gateway_config_req_v1_pb{keys =
                                  lists_reverse(R1, TrUserData)};
dfp_read_field_def_gateway_config_req_v1_pb(Other, Z1,
                                            Z2, F@_1, TrUserData) ->
    dg_read_field_def_gateway_config_req_v1_pb(Other,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData).

dg_read_field_def_gateway_config_req_v1_pb(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_config_req_v1_pb(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
dg_read_field_def_gateway_config_req_v1_pb(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_config_req_v1_pb_keys(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_config_req_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                1 ->
                    skip_64_gateway_config_req_v1_pb(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                2 ->
                    skip_length_delimited_gateway_config_req_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                3 ->
                    skip_group_gateway_config_req_v1_pb(Rest,
                                                        Key bsr 3,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                5 ->
                    skip_32_gateway_config_req_v1_pb(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData)
            end
    end;
dg_read_field_def_gateway_config_req_v1_pb(<<>>, 0, 0,
                                           R1, TrUserData) ->
    #gateway_config_req_v1_pb{keys =
                                  lists_reverse(R1, TrUserData)}.

d_field_gateway_config_req_v1_pb_keys(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_config_req_v1_pb_keys(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
d_field_gateway_config_req_v1_pb_keys(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_config_req_v1_pb(RestF,
                                                0,
                                                0,
                                                cons(NewFValue,
                                                     Prev,
                                                     TrUserData),
                                                TrUserData).

skip_varint_gateway_config_req_v1_pb(<<1:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_config_req_v1_pb(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         TrUserData);
skip_varint_gateway_config_req_v1_pb(<<0:1, _:7,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_req_v1_pb(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_length_delimited_gateway_config_req_v1_pb(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_config_req_v1_pb(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
skip_length_delimited_gateway_config_req_v1_pb(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_config_req_v1_pb(Rest2,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData).

skip_group_gateway_config_req_v1_pb(Bin, FNum, Z2, F@_1,
                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_config_req_v1_pb(Rest,
                                                0,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_32_gateway_config_req_v1_pb(<<_:32, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_req_v1_pb(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

skip_64_gateway_config_req_v1_pb(<<_:64, Rest/binary>>,
                                 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_req_v1_pb(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

decode_msg_gateway_config_resp_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_config_resp_v1_pb(Bin,
                                                 0,
                                                 0,
                                                 id([], TrUserData),
                                                 TrUserData).

dfp_read_field_def_gateway_config_resp_v1_pb(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, TrUserData) ->
    d_field_gateway_config_resp_v1_pb_result(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData);
dfp_read_field_def_gateway_config_resp_v1_pb(<<>>, 0, 0,
                                             R1, TrUserData) ->
    #gateway_config_resp_v1_pb{result =
                                   lists_reverse(R1, TrUserData)};
dfp_read_field_def_gateway_config_resp_v1_pb(Other, Z1,
                                             Z2, F@_1, TrUserData) ->
    dg_read_field_def_gateway_config_resp_v1_pb(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

dg_read_field_def_gateway_config_resp_v1_pb(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_config_resp_v1_pb(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
dg_read_field_def_gateway_config_resp_v1_pb(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_config_resp_v1_pb_result(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_config_resp_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                1 ->
                    skip_64_gateway_config_resp_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_gateway_config_resp_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
                3 ->
                    skip_group_gateway_config_resp_v1_pb(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                5 ->
                    skip_32_gateway_config_resp_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData)
            end
    end;
dg_read_field_def_gateway_config_resp_v1_pb(<<>>, 0, 0,
                                            R1, TrUserData) ->
    #gateway_config_resp_v1_pb{result =
                                   lists_reverse(R1, TrUserData)}.

d_field_gateway_config_resp_v1_pb_result(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_config_resp_v1_pb_result(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
d_field_gateway_config_resp_v1_pb_result(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_var_v1_pb(Bs,
                                                                 TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_config_resp_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 TrUserData).

skip_varint_gateway_config_resp_v1_pb(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_config_resp_v1_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
skip_varint_gateway_config_resp_v1_pb(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_resp_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_length_delimited_gateway_config_resp_v1_pb(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_config_resp_v1_pb(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    TrUserData);
skip_length_delimited_gateway_config_resp_v1_pb(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_config_resp_v1_pb(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData).

skip_group_gateway_config_resp_v1_pb(Bin, FNum, Z2,
                                     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_config_resp_v1_pb(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_32_gateway_config_resp_v1_pb(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_resp_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_64_gateway_config_resp_v1_pb(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_resp_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

decode_msg_gateway_config_update_req_v1_pb(Bin,
                                           TrUserData) ->
    dfp_read_field_def_gateway_config_update_req_v1_pb(Bin,
                                                       0,
                                                       0,
                                                       TrUserData).

dfp_read_field_def_gateway_config_update_req_v1_pb(<<>>,
                                                   0, 0, _) ->
    #gateway_config_update_req_v1_pb{};
dfp_read_field_def_gateway_config_update_req_v1_pb(Other,
                                                   Z1, Z2, TrUserData) ->
    dg_read_field_def_gateway_config_update_req_v1_pb(Other,
                                                      Z1,
                                                      Z2,
                                                      TrUserData).

dg_read_field_def_gateway_config_update_req_v1_pb(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_config_update_req_v1_pb(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      TrUserData);
dg_read_field_def_gateway_config_update_req_v1_pb(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 ->
            skip_varint_gateway_config_update_req_v1_pb(Rest,
                                                        0,
                                                        0,
                                                        TrUserData);
        1 ->
            skip_64_gateway_config_update_req_v1_pb(Rest,
                                                    0,
                                                    0,
                                                    TrUserData);
        2 ->
            skip_length_delimited_gateway_config_update_req_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  TrUserData);
        3 ->
            skip_group_gateway_config_update_req_v1_pb(Rest,
                                                       Key bsr 3,
                                                       0,
                                                       TrUserData);
        5 ->
            skip_32_gateway_config_update_req_v1_pb(Rest,
                                                    0,
                                                    0,
                                                    TrUserData)
    end;
dg_read_field_def_gateway_config_update_req_v1_pb(<<>>,
                                                  0, 0, _) ->
    #gateway_config_update_req_v1_pb{}.

skip_varint_gateway_config_update_req_v1_pb(<<1:1, _:7,
                                              Rest/binary>>,
                                            Z1, Z2, TrUserData) ->
    skip_varint_gateway_config_update_req_v1_pb(Rest,
                                                Z1,
                                                Z2,
                                                TrUserData);
skip_varint_gateway_config_update_req_v1_pb(<<0:1, _:7,
                                              Rest/binary>>,
                                            Z1, Z2, TrUserData) ->
    dfp_read_field_def_gateway_config_update_req_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       TrUserData).

skip_length_delimited_gateway_config_update_req_v1_pb(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_config_update_req_v1_pb(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          TrUserData);
skip_length_delimited_gateway_config_update_req_v1_pb(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_config_update_req_v1_pb(Rest2,
                                                       0,
                                                       0,
                                                       TrUserData).

skip_group_gateway_config_update_req_v1_pb(Bin, FNum,
                                           Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_config_update_req_v1_pb(Rest,
                                                       0,
                                                       Z2,
                                                       TrUserData).

skip_32_gateway_config_update_req_v1_pb(<<_:32,
                                          Rest/binary>>,
                                        Z1, Z2, TrUserData) ->
    dfp_read_field_def_gateway_config_update_req_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       TrUserData).

skip_64_gateway_config_update_req_v1_pb(<<_:64,
                                          Rest/binary>>,
                                        Z1, Z2, TrUserData) ->
    dfp_read_field_def_gateway_config_update_req_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       TrUserData).

decode_msg_gateway_config_update_streamed_resp_v1_pb(Bin,
                                                     TrUserData) ->
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Bin,
                                                                 0,
                                                                 0,
                                                                 id([],
                                                                    TrUserData),
                                                                 TrUserData).

dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(<<10,
                                                               Rest/binary>>,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    d_field_gateway_config_update_streamed_resp_v1_pb_keys(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           TrUserData);
dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(<<>>,
                                                             0, 0, R1,
                                                             TrUserData) ->
    #gateway_config_update_streamed_resp_v1_pb{keys =
                                                   lists_reverse(R1,
                                                                 TrUserData)};
dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Other,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    dg_read_field_def_gateway_config_update_streamed_resp_v1_pb(Other,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                TrUserData).

dg_read_field_def_gateway_config_update_streamed_resp_v1_pb(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                TrUserData);
dg_read_field_def_gateway_config_update_streamed_resp_v1_pb(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_config_update_streamed_resp_v1_pb_keys(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          TrUserData);
                1 ->
                    skip_64_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                2 ->
                    skip_length_delimited_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                                    0,
                                                                                    0,
                                                                                    F@_1,
                                                                                    TrUserData);
                3 ->
                    skip_group_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                         Key bsr
                                                                             3,
                                                                         0,
                                                                         F@_1,
                                                                         TrUserData);
                5 ->
                    skip_32_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData)
            end
    end;
dg_read_field_def_gateway_config_update_streamed_resp_v1_pb(<<>>,
                                                            0, 0, R1,
                                                            TrUserData) ->
    #gateway_config_update_streamed_resp_v1_pb{keys =
                                                   lists_reverse(R1,
                                                                 TrUserData)}.

d_field_gateway_config_update_streamed_resp_v1_pb_keys(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_config_update_streamed_resp_v1_pb_keys(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           TrUserData);
d_field_gateway_config_update_streamed_resp_v1_pb_keys(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, Prev,
                                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(RestF,
                                                                 0,
                                                                 0,
                                                                 cons(NewFValue,
                                                                      Prev,
                                                                      TrUserData),
                                                                 TrUserData).

skip_varint_gateway_config_update_streamed_resp_v1_pb(<<1:1,
                                                        _:7, Rest/binary>>,
                                                      Z1, Z2, F@_1,
                                                      TrUserData) ->
    skip_varint_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
skip_varint_gateway_config_update_streamed_resp_v1_pb(<<0:1,
                                                        _:7, Rest/binary>>,
                                                      Z1, Z2, F@_1,
                                                      TrUserData) ->
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_length_delimited_gateway_config_update_streamed_resp_v1_pb(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    TrUserData);
skip_length_delimited_gateway_config_update_streamed_resp_v1_pb(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Rest2,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData).

skip_group_gateway_config_update_streamed_resp_v1_pb(Bin,
                                                     FNum, Z2, F@_1,
                                                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                 0,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_32_gateway_config_update_streamed_resp_v1_pb(<<_:32,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_64_gateway_config_update_streamed_resp_v1_pb(<<_:64,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_config_update_streamed_resp_v1_pb(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

decode_msg_gateway_validators_req_v1_pb(Bin,
                                        TrUserData) ->
    dfp_read_field_def_gateway_validators_req_v1_pb(Bin,
                                                    0,
                                                    0,
                                                    id(0, TrUserData),
                                                    TrUserData).

dfp_read_field_def_gateway_validators_req_v1_pb(<<8,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, TrUserData) ->
    d_field_gateway_validators_req_v1_pb_quantity(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData);
dfp_read_field_def_gateway_validators_req_v1_pb(<<>>, 0,
                                                0, F@_1, _) ->
    #gateway_validators_req_v1_pb{quantity = F@_1};
dfp_read_field_def_gateway_validators_req_v1_pb(Other,
                                                Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_gateway_validators_req_v1_pb(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   TrUserData).

dg_read_field_def_gateway_validators_req_v1_pb(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_validators_req_v1_pb(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   TrUserData);
dg_read_field_def_gateway_validators_req_v1_pb(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_gateway_validators_req_v1_pb_quantity(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_validators_req_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                1 ->
                    skip_64_gateway_validators_req_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_gateway_validators_req_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       TrUserData);
                3 ->
                    skip_group_gateway_validators_req_v1_pb(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            TrUserData);
                5 ->
                    skip_32_gateway_validators_req_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData)
            end
    end;
dg_read_field_def_gateway_validators_req_v1_pb(<<>>, 0,
                                               0, F@_1, _) ->
    #gateway_validators_req_v1_pb{quantity = F@_1}.

d_field_gateway_validators_req_v1_pb_quantity(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_validators_req_v1_pb_quantity(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
d_field_gateway_validators_req_v1_pb_quantity(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_validators_req_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    TrUserData).

skip_varint_gateway_validators_req_v1_pb(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_validators_req_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData);
skip_varint_gateway_validators_req_v1_pb(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_validators_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

skip_length_delimited_gateway_validators_req_v1_pb(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_validators_req_v1_pb(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       TrUserData);
skip_length_delimited_gateway_validators_req_v1_pb(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_validators_req_v1_pb(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    TrUserData).

skip_group_gateway_validators_req_v1_pb(Bin, FNum, Z2,
                                        F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_validators_req_v1_pb(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

skip_32_gateway_validators_req_v1_pb(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_validators_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

skip_64_gateway_validators_req_v1_pb(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_validators_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

decode_msg_gateway_validators_resp_v1_pb(Bin,
                                         TrUserData) ->
    dfp_read_field_def_gateway_validators_resp_v1_pb(Bin,
                                                     0,
                                                     0,
                                                     id([], TrUserData),
                                                     TrUserData).

dfp_read_field_def_gateway_validators_resp_v1_pb(<<10,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_gateway_validators_resp_v1_pb_result(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData);
dfp_read_field_def_gateway_validators_resp_v1_pb(<<>>,
                                                 0, 0, R1, TrUserData) ->
    #gateway_validators_resp_v1_pb{result =
                                       lists_reverse(R1, TrUserData)};
dfp_read_field_def_gateway_validators_resp_v1_pb(Other,
                                                 Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_gateway_validators_resp_v1_pb(Other,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

dg_read_field_def_gateway_validators_resp_v1_pb(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_validators_resp_v1_pb(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    TrUserData);
dg_read_field_def_gateway_validators_resp_v1_pb(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_validators_resp_v1_pb_result(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_validators_resp_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                1 ->
                    skip_64_gateway_validators_resp_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                2 ->
                    skip_length_delimited_gateway_validators_resp_v1_pb(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        TrUserData);
                3 ->
                    skip_group_gateway_validators_resp_v1_pb(Rest,
                                                             Key bsr 3,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                5 ->
                    skip_32_gateway_validators_resp_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData)
            end
    end;
dg_read_field_def_gateway_validators_resp_v1_pb(<<>>, 0,
                                                0, R1, TrUserData) ->
    #gateway_validators_resp_v1_pb{result =
                                       lists_reverse(R1, TrUserData)}.

d_field_gateway_validators_resp_v1_pb_result(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_validators_resp_v1_pb_result(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
d_field_gateway_validators_resp_v1_pb_result(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_address_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_validators_resp_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     cons(NewFValue,
                                                          Prev,
                                                          TrUserData),
                                                     TrUserData).

skip_varint_gateway_validators_resp_v1_pb(<<1:1, _:7,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_validators_resp_v1_pb(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData);
skip_varint_gateway_validators_resp_v1_pb(<<0:1, _:7,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_validators_resp_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

skip_length_delimited_gateway_validators_resp_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_validators_resp_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        TrUserData);
skip_length_delimited_gateway_validators_resp_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_validators_resp_v1_pb(Rest2,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData).

skip_group_gateway_validators_resp_v1_pb(Bin, FNum, Z2,
                                         F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_validators_resp_v1_pb(Rest,
                                                     0,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

skip_32_gateway_validators_resp_v1_pb(<<_:32,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_validators_resp_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

skip_64_gateway_validators_resp_v1_pb(<<_:64,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_validators_resp_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

decode_msg_gateway_resp_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_resp_v1_pb(Bin,
                                          0,
                                          0,
                                          id(0, TrUserData),
                                          id(<<>>, TrUserData),
                                          id(undefined, TrUserData),
                                          id(0, TrUserData),
                                          id(0, TrUserData),
                                          TrUserData).

dfp_read_field_def_gateway_resp_v1_pb(<<8,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_height(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<18,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_signature(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<26,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_is_active_resp(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<34,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_is_overpaid_resp(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<42,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_close_resp(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<50,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_follow_streamed_resp(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<58,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_routing_streamed_resp(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<66,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_config_resp(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<74,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_config_update_streamed_resp(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<98,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_validators_resp(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<106,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_success_resp(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<114,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_error_resp(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<122,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_poc_challenge_resp(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<130, 1,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_poc_check_target_resp(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<138, 1,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_public_route(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<146, 1,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_poc_region_params_resp(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<80,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_block_time(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<88,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    d_field_gateway_resp_v1_pb_block_age(Rest,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
dfp_read_field_def_gateway_resp_v1_pb(<<>>, 0, 0, F@_1,
                                      F@_2, F@_3, F@_4, F@_5, _) ->
    #gateway_resp_v1_pb{height = F@_1, signature = F@_2,
                        msg = F@_3, block_time = F@_4, block_age = F@_5};
dfp_read_field_def_gateway_resp_v1_pb(Other, Z1, Z2,
                                      F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData) ->
    dg_read_field_def_gateway_resp_v1_pb(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData).

dg_read_field_def_gateway_resp_v1_pb(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_resp_v1_pb(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
dg_read_field_def_gateway_resp_v1_pb(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_gateway_resp_v1_pb_height(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              TrUserData);
        18 ->
            d_field_gateway_resp_v1_pb_signature(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
        26 ->
            d_field_gateway_resp_v1_pb_is_active_resp(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
        34 ->
            d_field_gateway_resp_v1_pb_is_overpaid_resp(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        TrUserData);
        42 ->
            d_field_gateway_resp_v1_pb_close_resp(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
        50 ->
            d_field_gateway_resp_v1_pb_follow_streamed_resp(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
        58 ->
            d_field_gateway_resp_v1_pb_routing_streamed_resp(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData);
        66 ->
            d_field_gateway_resp_v1_pb_config_resp(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
        74 ->
            d_field_gateway_resp_v1_pb_config_update_streamed_resp(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   TrUserData);
        98 ->
            d_field_gateway_resp_v1_pb_validators_resp(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData);
        106 ->
            d_field_gateway_resp_v1_pb_success_resp(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
        114 ->
            d_field_gateway_resp_v1_pb_error_resp(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
        122 ->
            d_field_gateway_resp_v1_pb_poc_challenge_resp(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          TrUserData);
        130 ->
            d_field_gateway_resp_v1_pb_poc_check_target_resp(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData);
        138 ->
            d_field_gateway_resp_v1_pb_public_route(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
        146 ->
            d_field_gateway_resp_v1_pb_poc_region_params_resp(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              TrUserData);
        80 ->
            d_field_gateway_resp_v1_pb_block_time(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
        88 ->
            d_field_gateway_resp_v1_pb_block_age(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_resp_v1_pb(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
                1 ->
                    skip_64_gateway_resp_v1_pb(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
                2 ->
                    skip_length_delimited_gateway_resp_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData);
                3 ->
                    skip_group_gateway_resp_v1_pb(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
                5 ->
                    skip_32_gateway_resp_v1_pb(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData)
            end
    end;
dg_read_field_def_gateway_resp_v1_pb(<<>>, 0, 0, F@_1,
                                     F@_2, F@_3, F@_4, F@_5, _) ->
    #gateway_resp_v1_pb{height = F@_1, signature = F@_2,
                        msg = F@_3, block_time = F@_4, block_age = F@_5}.

d_field_gateway_resp_v1_pb_height(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_height(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      TrUserData);
d_field_gateway_resp_v1_pb_height(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_signature(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_signature(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
d_field_gateway_resp_v1_pb_signature(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, _, F@_3, F@_4, F@_5,
                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          NewFValue,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_is_active_resp(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_is_active_resp(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              TrUserData);
d_field_gateway_resp_v1_pb_is_active_resp(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                          TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_sc_is_active_resp_v1_pb(Bs,
                                                                            TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({is_active_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {is_active_resp, MVPrev} ->
                                                  id({is_active_resp,
                                                      merge_msg_gateway_sc_is_active_resp_v1_pb(MVPrev,
                                                                                                NewFValue,
                                                                                                TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({is_active_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_is_overpaid_resp(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_is_overpaid_resp(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
d_field_gateway_resp_v1_pb_is_overpaid_resp(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, Prev, F@_4,
                                            F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_sc_is_overpaid_resp_v1_pb(Bs,
                                                                              TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({is_overpaid_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {is_overpaid_resp, MVPrev} ->
                                                  id({is_overpaid_resp,
                                                      merge_msg_gateway_sc_is_overpaid_resp_v1_pb(MVPrev,
                                                                                                  NewFValue,
                                                                                                  TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({is_overpaid_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_close_resp(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_close_resp(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
d_field_gateway_resp_v1_pb_close_resp(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_sc_close_resp_v1_pb(Bs,
                                                                        TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({close_resp, NewFValue},
                                                     TrUserData);
                                              {close_resp, MVPrev} ->
                                                  id({close_resp,
                                                      merge_msg_gateway_sc_close_resp_v1_pb(MVPrev,
                                                                                            NewFValue,
                                                                                            TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({close_resp, NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_follow_streamed_resp(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_follow_streamed_resp(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    TrUserData);
d_field_gateway_resp_v1_pb_follow_streamed_resp(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, Prev, F@_4,
                                                F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_sc_follow_streamed_resp_v1_pb(Bs,
                                                                                  TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({follow_streamed_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {follow_streamed_resp, MVPrev} ->
                                                  id({follow_streamed_resp,
                                                      merge_msg_gateway_sc_follow_streamed_resp_v1_pb(MVPrev,
                                                                                                      NewFValue,
                                                                                                      TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({follow_streamed_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_routing_streamed_resp(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_routing_streamed_resp(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
d_field_gateway_resp_v1_pb_routing_streamed_resp(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, Prev, F@_4,
                                                 F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_routing_streamed_resp_v1_pb(Bs,
                                                                                TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({routing_streamed_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {routing_streamed_resp, MVPrev} ->
                                                  id({routing_streamed_resp,
                                                      merge_msg_gateway_routing_streamed_resp_v1_pb(MVPrev,
                                                                                                    NewFValue,
                                                                                                    TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({routing_streamed_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_config_resp(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_config_resp(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
d_field_gateway_resp_v1_pb_config_resp(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_config_resp_v1_pb(Bs,
                                                                      TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({config_resp, NewFValue},
                                                     TrUserData);
                                              {config_resp, MVPrev} ->
                                                  id({config_resp,
                                                      merge_msg_gateway_config_resp_v1_pb(MVPrev,
                                                                                          NewFValue,
                                                                                          TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({config_resp, NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_config_update_streamed_resp(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_config_update_streamed_resp(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
d_field_gateway_resp_v1_pb_config_update_streamed_resp(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, Prev,
                                                       F@_4, F@_5,
                                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_config_update_streamed_resp_v1_pb(Bs,
                                                                                      TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({config_update_streamed_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {config_update_streamed_resp,
                                               MVPrev} ->
                                                  id({config_update_streamed_resp,
                                                      merge_msg_gateway_config_update_streamed_resp_v1_pb(MVPrev,
                                                                                                          NewFValue,
                                                                                                          TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({config_update_streamed_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_validators_resp(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_validators_resp(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               TrUserData);
d_field_gateway_resp_v1_pb_validators_resp(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_validators_resp_v1_pb(Bs,
                                                                          TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({validators_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {validators_resp, MVPrev} ->
                                                  id({validators_resp,
                                                      merge_msg_gateway_validators_resp_v1_pb(MVPrev,
                                                                                              NewFValue,
                                                                                              TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({validators_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_success_resp(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_success_resp(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
d_field_gateway_resp_v1_pb_success_resp(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_success_resp_pb(Bs,
                                                                    TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({success_resp, NewFValue},
                                                     TrUserData);
                                              {success_resp, MVPrev} ->
                                                  id({success_resp,
                                                      merge_msg_gateway_success_resp_pb(MVPrev,
                                                                                        NewFValue,
                                                                                        TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({success_resp, NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_error_resp(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_error_resp(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
d_field_gateway_resp_v1_pb_error_resp(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_error_resp_pb(Bs,
                                                                  TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({error_resp, NewFValue},
                                                     TrUserData);
                                              {error_resp, MVPrev} ->
                                                  id({error_resp,
                                                      merge_msg_gateway_error_resp_pb(MVPrev,
                                                                                      NewFValue,
                                                                                      TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({error_resp, NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_poc_challenge_resp(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_poc_challenge_resp(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
d_field_gateway_resp_v1_pb_poc_challenge_resp(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, Prev, F@_4,
                                              F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_poc_challenge_notification_resp_v1_pb(Bs,
                                                                                          TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({poc_challenge_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {poc_challenge_resp, MVPrev} ->
                                                  id({poc_challenge_resp,
                                                      merge_msg_gateway_poc_challenge_notification_resp_v1_pb(MVPrev,
                                                                                                              NewFValue,
                                                                                                              TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({poc_challenge_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_poc_check_target_resp(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_poc_check_target_resp(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
d_field_gateway_resp_v1_pb_poc_check_target_resp(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, Prev, F@_4,
                                                 F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_poc_check_challenge_target_resp_v1_pb(Bs,
                                                                                          TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({poc_check_target_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {poc_check_target_resp, MVPrev} ->
                                                  id({poc_check_target_resp,
                                                      merge_msg_gateway_poc_check_challenge_target_resp_v1_pb(MVPrev,
                                                                                                              NewFValue,
                                                                                                              TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({poc_check_target_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_public_route(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_public_route(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            TrUserData);
d_field_gateway_resp_v1_pb_public_route(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_public_routing_data_resp_v1_pb(Bs,
                                                                                   TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({public_route, NewFValue},
                                                     TrUserData);
                                              {public_route, MVPrev} ->
                                                  id({public_route,
                                                      merge_msg_gateway_public_routing_data_resp_v1_pb(MVPrev,
                                                                                                       NewFValue,
                                                                                                       TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({public_route, NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_poc_region_params_resp(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_poc_region_params_resp(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
d_field_gateway_resp_v1_pb_poc_region_params_resp(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, Prev,
                                                  F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_gateway_poc_region_params_resp_v1_pb(Bs,
                                                                                 TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          case Prev of
                                              undefined ->
                                                  id({poc_region_params_resp,
                                                      NewFValue},
                                                     TrUserData);
                                              {poc_region_params_resp,
                                               MVPrev} ->
                                                  id({poc_region_params_resp,
                                                      merge_msg_gateway_poc_region_params_resp_v1_pb(MVPrev,
                                                                                                     NewFValue,
                                                                                                     TrUserData)},
                                                     TrUserData);
                                              _ ->
                                                  id({poc_region_params_resp,
                                                      NewFValue},
                                                     TrUserData)
                                          end,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_block_time(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_block_time(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
d_field_gateway_resp_v1_pb_block_time(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                      TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          NewFValue,
                                          F@_5,
                                          TrUserData).

d_field_gateway_resp_v1_pb_block_age(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                     TrUserData)
    when N < 57 ->
    d_field_gateway_resp_v1_pb_block_age(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
d_field_gateway_resp_v1_pb_block_age(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_resp_v1_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          NewFValue,
                                          TrUserData).

skip_varint_gateway_resp_v1_pb(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                               TrUserData) ->
    skip_varint_gateway_resp_v1_pb(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
skip_varint_gateway_resp_v1_pb(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                               TrUserData) ->
    dfp_read_field_def_gateway_resp_v1_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

skip_length_delimited_gateway_resp_v1_pb(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_resp_v1_pb(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             TrUserData);
skip_length_delimited_gateway_resp_v1_pb(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_resp_v1_pb(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

skip_group_gateway_resp_v1_pb(Bin, FNum, Z2, F@_1, F@_2,
                              F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_resp_v1_pb(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

skip_32_gateway_resp_v1_pb(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_gateway_resp_v1_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

skip_64_gateway_resp_v1_pb(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_gateway_resp_v1_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData).

decode_msg_gateway_sc_is_active_req_v1_pb(Bin,
                                          TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Bin,
                                                      0,
                                                      0,
                                                      id(<<>>, TrUserData),
                                                      id(<<>>, TrUserData),
                                                      TrUserData).

dfp_read_field_def_gateway_sc_is_active_req_v1_pb(<<10,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2,
                                                  TrUserData) ->
    d_field_gateway_sc_is_active_req_v1_pb_sc_id(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_gateway_sc_is_active_req_v1_pb(<<18,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2,
                                                  TrUserData) ->
    d_field_gateway_sc_is_active_req_v1_pb_sc_owner(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
dfp_read_field_def_gateway_sc_is_active_req_v1_pb(<<>>,
                                                  0, 0, F@_1, F@_2, _) ->
    #gateway_sc_is_active_req_v1_pb{sc_id = F@_1,
                                    sc_owner = F@_2};
dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Other,
                                                  Z1, Z2, F@_1, F@_2,
                                                  TrUserData) ->
    dg_read_field_def_gateway_sc_is_active_req_v1_pb(Other,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData).

dg_read_field_def_gateway_sc_is_active_req_v1_pb(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_is_active_req_v1_pb(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
dg_read_field_def_gateway_sc_is_active_req_v1_pb(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2,
                                                 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_is_active_req_v1_pb_sc_id(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        18 ->
            d_field_gateway_sc_is_active_req_v1_pb_sc_owner(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_is_active_req_v1_pb(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
                1 ->
                    skip_64_gateway_sc_is_active_req_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_is_active_req_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         TrUserData);
                3 ->
                    skip_group_gateway_sc_is_active_req_v1_pb(Rest,
                                                              Key bsr 3,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
                5 ->
                    skip_32_gateway_sc_is_active_req_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_is_active_req_v1_pb(<<>>,
                                                 0, 0, F@_1, F@_2, _) ->
    #gateway_sc_is_active_req_v1_pb{sc_id = F@_1,
                                    sc_owner = F@_2}.

d_field_gateway_sc_is_active_req_v1_pb_sc_id(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_req_v1_pb_sc_id(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_gateway_sc_is_active_req_v1_pb_sc_id(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      NewFValue,
                                                      F@_2,
                                                      TrUserData).

d_field_gateway_sc_is_active_req_v1_pb_sc_owner(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_req_v1_pb_sc_owner(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
d_field_gateway_sc_is_active_req_v1_pb_sc_owner(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      NewFValue,
                                                      TrUserData).

skip_varint_gateway_sc_is_active_req_v1_pb(<<1:1, _:7,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_sc_is_active_req_v1_pb(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
skip_varint_gateway_sc_is_active_req_v1_pb(<<0:1, _:7,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData).

skip_length_delimited_gateway_sc_is_active_req_v1_pb(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2,
                                                     TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_is_active_req_v1_pb(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
skip_length_delimited_gateway_sc_is_active_req_v1_pb(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2,
                                                     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Rest2,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData).

skip_group_gateway_sc_is_active_req_v1_pb(Bin, FNum, Z2,
                                          F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Rest,
                                                      0,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData).

skip_32_gateway_sc_is_active_req_v1_pb(<<_:32,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData).

skip_64_gateway_sc_is_active_req_v1_pb(<<_:64,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_req_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData).

decode_msg_gateway_sc_is_active_resp_v1_pb(Bin,
                                           TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Bin,
                                                       0,
                                                       0,
                                                       id(<<>>, TrUserData),
                                                       id(<<>>, TrUserData),
                                                       id(false, TrUserData),
                                                       id(0, TrUserData),
                                                       id(0, TrUserData),
                                                       TrUserData).

dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(<<10,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_id(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(<<18,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_owner(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(<<24,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    d_field_gateway_sc_is_active_resp_v1_pb_active(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(<<32,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_expiry_at_block(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(<<40,
                                                     Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_original_dc_amount(Rest,
                                                                  Z1,
                                                                  Z2,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  TrUserData);
dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(<<>>,
                                                   0, 0, F@_1, F@_2, F@_3, F@_4,
                                                   F@_5, _) ->
    #gateway_sc_is_active_resp_v1_pb{sc_id = F@_1,
                                     sc_owner = F@_2, active = F@_3,
                                     sc_expiry_at_block = F@_4,
                                     sc_original_dc_amount = F@_5};
dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Other,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    dg_read_field_def_gateway_sc_is_active_resp_v1_pb(Other,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData).

dg_read_field_def_gateway_sc_is_active_resp_v1_pb(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_is_active_resp_v1_pb(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
dg_read_field_def_gateway_sc_is_active_resp_v1_pb(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_is_active_resp_v1_pb_sc_id(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          TrUserData);
        18 ->
            d_field_gateway_sc_is_active_resp_v1_pb_sc_owner(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData);
        24 ->
            d_field_gateway_sc_is_active_resp_v1_pb_active(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
        32 ->
            d_field_gateway_sc_is_active_resp_v1_pb_sc_expiry_at_block(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       TrUserData);
        40 ->
            d_field_gateway_sc_is_active_resp_v1_pb_sc_original_dc_amount(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          F@_4,
                                                                          F@_5,
                                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_is_active_resp_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData);
                1 ->
                    skip_64_gateway_sc_is_active_resp_v1_pb(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_is_active_resp_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          F@_4,
                                                                          F@_5,
                                                                          TrUserData);
                3 ->
                    skip_group_gateway_sc_is_active_resp_v1_pb(Rest,
                                                               Key bsr 3,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
                5 ->
                    skip_32_gateway_sc_is_active_resp_v1_pb(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_is_active_resp_v1_pb(<<>>,
                                                  0, 0, F@_1, F@_2, F@_3, F@_4,
                                                  F@_5, _) ->
    #gateway_sc_is_active_resp_v1_pb{sc_id = F@_1,
                                     sc_owner = F@_2, active = F@_3,
                                     sc_expiry_at_block = F@_4,
                                     sc_original_dc_amount = F@_5}.

d_field_gateway_sc_is_active_resp_v1_pb_sc_id(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_id(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  TrUserData);
d_field_gateway_sc_is_active_resp_v1_pb_sc_id(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(RestF,
                                                       0,
                                                       0,
                                                       NewFValue,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

d_field_gateway_sc_is_active_resp_v1_pb_sc_owner(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_owner(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
d_field_gateway_sc_is_active_resp_v1_pb_sc_owner(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, _, F@_3, F@_4,
                                                 F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(RestF,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       NewFValue,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

d_field_gateway_sc_is_active_resp_v1_pb_active(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_resp_v1_pb_active(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   TrUserData);
d_field_gateway_sc_is_active_resp_v1_pb_active(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, _, F@_4,
                                               F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(RestF,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       NewFValue,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

d_field_gateway_sc_is_active_resp_v1_pb_sc_expiry_at_block(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_expiry_at_block(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
d_field_gateway_sc_is_active_resp_v1_pb_sc_expiry_at_block(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, _, F@_5,
                                                           TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(RestF,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       NewFValue,
                                                       F@_5,
                                                       TrUserData).

d_field_gateway_sc_is_active_resp_v1_pb_sc_original_dc_amount(<<1:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, F@_3, F@_4,
                                                              F@_5, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_active_resp_v1_pb_sc_original_dc_amount(Rest,
                                                                  N + 7,
                                                                  X bsl N + Acc,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  TrUserData);
d_field_gateway_sc_is_active_resp_v1_pb_sc_original_dc_amount(<<0:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, F@_3, F@_4,
                                                              _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(RestF,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       NewFValue,
                                                       TrUserData).

skip_varint_gateway_sc_is_active_resp_v1_pb(<<1:1, _:7,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData) ->
    skip_varint_gateway_sc_is_active_resp_v1_pb(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                TrUserData);
skip_varint_gateway_sc_is_active_resp_v1_pb(<<0:1, _:7,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

skip_length_delimited_gateway_sc_is_active_resp_v1_pb(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_is_active_resp_v1_pb(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          TrUserData);
skip_length_delimited_gateway_sc_is_active_resp_v1_pb(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Rest2,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

skip_group_gateway_sc_is_active_resp_v1_pb(Bin, FNum,
                                           Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Rest,
                                                       0,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

skip_32_gateway_sc_is_active_resp_v1_pb(<<_:32,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

skip_64_gateway_sc_is_active_resp_v1_pb(<<_:64,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        TrUserData) ->
    dfp_read_field_def_gateway_sc_is_active_resp_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData).

decode_msg_gateway_sc_is_overpaid_req_v1_pb(Bin,
                                            TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Bin,
                                                        0,
                                                        0,
                                                        id(<<>>, TrUserData),
                                                        id(<<>>, TrUserData),
                                                        id(0, TrUserData),
                                                        TrUserData).

dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<10,
                                                      Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2, F@_3,
                                                    TrUserData) ->
    d_field_gateway_sc_is_overpaid_req_v1_pb_sc_id(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<18,
                                                      Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2, F@_3,
                                                    TrUserData) ->
    d_field_gateway_sc_is_overpaid_req_v1_pb_sc_owner(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<24,
                                                      Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2, F@_3,
                                                    TrUserData) ->
    d_field_gateway_sc_is_overpaid_req_v1_pb_total_dcs(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<>>,
                                                    0, 0, F@_1, F@_2, F@_3,
                                                    _) ->
    #gateway_sc_is_overpaid_req_v1_pb{sc_id = F@_1,
                                      sc_owner = F@_2, total_dcs = F@_3};
dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Other,
                                                    Z1, Z2, F@_1, F@_2, F@_3,
                                                    TrUserData) ->
    dg_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Other,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData).

dg_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
dg_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_is_overpaid_req_v1_pb_sc_id(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
        18 ->
            d_field_gateway_sc_is_overpaid_req_v1_pb_sc_owner(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
        24 ->
            d_field_gateway_sc_is_overpaid_req_v1_pb_total_dcs(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
                1 ->
                    skip_64_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                                           0,
                                                                           0,
                                                                           F@_1,
                                                                           F@_2,
                                                                           F@_3,
                                                                           TrUserData);
                3 ->
                    skip_group_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                                Key bsr 3,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
                5 ->
                    skip_32_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_is_overpaid_req_v1_pb(<<>>,
                                                   0, 0, F@_1, F@_2, F@_3, _) ->
    #gateway_sc_is_overpaid_req_v1_pb{sc_id = F@_1,
                                      sc_owner = F@_2, total_dcs = F@_3}.

d_field_gateway_sc_is_overpaid_req_v1_pb_sc_id(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3,
                                               TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_overpaid_req_v1_pb_sc_id(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   TrUserData);
d_field_gateway_sc_is_overpaid_req_v1_pb_sc_id(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, _, F@_2, F@_3,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(RestF,
                                                        0,
                                                        0,
                                                        NewFValue,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

d_field_gateway_sc_is_overpaid_req_v1_pb_sc_owner(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_overpaid_req_v1_pb_sc_owner(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
d_field_gateway_sc_is_overpaid_req_v1_pb_sc_owner(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, _, F@_3,
                                                  TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(RestF,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        NewFValue,
                                                        F@_3,
                                                        TrUserData).

d_field_gateway_sc_is_overpaid_req_v1_pb_total_dcs(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_overpaid_req_v1_pb_total_dcs(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
d_field_gateway_sc_is_overpaid_req_v1_pb_total_dcs(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, _,
                                                   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(RestF,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        NewFValue,
                                                        TrUserData).

skip_varint_gateway_sc_is_overpaid_req_v1_pb(<<1:1, _:7,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    skip_varint_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
skip_varint_gateway_sc_is_overpaid_req_v1_pb(<<0:1, _:7,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

skip_length_delimited_gateway_sc_is_overpaid_req_v1_pb(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
skip_length_delimited_gateway_sc_is_overpaid_req_v1_pb(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Rest2,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

skip_group_gateway_sc_is_overpaid_req_v1_pb(Bin, FNum,
                                            Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                        0,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

skip_32_gateway_sc_is_overpaid_req_v1_pb(<<_:32,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3,
                                         TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

skip_64_gateway_sc_is_overpaid_req_v1_pb(<<_:64,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3,
                                         TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_req_v1_pb(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

decode_msg_gateway_sc_is_overpaid_resp_v1_pb(Bin,
                                             TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Bin,
                                                         0,
                                                         0,
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id(false, TrUserData),
                                                         TrUserData).

dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<10,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_id(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<18,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_owner(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<24,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    d_field_gateway_sc_is_overpaid_resp_v1_pb_overpaid(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<>>,
                                                     0, 0, F@_1, F@_2, F@_3,
                                                     _) ->
    #gateway_sc_is_overpaid_resp_v1_pb{sc_id = F@_1,
                                       sc_owner = F@_2, overpaid = F@_3};
dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Other,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    dg_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Other,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

dg_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dg_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_id(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData);
        18 ->
            d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_owner(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
        24 ->
            d_field_gateway_sc_is_overpaid_resp_v1_pb_overpaid(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  TrUserData);
                1 ->
                    skip_64_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData);
                3 ->
                    skip_group_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                                 Key bsr 3,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
                5 ->
                    skip_32_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(<<>>,
                                                    0, 0, F@_1, F@_2, F@_3,
                                                    _) ->
    #gateway_sc_is_overpaid_resp_v1_pb{sc_id = F@_1,
                                       sc_owner = F@_2, overpaid = F@_3}.

d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_id(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3,
                                                TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_id(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_id(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, _, F@_2, F@_3,
                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         NewFValue,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_owner(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_owner(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
d_field_gateway_sc_is_overpaid_resp_v1_pb_sc_owner(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, _, F@_3,
                                                   TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         NewFValue,
                                                         F@_3,
                                                         TrUserData).

d_field_gateway_sc_is_overpaid_resp_v1_pb_overpaid(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   TrUserData)
    when N < 57 ->
    d_field_gateway_sc_is_overpaid_resp_v1_pb_overpaid(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
d_field_gateway_sc_is_overpaid_resp_v1_pb_overpaid(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, _,
                                                   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         NewFValue,
                                                         TrUserData).

skip_varint_gateway_sc_is_overpaid_resp_v1_pb(<<1:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    skip_varint_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
skip_varint_gateway_sc_is_overpaid_resp_v1_pb(<<0:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_length_delimited_gateway_sc_is_overpaid_resp_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData);
skip_length_delimited_gateway_sc_is_overpaid_resp_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Rest2,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_group_gateway_sc_is_overpaid_resp_v1_pb(Bin, FNum,
                                             Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                         0,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_32_gateway_sc_is_overpaid_resp_v1_pb(<<_:32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_64_gateway_sc_is_overpaid_resp_v1_pb(<<_:64,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    dfp_read_field_def_gateway_sc_is_overpaid_resp_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

decode_msg_gateway_sc_close_req_v1_pb(Bin,
                                      TrUserData) ->
    dfp_read_field_def_gateway_sc_close_req_v1_pb(Bin,
                                                  0,
                                                  0,
                                                  id(undefined, TrUserData),
                                                  TrUserData).

dfp_read_field_def_gateway_sc_close_req_v1_pb(<<10,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    d_field_gateway_sc_close_req_v1_pb_close_txn(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData);
dfp_read_field_def_gateway_sc_close_req_v1_pb(<<>>, 0,
                                              0, F@_1, _) ->
    #gateway_sc_close_req_v1_pb{close_txn = F@_1};
dfp_read_field_def_gateway_sc_close_req_v1_pb(Other, Z1,
                                              Z2, F@_1, TrUserData) ->
    dg_read_field_def_gateway_sc_close_req_v1_pb(Other,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

dg_read_field_def_gateway_sc_close_req_v1_pb(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_close_req_v1_pb(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
dg_read_field_def_gateway_sc_close_req_v1_pb(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_close_req_v1_pb_close_txn(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_close_req_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                1 ->
                    skip_64_gateway_sc_close_req_v1_pb(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_close_req_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     TrUserData);
                3 ->
                    skip_group_gateway_sc_close_req_v1_pb(Rest,
                                                          Key bsr 3,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                5 ->
                    skip_32_gateway_sc_close_req_v1_pb(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_close_req_v1_pb(<<>>, 0, 0,
                                             F@_1, _) ->
    #gateway_sc_close_req_v1_pb{close_txn = F@_1}.

d_field_gateway_sc_close_req_v1_pb_close_txn(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_close_req_v1_pb_close_txn(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
d_field_gateway_sc_close_req_v1_pb_close_txn(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_txn_state_channel_close_v1_pb(Bs,
                                                                                     TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_sc_close_req_v1_pb(RestF,
                                                  0,
                                                  0,
                                                  if Prev == undefined ->
                                                         NewFValue;
                                                     true ->
                                                         merge_msg_blockchain_txn_state_channel_close_v1_pb(Prev,
                                                                                                            NewFValue,
                                                                                                            TrUserData)
                                                  end,
                                                  TrUserData).

skip_varint_gateway_sc_close_req_v1_pb(<<1:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_sc_close_req_v1_pb(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
skip_varint_gateway_sc_close_req_v1_pb(<<0:1, _:7,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_sc_close_req_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_length_delimited_gateway_sc_close_req_v1_pb(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_close_req_v1_pb(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
skip_length_delimited_gateway_sc_close_req_v1_pb(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_close_req_v1_pb(Rest2,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  TrUserData).

skip_group_gateway_sc_close_req_v1_pb(Bin, FNum, Z2,
                                      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_close_req_v1_pb(Rest,
                                                  0,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_32_gateway_sc_close_req_v1_pb(<<_:32,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_sc_close_req_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

skip_64_gateway_sc_close_req_v1_pb(<<_:64,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_sc_close_req_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData).

decode_msg_gateway_sc_close_resp_v1_pb(Bin,
                                       TrUserData) ->
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   id(<<>>, TrUserData),
                                                   TrUserData).

dfp_read_field_def_gateway_sc_close_resp_v1_pb(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_gateway_sc_close_resp_v1_pb_sc_id(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dfp_read_field_def_gateway_sc_close_resp_v1_pb(<<18,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_gateway_sc_close_resp_v1_pb_response(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_gateway_sc_close_resp_v1_pb(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    #gateway_sc_close_resp_v1_pb{sc_id = F@_1,
                                 response = F@_2};
dfp_read_field_def_gateway_sc_close_resp_v1_pb(Other,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dg_read_field_def_gateway_sc_close_resp_v1_pb(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

dg_read_field_def_gateway_sc_close_resp_v1_pb(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_close_resp_v1_pb(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dg_read_field_def_gateway_sc_close_resp_v1_pb(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_close_resp_v1_pb_sc_id(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
        18 ->
            d_field_gateway_sc_close_resp_v1_pb_response(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_close_resp_v1_pb(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                1 ->
                    skip_64_gateway_sc_close_resp_v1_pb(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_close_resp_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
                3 ->
                    skip_group_gateway_sc_close_resp_v1_pb(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                5 ->
                    skip_32_gateway_sc_close_resp_v1_pb(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_close_resp_v1_pb(<<>>, 0,
                                              0, F@_1, F@_2, _) ->
    #gateway_sc_close_resp_v1_pb{sc_id = F@_1,
                                 response = F@_2}.

d_field_gateway_sc_close_resp_v1_pb_sc_id(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_close_resp_v1_pb_sc_id(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
d_field_gateway_sc_close_resp_v1_pb_sc_id(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   F@_2,
                                                   TrUserData).

d_field_gateway_sc_close_resp_v1_pb_response(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_close_resp_v1_pb_response(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_gateway_sc_close_resp_v1_pb_response(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_gateway_sc_close_resp_v1_pb(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_sc_close_resp_v1_pb(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
skip_varint_gateway_sc_close_resp_v1_pb(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_length_delimited_gateway_sc_close_resp_v1_pb(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_close_resp_v1_pb(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
skip_length_delimited_gateway_sc_close_resp_v1_pb(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_group_gateway_sc_close_resp_v1_pb(Bin, FNum, Z2,
                                       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_32_gateway_sc_close_resp_v1_pb(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_64_gateway_sc_close_resp_v1_pb(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_close_resp_v1_pb(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

decode_msg_gateway_sc_follow_req_v1_pb(Bin,
                                       TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(Bin,
                                                   0,
                                                   0,
                                                   id(<<>>, TrUserData),
                                                   id(<<>>, TrUserData),
                                                   TrUserData).

dfp_read_field_def_gateway_sc_follow_req_v1_pb(<<10,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_gateway_sc_follow_req_v1_pb_sc_id(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
dfp_read_field_def_gateway_sc_follow_req_v1_pb(<<18,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    d_field_gateway_sc_follow_req_v1_pb_sc_owner(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_gateway_sc_follow_req_v1_pb(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    #gateway_sc_follow_req_v1_pb{sc_id = F@_1,
                                 sc_owner = F@_2};
dfp_read_field_def_gateway_sc_follow_req_v1_pb(Other,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dg_read_field_def_gateway_sc_follow_req_v1_pb(Other,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData).

dg_read_field_def_gateway_sc_follow_req_v1_pb(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_follow_req_v1_pb(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
dg_read_field_def_gateway_sc_follow_req_v1_pb(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_follow_req_v1_pb_sc_id(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
        18 ->
            d_field_gateway_sc_follow_req_v1_pb_sc_owner(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_follow_req_v1_pb(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                1 ->
                    skip_64_gateway_sc_follow_req_v1_pb(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_follow_req_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
                3 ->
                    skip_group_gateway_sc_follow_req_v1_pb(Rest,
                                                           Key bsr 3,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
                5 ->
                    skip_32_gateway_sc_follow_req_v1_pb(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_follow_req_v1_pb(<<>>, 0,
                                              0, F@_1, F@_2, _) ->
    #gateway_sc_follow_req_v1_pb{sc_id = F@_1,
                                 sc_owner = F@_2}.

d_field_gateway_sc_follow_req_v1_pb_sc_id(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_follow_req_v1_pb_sc_id(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
d_field_gateway_sc_follow_req_v1_pb_sc_id(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(RestF,
                                                   0,
                                                   0,
                                                   NewFValue,
                                                   F@_2,
                                                   TrUserData).

d_field_gateway_sc_follow_req_v1_pb_sc_owner(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_follow_req_v1_pb_sc_owner(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_gateway_sc_follow_req_v1_pb_sc_owner(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(RestF,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   NewFValue,
                                                   TrUserData).

skip_varint_gateway_sc_follow_req_v1_pb(<<1:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_sc_follow_req_v1_pb(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
skip_varint_gateway_sc_follow_req_v1_pb(<<0:1, _:7,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_length_delimited_gateway_sc_follow_req_v1_pb(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_follow_req_v1_pb(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
skip_length_delimited_gateway_sc_follow_req_v1_pb(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2,
                                                  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(Rest2,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_group_gateway_sc_follow_req_v1_pb(Bin, FNum, Z2,
                                       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(Rest,
                                                   0,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_32_gateway_sc_follow_req_v1_pb(<<_:32,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

skip_64_gateway_sc_follow_req_v1_pb(<<_:64,
                                      Rest/binary>>,
                                    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_req_v1_pb(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

decode_msg_gateway_sc_follow_streamed_resp_v1_pb(Bin,
                                                 TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Bin,
                                                             0,
                                                             0,
                                                             id(<<>>,
                                                                TrUserData),
                                                             id(<<>>,
                                                                TrUserData),
                                                             id(close_state_closable,
                                                                TrUserData),
                                                             TrUserData).

dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<10,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, TrUserData) ->
    d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_id(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<18,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, TrUserData) ->
    d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_owner(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<24,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, TrUserData) ->
    d_field_gateway_sc_follow_streamed_resp_v1_pb_close_state(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<>>,
                                                         0, 0, F@_1, F@_2, F@_3,
                                                         _) ->
    #gateway_sc_follow_streamed_resp_v1_pb{sc_id = F@_1,
                                           sc_owner = F@_2, close_state = F@_3};
dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Other,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, TrUserData) ->
    dg_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Other,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

dg_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData);
dg_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_id(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
        18 ->
            d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_owner(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
        24 ->
            d_field_gateway_sc_follow_streamed_resp_v1_pb_close_state(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData);
                1 ->
                    skip_64_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  TrUserData);
                2 ->
                    skip_length_delimited_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                                                0,
                                                                                0,
                                                                                F@_1,
                                                                                F@_2,
                                                                                F@_3,
                                                                                TrUserData);
                3 ->
                    skip_group_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                                     Key bsr 3,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
                5 ->
                    skip_32_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  TrUserData)
            end
    end;
dg_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(<<>>,
                                                        0, 0, F@_1, F@_2, F@_3,
                                                        _) ->
    #gateway_sc_follow_streamed_resp_v1_pb{sc_id = F@_1,
                                           sc_owner = F@_2, close_state = F@_3}.

d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_id(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_id(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_id(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, _, F@_2, F@_3,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             NewFValue,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_owner(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData)
    when N < 57 ->
    d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_owner(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
d_field_gateway_sc_follow_streamed_resp_v1_pb_sc_owner(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, _, F@_3,
                                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             NewFValue,
                                                             F@_3,
                                                             TrUserData).

d_field_gateway_sc_follow_streamed_resp_v1_pb_close_state(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          F@_3, TrUserData)
    when N < 57 ->
    d_field_gateway_sc_follow_streamed_resp_v1_pb_close_state(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
d_field_gateway_sc_follow_streamed_resp_v1_pb_close_state(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2, _,
                                                          TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_helium.close_state'(begin
                                            <<Res:32/signed-native>> = <<(X bsl
                                                                              N
                                                                              +
                                                                              Acc):32/unsigned-native>>,
                                            id(Res, TrUserData)
                                        end),
            TrUserData),
         Rest},
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             NewFValue,
                                                             TrUserData).

skip_varint_gateway_sc_follow_streamed_resp_v1_pb(<<1:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  TrUserData) ->
    skip_varint_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
skip_varint_gateway_sc_follow_streamed_resp_v1_pb(<<0:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

skip_length_delimited_gateway_sc_follow_streamed_resp_v1_pb(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
skip_length_delimited_gateway_sc_follow_streamed_resp_v1_pb(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Rest2,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

skip_group_gateway_sc_follow_streamed_resp_v1_pb(Bin,
                                                 FNum, Z2, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                             0,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

skip_32_gateway_sc_follow_streamed_resp_v1_pb(<<_:32,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

skip_64_gateway_sc_follow_streamed_resp_v1_pb(<<_:64,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    dfp_read_field_def_gateway_sc_follow_streamed_resp_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

decode_msg_routing_pb(Bin, TrUserData) ->
    dfp_read_field_def_routing_pb(Bin,
                                  0,
                                  0,
                                  id(0, TrUserData),
                                  id(<<>>, TrUserData),
                                  id([], TrUserData),
                                  id([], TrUserData),
                                  id([], TrUserData),
                                  TrUserData).

dfp_read_field_def_routing_pb(<<8, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_routing_pb_oui(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData);
dfp_read_field_def_routing_pb(<<18, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_routing_pb_owner(Rest,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             TrUserData);
dfp_read_field_def_routing_pb(<<26, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_routing_pb_addresses(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
dfp_read_field_def_routing_pb(<<34, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_routing_pb_filters(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
dfp_read_field_def_routing_pb(<<42, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_routing_pb_subnets(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
dfp_read_field_def_routing_pb(<<>>, 0, 0, F@_1, F@_2,
                              R1, R2, R3, TrUserData) ->
    #routing_pb{oui = F@_1, owner = F@_2,
                addresses = lists_reverse(R1, TrUserData),
                filters = lists_reverse(R2, TrUserData),
                subnets = lists_reverse(R3, TrUserData)};
dfp_read_field_def_routing_pb(Other, Z1, Z2, F@_1, F@_2,
                              F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_routing_pb(Other,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData).

dg_read_field_def_routing_pb(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_routing_pb(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
dg_read_field_def_routing_pb(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                             TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_pb_oui(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   TrUserData);
        18 ->
            d_field_routing_pb_owner(Rest,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
        26 ->
            d_field_routing_pb_addresses(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         TrUserData);
        34 ->
            d_field_routing_pb_filters(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
        42 ->
            d_field_routing_pb_subnets(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_pb(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           TrUserData);
                1 ->
                    skip_64_routing_pb(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData);
                2 ->
                    skip_length_delimited_routing_pb(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     TrUserData);
                3 ->
                    skip_group_routing_pb(Rest,
                                          Key bsr 3,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          TrUserData);
                5 ->
                    skip_32_routing_pb(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       TrUserData)
            end
    end;
dg_read_field_def_routing_pb(<<>>, 0, 0, F@_1, F@_2, R1,
                             R2, R3, TrUserData) ->
    #routing_pb{oui = F@_1, owner = F@_2,
                addresses = lists_reverse(R1, TrUserData),
                filters = lists_reverse(R2, TrUserData),
                subnets = lists_reverse(R3, TrUserData)}.

d_field_routing_pb_oui(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_routing_pb_oui(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData);
d_field_routing_pb_oui(<<0:1, X:7, Rest/binary>>, N,
                       Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_routing_pb(RestF,
                                  0,
                                  0,
                                  NewFValue,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

d_field_routing_pb_owner(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_routing_pb_owner(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             F@_3,
                             F@_4,
                             F@_5,
                             TrUserData);
d_field_routing_pb_owner(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_routing_pb(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  NewFValue,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

d_field_routing_pb_addresses(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_routing_pb_addresses(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 TrUserData);
d_field_routing_pb_addresses(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_address_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_routing_pb(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  cons(NewFValue, Prev, TrUserData),
                                  F@_4,
                                  F@_5,
                                  TrUserData).

d_field_routing_pb_filters(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_routing_pb_filters(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
d_field_routing_pb_filters(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_routing_pb(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  cons(NewFValue, Prev, TrUserData),
                                  F@_5,
                                  TrUserData).

d_field_routing_pb_subnets(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_routing_pb_subnets(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData);
d_field_routing_pb_subnets(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_routing_pb(RestF,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  cons(NewFValue, Prev, TrUserData),
                                  TrUserData).

skip_varint_routing_pb(<<1:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_routing_pb(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           TrUserData);
skip_varint_routing_pb(<<0:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_routing_pb(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

skip_length_delimited_routing_pb(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData)
    when N < 57 ->
    skip_length_delimited_routing_pb(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     F@_4,
                                     F@_5,
                                     TrUserData);
skip_length_delimited_routing_pb(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_pb(Rest2,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

skip_group_routing_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_pb(Rest,
                                  0,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

skip_32_routing_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_routing_pb(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

skip_64_routing_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_routing_pb(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  TrUserData).

decode_msg_routing_address_pb(Bin, TrUserData) ->
    dfp_read_field_def_routing_address_pb(Bin,
                                          0,
                                          0,
                                          id(<<>>, TrUserData),
                                          id(<<>>, TrUserData),
                                          TrUserData).

dfp_read_field_def_routing_address_pb(<<10,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_routing_address_pb_pub_key(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
dfp_read_field_def_routing_address_pb(<<18,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_routing_address_pb_uri(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
dfp_read_field_def_routing_address_pb(<<>>, 0, 0, F@_1,
                                      F@_2, _) ->
    #routing_address_pb{pub_key = F@_1, uri = F@_2};
dfp_read_field_def_routing_address_pb(Other, Z1, Z2,
                                      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_routing_address_pb(Other,
                                         Z1,
                                         Z2,
                                         F@_1,
                                         F@_2,
                                         TrUserData).

dg_read_field_def_routing_address_pb(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_routing_address_pb(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         F@_1,
                                         F@_2,
                                         TrUserData);
dg_read_field_def_routing_address_pb(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_routing_address_pb_pub_key(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
        18 ->
            d_field_routing_address_pb_uri(Rest,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_address_pb(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                1 ->
                    skip_64_routing_address_pb(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
                2 ->
                    skip_length_delimited_routing_address_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                3 ->
                    skip_group_routing_address_pb(Rest,
                                                  Key bsr 3,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                5 ->
                    skip_32_routing_address_pb(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData)
            end
    end;
dg_read_field_def_routing_address_pb(<<>>, 0, 0, F@_1,
                                     F@_2, _) ->
    #routing_address_pb{pub_key = F@_1, uri = F@_2}.

d_field_routing_address_pb_pub_key(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_routing_address_pb_pub_key(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
d_field_routing_address_pb_pub_key(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_routing_address_pb(RestF,
                                          0,
                                          0,
                                          NewFValue,
                                          F@_2,
                                          TrUserData).

d_field_routing_address_pb_uri(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_routing_address_pb_uri(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
d_field_routing_address_pb_uri(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_routing_address_pb(RestF,
                                          0,
                                          0,
                                          F@_1,
                                          NewFValue,
                                          TrUserData).

skip_varint_routing_address_pb(<<1:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_routing_address_pb(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData);
skip_varint_routing_address_pb(<<0:1, _:7,
                                 Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_routing_address_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_length_delimited_routing_address_pb(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_routing_address_pb(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_length_delimited_routing_address_pb(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_address_pb(Rest2,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_group_routing_address_pb(Bin, FNum, Z2, F@_1, F@_2,
                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_address_pb(Rest,
                                          0,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_32_routing_address_pb(<<_:32, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_routing_address_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

skip_64_routing_address_pb(<<_:64, Rest/binary>>, Z1,
                           Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_routing_address_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

decode_msg_gateway_routing_req_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_routing_req_v1_pb(Bin,
                                                 0,
                                                 0,
                                                 id(0, TrUserData),
                                                 TrUserData).

dfp_read_field_def_gateway_routing_req_v1_pb(<<8,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, TrUserData) ->
    d_field_gateway_routing_req_v1_pb_height(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData);
dfp_read_field_def_gateway_routing_req_v1_pb(<<>>, 0, 0,
                                             F@_1, _) ->
    #gateway_routing_req_v1_pb{height = F@_1};
dfp_read_field_def_gateway_routing_req_v1_pb(Other, Z1,
                                             Z2, F@_1, TrUserData) ->
    dg_read_field_def_gateway_routing_req_v1_pb(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                TrUserData).

dg_read_field_def_gateway_routing_req_v1_pb(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_routing_req_v1_pb(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                TrUserData);
dg_read_field_def_gateway_routing_req_v1_pb(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_gateway_routing_req_v1_pb_height(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_routing_req_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                1 ->
                    skip_64_gateway_routing_req_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_gateway_routing_req_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
                3 ->
                    skip_group_gateway_routing_req_v1_pb(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         TrUserData);
                5 ->
                    skip_32_gateway_routing_req_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData)
            end
    end;
dg_read_field_def_gateway_routing_req_v1_pb(<<>>, 0, 0,
                                            F@_1, _) ->
    #gateway_routing_req_v1_pb{height = F@_1}.

d_field_gateway_routing_req_v1_pb_height(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_routing_req_v1_pb_height(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
d_field_gateway_routing_req_v1_pb_height(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_routing_req_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 NewFValue,
                                                 TrUserData).

skip_varint_gateway_routing_req_v1_pb(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_routing_req_v1_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          TrUserData);
skip_varint_gateway_routing_req_v1_pb(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_routing_req_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_length_delimited_gateway_routing_req_v1_pb(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_routing_req_v1_pb(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    TrUserData);
skip_length_delimited_gateway_routing_req_v1_pb(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_routing_req_v1_pb(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 TrUserData).

skip_group_gateway_routing_req_v1_pb(Bin, FNum, Z2,
                                     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_routing_req_v1_pb(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_32_gateway_routing_req_v1_pb(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_routing_req_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

skip_64_gateway_routing_req_v1_pb(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_routing_req_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 TrUserData).

decode_msg_gateway_routing_streamed_resp_v1_pb(Bin,
                                               TrUserData) ->
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Bin,
                                                           0,
                                                           0,
                                                           id([], TrUserData),
                                                           TrUserData).

dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(<<10,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1,
                                                       TrUserData) ->
    d_field_gateway_routing_streamed_resp_v1_pb_routings(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData);
dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(<<>>,
                                                       0, 0, R1, TrUserData) ->
    #gateway_routing_streamed_resp_v1_pb{routings =
                                             lists_reverse(R1, TrUserData)};
dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Other,
                                                       Z1, Z2, F@_1,
                                                       TrUserData) ->
    dg_read_field_def_gateway_routing_streamed_resp_v1_pb(Other,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData).

dg_read_field_def_gateway_routing_streamed_resp_v1_pb(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_routing_streamed_resp_v1_pb(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          TrUserData);
dg_read_field_def_gateway_routing_streamed_resp_v1_pb(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1,
                                                      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_routing_streamed_resp_v1_pb_routings(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_routing_streamed_resp_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
                1 ->
                    skip_64_gateway_routing_streamed_resp_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData);
                2 ->
                    skip_length_delimited_gateway_routing_streamed_resp_v1_pb(Rest,
                                                                              0,
                                                                              0,
                                                                              F@_1,
                                                                              TrUserData);
                3 ->
                    skip_group_gateway_routing_streamed_resp_v1_pb(Rest,
                                                                   Key bsr 3,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                5 ->
                    skip_32_gateway_routing_streamed_resp_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                TrUserData)
            end
    end;
dg_read_field_def_gateway_routing_streamed_resp_v1_pb(<<>>,
                                                      0, 0, R1, TrUserData) ->
    #gateway_routing_streamed_resp_v1_pb{routings =
                                             lists_reverse(R1, TrUserData)}.

d_field_gateway_routing_streamed_resp_v1_pb_routings(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_routing_streamed_resp_v1_pb_routings(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         TrUserData);
d_field_gateway_routing_streamed_resp_v1_pb_routings(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, Prev,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           cons(NewFValue,
                                                                Prev,
                                                                TrUserData),
                                                           TrUserData).

skip_varint_gateway_routing_streamed_resp_v1_pb(<<1:1,
                                                  _:7, Rest/binary>>,
                                                Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_routing_streamed_resp_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData);
skip_varint_gateway_routing_streamed_resp_v1_pb(<<0:1,
                                                  _:7, Rest/binary>>,
                                                Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           TrUserData).

skip_length_delimited_gateway_routing_streamed_resp_v1_pb(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1,
                                                          TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_routing_streamed_resp_v1_pb(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              TrUserData);
skip_length_delimited_gateway_routing_streamed_resp_v1_pb(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1,
                                                          TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Rest2,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData).

skip_group_gateway_routing_streamed_resp_v1_pb(Bin,
                                               FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Rest,
                                                           0,
                                                           Z2,
                                                           F@_1,
                                                           TrUserData).

skip_32_gateway_routing_streamed_resp_v1_pb(<<_:32,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           TrUserData).

skip_64_gateway_routing_streamed_resp_v1_pb(<<_:64,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_routing_streamed_resp_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           TrUserData).

decode_msg_gateway_poc_req_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_gateway_poc_req_v1_pb(Bin,
                                             0,
                                             0,
                                             id(<<>>, TrUserData),
                                             id(<<>>, TrUserData),
                                             TrUserData).

dfp_read_field_def_gateway_poc_req_v1_pb(<<10,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_gateway_poc_req_v1_pb_address(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dfp_read_field_def_gateway_poc_req_v1_pb(<<18,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_gateway_poc_req_v1_pb_signature(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dfp_read_field_def_gateway_poc_req_v1_pb(<<>>, 0, 0,
                                         F@_1, F@_2, _) ->
    #gateway_poc_req_v1_pb{address = F@_1,
                           signature = F@_2};
dfp_read_field_def_gateway_poc_req_v1_pb(Other, Z1, Z2,
                                         F@_1, F@_2, TrUserData) ->
    dg_read_field_def_gateway_poc_req_v1_pb(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            TrUserData).

dg_read_field_def_gateway_poc_req_v1_pb(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_req_v1_pb(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
dg_read_field_def_gateway_poc_req_v1_pb(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_req_v1_pb_address(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
        18 ->
            d_field_gateway_poc_req_v1_pb_signature(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_req_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                1 ->
                    skip_64_gateway_poc_req_v1_pb(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_req_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
                3 ->
                    skip_group_gateway_poc_req_v1_pb(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     TrUserData);
                5 ->
                    skip_32_gateway_poc_req_v1_pb(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_req_v1_pb(<<>>, 0, 0,
                                        F@_1, F@_2, _) ->
    #gateway_poc_req_v1_pb{address = F@_1,
                           signature = F@_2}.

d_field_gateway_poc_req_v1_pb_address(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_poc_req_v1_pb_address(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
d_field_gateway_poc_req_v1_pb_address(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_req_v1_pb(RestF,
                                             0,
                                             0,
                                             NewFValue,
                                             F@_2,
                                             TrUserData).

d_field_gateway_poc_req_v1_pb_signature(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_poc_req_v1_pb_signature(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
d_field_gateway_poc_req_v1_pb_signature(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_req_v1_pb(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             NewFValue,
                                             TrUserData).

skip_varint_gateway_poc_req_v1_pb(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_poc_req_v1_pb(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
skip_varint_gateway_poc_req_v1_pb(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_req_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_length_delimited_gateway_poc_req_v1_pb(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_req_v1_pb(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
skip_length_delimited_gateway_poc_req_v1_pb(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_req_v1_pb(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_group_gateway_poc_req_v1_pb(Bin, FNum, Z2, F@_1,
                                 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_req_v1_pb(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_32_gateway_poc_req_v1_pb(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_req_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

skip_64_gateway_poc_req_v1_pb(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_req_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData).

decode_msg_gateway_poc_challenge_notification_resp_v1_pb(Bin,
                                                         TrUserData) ->
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Bin,
                                                                     0,
                                                                     0,
                                                                     id(undefined,
                                                                        TrUserData),
                                                                     id(<<>>,
                                                                        TrUserData),
                                                                     id(<<>>,
                                                                        TrUserData),
                                                                     TrUserData).

dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<10,
                                                                   Rest/binary>>,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2, F@_3,
                                                                 TrUserData) ->
    d_field_gateway_poc_challenge_notification_resp_v1_pb_challenger(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<18,
                                                                   Rest/binary>>,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2, F@_3,
                                                                 TrUserData) ->
    d_field_gateway_poc_challenge_notification_resp_v1_pb_block_hash(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<26,
                                                                   Rest/binary>>,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2, F@_3,
                                                                 TrUserData) ->
    d_field_gateway_poc_challenge_notification_resp_v1_pb_onion_key_hash(Rest,
                                                                         Z1,
                                                                         Z2,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData);
dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<>>,
                                                                 0, 0, F@_1,
                                                                 F@_2, F@_3,
                                                                 _) ->
    #gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                       = F@_1,
                                                   block_hash = F@_2,
                                                   onion_key_hash = F@_3};
dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Other,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2, F@_3,
                                                                 TrUserData) ->
    dg_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Other,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData).

dg_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData);
dg_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_challenge_notification_resp_v1_pb_challenger(Rest,
                                                                             0,
                                                                             0,
                                                                             F@_1,
                                                                             F@_2,
                                                                             F@_3,
                                                                             TrUserData);
        18 ->
            d_field_gateway_poc_challenge_notification_resp_v1_pb_block_hash(Rest,
                                                                             0,
                                                                             0,
                                                                             F@_1,
                                                                             F@_2,
                                                                             F@_3,
                                                                             TrUserData);
        26 ->
            d_field_gateway_poc_challenge_notification_resp_v1_pb_onion_key_hash(Rest,
                                                                                 0,
                                                                                 0,
                                                                                 F@_1,
                                                                                 F@_2,
                                                                                 F@_3,
                                                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                              0,
                                                                              0,
                                                                              F@_1,
                                                                              F@_2,
                                                                              F@_3,
                                                                              TrUserData);
                1 ->
                    skip_64_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                                        0,
                                                                                        0,
                                                                                        F@_1,
                                                                                        F@_2,
                                                                                        F@_3,
                                                                                        TrUserData);
                3 ->
                    skip_group_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                             Key
                                                                                 bsr
                                                                                 3,
                                                                             0,
                                                                             F@_1,
                                                                             F@_2,
                                                                             F@_3,
                                                                             TrUserData);
                5 ->
                    skip_32_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(<<>>,
                                                                0, 0, F@_1,
                                                                F@_2, F@_3,
                                                                _) ->
    #gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                       = F@_1,
                                                   block_hash = F@_2,
                                                   onion_key_hash = F@_3}.

d_field_gateway_poc_challenge_notification_resp_v1_pb_challenger(<<1:1,
                                                                   X:7,
                                                                   Rest/binary>>,
                                                                 N, Acc, F@_1,
                                                                 F@_2, F@_3,
                                                                 TrUserData)
    when N < 57 ->
    d_field_gateway_poc_challenge_notification_resp_v1_pb_challenger(Rest,
                                                                     N + 7,
                                                                     X bsl N +
                                                                         Acc,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
d_field_gateway_poc_challenge_notification_resp_v1_pb_challenger(<<0:1,
                                                                   X:7,
                                                                   Rest/binary>>,
                                                                 N, Acc, Prev,
                                                                 F@_2, F@_3,
                                                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_address_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(RestF,
                                                                     0,
                                                                     0,
                                                                     if Prev ==
                                                                            undefined ->
                                                                            NewFValue;
                                                                        true ->
                                                                            merge_msg_routing_address_pb(Prev,
                                                                                                         NewFValue,
                                                                                                         TrUserData)
                                                                     end,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData).

d_field_gateway_poc_challenge_notification_resp_v1_pb_block_hash(<<1:1,
                                                                   X:7,
                                                                   Rest/binary>>,
                                                                 N, Acc, F@_1,
                                                                 F@_2, F@_3,
                                                                 TrUserData)
    when N < 57 ->
    d_field_gateway_poc_challenge_notification_resp_v1_pb_block_hash(Rest,
                                                                     N + 7,
                                                                     X bsl N +
                                                                         Acc,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
d_field_gateway_poc_challenge_notification_resp_v1_pb_block_hash(<<0:1,
                                                                   X:7,
                                                                   Rest/binary>>,
                                                                 N, Acc, F@_1,
                                                                 _, F@_3,
                                                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(RestF,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     NewFValue,
                                                                     F@_3,
                                                                     TrUserData).

d_field_gateway_poc_challenge_notification_resp_v1_pb_onion_key_hash(<<1:1,
                                                                       X:7,
                                                                       Rest/binary>>,
                                                                     N, Acc,
                                                                     F@_1, F@_2,
                                                                     F@_3,
                                                                     TrUserData)
    when N < 57 ->
    d_field_gateway_poc_challenge_notification_resp_v1_pb_onion_key_hash(Rest,
                                                                         N + 7,
                                                                         X bsl N
                                                                             +
                                                                             Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData);
d_field_gateway_poc_challenge_notification_resp_v1_pb_onion_key_hash(<<0:1,
                                                                       X:7,
                                                                       Rest/binary>>,
                                                                     N, Acc,
                                                                     F@_1, F@_2,
                                                                     _,
                                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(RestF,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     NewFValue,
                                                                     TrUserData).

skip_varint_gateway_poc_challenge_notification_resp_v1_pb(<<1:1,
                                                            _:7, Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          F@_3, TrUserData) ->
    skip_varint_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
skip_varint_gateway_poc_challenge_notification_resp_v1_pb(<<0:1,
                                                            _:7, Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          F@_3, TrUserData) ->
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData).

skip_length_delimited_gateway_poc_challenge_notification_resp_v1_pb(<<1:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    F@_3,
                                                                    TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                        N + 7,
                                                                        X bsl N
                                                                            +
                                                                            Acc,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        TrUserData);
skip_length_delimited_gateway_poc_challenge_notification_resp_v1_pb(<<0:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    F@_3,
                                                                    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Rest2,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData).

skip_group_gateway_poc_challenge_notification_resp_v1_pb(Bin,
                                                         FNum, Z2, F@_1, F@_2,
                                                         F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                     0,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData).

skip_32_gateway_poc_challenge_notification_resp_v1_pb(<<_:32,
                                                        Rest/binary>>,
                                                      Z1, Z2, F@_1, F@_2, F@_3,
                                                      TrUserData) ->
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData).

skip_64_gateway_poc_challenge_notification_resp_v1_pb(<<_:64,
                                                        Rest/binary>>,
                                                      Z1, Z2, F@_1, F@_2, F@_3,
                                                      TrUserData) ->
    dfp_read_field_def_gateway_poc_challenge_notification_resp_v1_pb(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData).

decode_msg_gateway_poc_check_challenge_target_req_v1_pb(Bin,
                                                        TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Bin,
                                                                    0,
                                                                    0,
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    id(0,
                                                                       TrUserData),
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    id(<<>>,
                                                                       TrUserData),
                                                                    TrUserData).

dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<10,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_address(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 F@_8,
                                                                 TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<18,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_challenger(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<26,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_block_hash(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<34,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_onion_key_hash(Rest,
                                                                        Z1,
                                                                        Z2,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        F@_6,
                                                                        F@_7,
                                                                        F@_8,
                                                                        TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<40,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_height(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                F@_8,
                                                                TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<50,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier(Rest,
                                                                  Z1,
                                                                  Z2,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  F@_6,
                                                                  F@_7,
                                                                  F@_8,
                                                                  TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<58,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier_sig(Rest,
                                                                      Z1,
                                                                      Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      F@_4,
                                                                      F@_5,
                                                                      F@_6,
                                                                      F@_7,
                                                                      F@_8,
                                                                      TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<66,
                                                                  Rest/binary>>,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_challengee_sig(Rest,
                                                                        Z1,
                                                                        Z2,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        F@_6,
                                                                        F@_7,
                                                                        F@_8,
                                                                        TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<>>,
                                                                0, 0, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8, _) ->
    #gateway_poc_check_challenge_target_req_v1_pb{address =
                                                      F@_1,
                                                  challenger = F@_2,
                                                  block_hash = F@_3,
                                                  onion_key_hash = F@_4,
                                                  height = F@_5,
                                                  notifier = F@_6,
                                                  notifier_sig = F@_7,
                                                  challengee_sig = F@_8};
dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Other,
                                                                Z1, Z2, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData) ->
    dg_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Other,
                                                                   Z1,
                                                                   Z2,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   F@_6,
                                                                   F@_7,
                                                                   F@_8,
                                                                   TrUserData).

dg_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<1:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, F@_3, F@_4,
                                                               F@_5, F@_6, F@_7,
                                                               F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                   N + 7,
                                                                   X bsl N +
                                                                       Acc,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   F@_6,
                                                                   F@_7,
                                                                   F@_8,
                                                                   TrUserData);
dg_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<0:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, F@_3, F@_4,
                                                               F@_5, F@_6, F@_7,
                                                               F@_8,
                                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_address(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         F@_4,
                                                                         F@_5,
                                                                         F@_6,
                                                                         F@_7,
                                                                         F@_8,
                                                                         TrUserData);
        18 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_challenger(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            F@_4,
                                                                            F@_5,
                                                                            F@_6,
                                                                            F@_7,
                                                                            F@_8,
                                                                            TrUserData);
        26 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_block_hash(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            F@_4,
                                                                            F@_5,
                                                                            F@_6,
                                                                            F@_7,
                                                                            F@_8,
                                                                            TrUserData);
        34 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_onion_key_hash(Rest,
                                                                                0,
                                                                                0,
                                                                                F@_1,
                                                                                F@_2,
                                                                                F@_3,
                                                                                F@_4,
                                                                                F@_5,
                                                                                F@_6,
                                                                                F@_7,
                                                                                F@_8,
                                                                                TrUserData);
        40 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_height(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        F@_6,
                                                                        F@_7,
                                                                        F@_8,
                                                                        TrUserData);
        50 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          F@_4,
                                                                          F@_5,
                                                                          F@_6,
                                                                          F@_7,
                                                                          F@_8,
                                                                          TrUserData);
        58 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier_sig(Rest,
                                                                              0,
                                                                              0,
                                                                              F@_1,
                                                                              F@_2,
                                                                              F@_3,
                                                                              F@_4,
                                                                              F@_5,
                                                                              F@_6,
                                                                              F@_7,
                                                                              F@_8,
                                                                              TrUserData);
        66 ->
            d_field_gateway_poc_check_challenge_target_req_v1_pb_challengee_sig(Rest,
                                                                                0,
                                                                                0,
                                                                                F@_1,
                                                                                F@_2,
                                                                                F@_3,
                                                                                F@_4,
                                                                                F@_5,
                                                                                F@_6,
                                                                                F@_7,
                                                                                F@_8,
                                                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                             0,
                                                                             0,
                                                                             F@_1,
                                                                             F@_2,
                                                                             F@_3,
                                                                             F@_4,
                                                                             F@_5,
                                                                             F@_6,
                                                                             F@_7,
                                                                             F@_8,
                                                                             TrUserData);
                1 ->
                    skip_64_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         F@_4,
                                                                         F@_5,
                                                                         F@_6,
                                                                         F@_7,
                                                                         F@_8,
                                                                         TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                                       0,
                                                                                       0,
                                                                                       F@_1,
                                                                                       F@_2,
                                                                                       F@_3,
                                                                                       F@_4,
                                                                                       F@_5,
                                                                                       F@_6,
                                                                                       F@_7,
                                                                                       F@_8,
                                                                                       TrUserData);
                3 ->
                    skip_group_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                            Key
                                                                                bsr
                                                                                3,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            F@_4,
                                                                            F@_5,
                                                                            F@_6,
                                                                            F@_7,
                                                                            F@_8,
                                                                            TrUserData);
                5 ->
                    skip_32_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         F@_4,
                                                                         F@_5,
                                                                         F@_6,
                                                                         F@_7,
                                                                         F@_8,
                                                                         TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(<<>>,
                                                               0, 0, F@_1, F@_2,
                                                               F@_3, F@_4, F@_5,
                                                               F@_6, F@_7, F@_8,
                                                               _) ->
    #gateway_poc_check_challenge_target_req_v1_pb{address =
                                                      F@_1,
                                                  challenger = F@_2,
                                                  block_hash = F@_3,
                                                  onion_key_hash = F@_4,
                                                  height = F@_5,
                                                  notifier = F@_6,
                                                  notifier_sig = F@_7,
                                                  challengee_sig = F@_8}.

d_field_gateway_poc_check_challenge_target_req_v1_pb_address(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             F@_3, F@_4, F@_5,
                                                             F@_6, F@_7, F@_8,
                                                             TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_address(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 F@_8,
                                                                 TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_address(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, _, F@_2,
                                                             F@_3, F@_4, F@_5,
                                                             F@_6, F@_7, F@_8,
                                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    NewFValue,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_challenger(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_challenger(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_challenger(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1, _,
                                                                F@_3, F@_4,
                                                                F@_5, F@_6,
                                                                F@_7, F@_8,
                                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    NewFValue,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_block_hash(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                F@_6, F@_7,
                                                                F@_8,
                                                                TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_block_hash(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_block_hash(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, _, F@_4,
                                                                F@_5, F@_6,
                                                                F@_7, F@_8,
                                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    NewFValue,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_onion_key_hash(<<1:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    F@_3, F@_4,
                                                                    F@_5, F@_6,
                                                                    F@_7, F@_8,
                                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_onion_key_hash(Rest,
                                                                        N + 7,
                                                                        X bsl N
                                                                            +
                                                                            Acc,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        F@_6,
                                                                        F@_7,
                                                                        F@_8,
                                                                        TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_onion_key_hash(<<0:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    F@_3, _,
                                                                    F@_5, F@_6,
                                                                    F@_7, F@_8,
                                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    NewFValue,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_height(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            F@_6, F@_7, F@_8,
                                                            TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_height(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                F@_8,
                                                                TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_height(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, F@_4, _, F@_6,
                                                            F@_7, F@_8,
                                                            TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    NewFValue,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier(<<1:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, F@_3, F@_4,
                                                              F@_5, F@_6, F@_7,
                                                              F@_8, TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier(Rest,
                                                                  N + 7,
                                                                  X bsl N + Acc,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  F@_6,
                                                                  F@_7,
                                                                  F@_8,
                                                                  TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier(<<0:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, F@_3, F@_4,
                                                              F@_5, _, F@_7,
                                                              F@_8,
                                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    NewFValue,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier_sig(<<1:1,
                                                                    X:7,
                                                                    Rest/binary>>,
                                                                  N, Acc, F@_1,
                                                                  F@_2, F@_3,
                                                                  F@_4, F@_5,
                                                                  F@_6, F@_7,
                                                                  F@_8,
                                                                  TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier_sig(Rest,
                                                                      N + 7,
                                                                      X bsl N +
                                                                          Acc,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      F@_4,
                                                                      F@_5,
                                                                      F@_6,
                                                                      F@_7,
                                                                      F@_8,
                                                                      TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_notifier_sig(<<0:1,
                                                                    X:7,
                                                                    Rest/binary>>,
                                                                  N, Acc, F@_1,
                                                                  F@_2, F@_3,
                                                                  F@_4, F@_5,
                                                                  F@_6, _, F@_8,
                                                                  TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    NewFValue,
                                                                    F@_8,
                                                                    TrUserData).

d_field_gateway_poc_check_challenge_target_req_v1_pb_challengee_sig(<<1:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    F@_3, F@_4,
                                                                    F@_5, F@_6,
                                                                    F@_7, F@_8,
                                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_req_v1_pb_challengee_sig(Rest,
                                                                        N + 7,
                                                                        X bsl N
                                                                            +
                                                                            Acc,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        F@_6,
                                                                        F@_7,
                                                                        F@_8,
                                                                        TrUserData);
d_field_gateway_poc_check_challenge_target_req_v1_pb_challengee_sig(<<0:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    F@_3, F@_4,
                                                                    F@_5, F@_6,
                                                                    F@_7, _,
                                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(RestF,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    NewFValue,
                                                                    TrUserData).

skip_varint_gateway_poc_check_challenge_target_req_v1_pb(<<1:1,
                                                           _:7, Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5, F@_6,
                                                         F@_7, F@_8,
                                                         TrUserData) ->
    skip_varint_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             TrUserData);
skip_varint_gateway_poc_check_challenge_target_req_v1_pb(<<0:1,
                                                           _:7, Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5, F@_6,
                                                         F@_7, F@_8,
                                                         TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

skip_length_delimited_gateway_poc_check_challenge_target_req_v1_pb(<<1:1,
                                                                     X:7,
                                                                     Rest/binary>>,
                                                                   N, Acc, F@_1,
                                                                   F@_2, F@_3,
                                                                   F@_4, F@_5,
                                                                   F@_6, F@_7,
                                                                   F@_8,
                                                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                       N + 7,
                                                                       X bsl N +
                                                                           Acc,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       F@_6,
                                                                       F@_7,
                                                                       F@_8,
                                                                       TrUserData);
skip_length_delimited_gateway_poc_check_challenge_target_req_v1_pb(<<0:1,
                                                                     X:7,
                                                                     Rest/binary>>,
                                                                   N, Acc, F@_1,
                                                                   F@_2, F@_3,
                                                                   F@_4, F@_5,
                                                                   F@_6, F@_7,
                                                                   F@_8,
                                                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Rest2,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

skip_group_gateway_poc_check_challenge_target_req_v1_pb(Bin,
                                                        FNum, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                    0,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

skip_32_gateway_poc_check_challenge_target_req_v1_pb(<<_:32,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

skip_64_gateway_poc_check_challenge_target_req_v1_pb(<<_:64,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_req_v1_pb(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData).

decode_msg_gateway_poc_region_params_req_v1_pb(Bin,
                                               TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Bin,
                                                           0,
                                                           0,
                                                           id(<<>>, TrUserData),
                                                           id(<<>>, TrUserData),
                                                           TrUserData).

dfp_read_field_def_gateway_poc_region_params_req_v1_pb(<<10,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1, F@_2,
                                                       TrUserData) ->
    d_field_gateway_poc_region_params_req_v1_pb_address(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
dfp_read_field_def_gateway_poc_region_params_req_v1_pb(<<18,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1, F@_2,
                                                       TrUserData) ->
    d_field_gateway_poc_region_params_req_v1_pb_signature(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
dfp_read_field_def_gateway_poc_region_params_req_v1_pb(<<>>,
                                                       0, 0, F@_1, F@_2, _) ->
    #gateway_poc_region_params_req_v1_pb{address = F@_1,
                                         signature = F@_2};
dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Other,
                                                       Z1, Z2, F@_1, F@_2,
                                                       TrUserData) ->
    dg_read_field_def_gateway_poc_region_params_req_v1_pb(Other,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData).

dg_read_field_def_gateway_poc_region_params_req_v1_pb(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2,
                                                      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_region_params_req_v1_pb(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
dg_read_field_def_gateway_poc_region_params_req_v1_pb(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2,
                                                      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_region_params_req_v1_pb_address(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
        18 ->
            d_field_gateway_poc_region_params_req_v1_pb_signature(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_region_params_req_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
                1 ->
                    skip_64_gateway_poc_region_params_req_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_region_params_req_v1_pb(Rest,
                                                                              0,
                                                                              0,
                                                                              F@_1,
                                                                              F@_2,
                                                                              TrUserData);
                3 ->
                    skip_group_gateway_poc_region_params_req_v1_pb(Rest,
                                                                   Key bsr 3,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   TrUserData);
                5 ->
                    skip_32_gateway_poc_region_params_req_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_region_params_req_v1_pb(<<>>,
                                                      0, 0, F@_1, F@_2, _) ->
    #gateway_poc_region_params_req_v1_pb{address = F@_1,
                                         signature = F@_2}.

d_field_gateway_poc_region_params_req_v1_pb_address(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2,
                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_poc_region_params_req_v1_pb_address(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
d_field_gateway_poc_region_params_req_v1_pb_address(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, _, F@_2,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           NewFValue,
                                                           F@_2,
                                                           TrUserData).

d_field_gateway_poc_region_params_req_v1_pb_signature(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2,
                                                      TrUserData)
    when N < 57 ->
    d_field_gateway_poc_region_params_req_v1_pb_signature(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          TrUserData);
d_field_gateway_poc_region_params_req_v1_pb_signature(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, _,
                                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           NewFValue,
                                                           TrUserData).

skip_varint_gateway_poc_region_params_req_v1_pb(<<1:1,
                                                  _:7, Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    skip_varint_gateway_poc_region_params_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
skip_varint_gateway_poc_region_params_req_v1_pb(<<0:1,
                                                  _:7, Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData).

skip_length_delimited_gateway_poc_region_params_req_v1_pb(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_region_params_req_v1_pb(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
skip_length_delimited_gateway_poc_region_params_req_v1_pb(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Rest2,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData).

skip_group_gateway_poc_region_params_req_v1_pb(Bin,
                                               FNum, Z2, F@_1, F@_2,
                                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Rest,
                                                           0,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData).

skip_32_gateway_poc_region_params_req_v1_pb(<<_:32,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData).

skip_64_gateway_poc_region_params_req_v1_pb(<<_:64,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_req_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData).

decode_msg_gateway_poc_region_params_resp_v1_pb(Bin,
                                                TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Bin,
                                                            0,
                                                            0,
                                                            id(<<>>,
                                                               TrUserData),
                                                            id(<<>>,
                                                               TrUserData),
                                                            id(undefined,
                                                               TrUserData),
                                                            TrUserData).

dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(<<10,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    d_field_gateway_poc_region_params_resp_v1_pb_address(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(<<18,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    d_field_gateway_poc_region_params_resp_v1_pb_region(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(<<26,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    d_field_gateway_poc_region_params_resp_v1_pb_params(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(<<>>,
                                                        0, 0, F@_1, F@_2, F@_3,
                                                        _) ->
    #gateway_poc_region_params_resp_v1_pb{address = F@_1,
                                          region = F@_2, params = F@_3};
dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Other,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    dg_read_field_def_gateway_poc_region_params_resp_v1_pb(Other,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData).

dg_read_field_def_gateway_poc_region_params_resp_v1_pb(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_region_params_resp_v1_pb(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
dg_read_field_def_gateway_poc_region_params_resp_v1_pb(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_region_params_resp_v1_pb_address(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
        18 ->
            d_field_gateway_poc_region_params_resp_v1_pb_region(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
        26 ->
            d_field_gateway_poc_region_params_resp_v1_pb_params(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_region_params_resp_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     TrUserData);
                1 ->
                    skip_64_gateway_poc_region_params_resp_v1_pb(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_region_params_resp_v1_pb(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData);
                3 ->
                    skip_group_gateway_poc_region_params_resp_v1_pb(Rest,
                                                                    Key bsr 3,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData);
                5 ->
                    skip_32_gateway_poc_region_params_resp_v1_pb(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_region_params_resp_v1_pb(<<>>,
                                                       0, 0, F@_1, F@_2, F@_3,
                                                       _) ->
    #gateway_poc_region_params_resp_v1_pb{address = F@_1,
                                          region = F@_2, params = F@_3}.

d_field_gateway_poc_region_params_resp_v1_pb_address(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     TrUserData)
    when N < 57 ->
    d_field_gateway_poc_region_params_resp_v1_pb_address(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
d_field_gateway_poc_region_params_resp_v1_pb_address(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, _, F@_2, F@_3,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            NewFValue,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

d_field_gateway_poc_region_params_resp_v1_pb_region(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_poc_region_params_resp_v1_pb_region(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
d_field_gateway_poc_region_params_resp_v1_pb_region(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, _, F@_3,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            NewFValue,
                                                            F@_3,
                                                            TrUserData).

d_field_gateway_poc_region_params_resp_v1_pb_params(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_poc_region_params_resp_v1_pb_params(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
d_field_gateway_poc_region_params_resp_v1_pb_params(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, Prev,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_region_params_v1_pb(Bs,
                                                                           TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            if Prev ==
                                                                   undefined ->
                                                                   NewFValue;
                                                               true ->
                                                                   merge_msg_blockchain_region_params_v1_pb(Prev,
                                                                                                            NewFValue,
                                                                                                            TrUserData)
                                                            end,
                                                            TrUserData).

skip_varint_gateway_poc_region_params_resp_v1_pb(<<1:1,
                                                   _:7, Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    skip_varint_gateway_poc_region_params_resp_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
skip_varint_gateway_poc_region_params_resp_v1_pb(<<0:1,
                                                   _:7, Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3,
                                                 TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_length_delimited_gateway_poc_region_params_resp_v1_pb(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_region_params_resp_v1_pb(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
skip_length_delimited_gateway_poc_region_params_resp_v1_pb(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Rest2,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_group_gateway_poc_region_params_resp_v1_pb(Bin,
                                                FNum, Z2, F@_1, F@_2, F@_3,
                                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Rest,
                                                            0,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_32_gateway_poc_region_params_resp_v1_pb(<<_:32,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

skip_64_gateway_poc_region_params_resp_v1_pb(<<_:64,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    dfp_read_field_def_gateway_poc_region_params_resp_v1_pb(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData).

decode_msg_gateway_poc_check_challenge_target_resp_v1_pb(Bin,
                                                         TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Bin,
                                                                     0,
                                                                     0,
                                                                     id(false,
                                                                        TrUserData),
                                                                     id(<<>>,
                                                                        TrUserData),
                                                                     TrUserData).

dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(<<8,
                                                                   Rest/binary>>,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2,
                                                                 TrUserData) ->
    d_field_gateway_poc_check_challenge_target_resp_v1_pb_target(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 F@_2,
                                                                 TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(<<18,
                                                                   Rest/binary>>,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2,
                                                                 TrUserData) ->
    d_field_gateway_poc_check_challenge_target_resp_v1_pb_onion(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(<<>>,
                                                                 0, 0, F@_1,
                                                                 F@_2, _) ->
    #gateway_poc_check_challenge_target_resp_v1_pb{target =
                                                       F@_1,
                                                   onion = F@_2};
dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Other,
                                                                 Z1, Z2, F@_1,
                                                                 F@_2,
                                                                 TrUserData) ->
    dg_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Other,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData).

dg_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2,
                                                                TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
dg_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2,
                                                                TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_gateway_poc_check_challenge_target_resp_v1_pb_target(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         TrUserData);
        18 ->
            d_field_gateway_poc_check_challenge_target_resp_v1_pb_onion(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                              0,
                                                                              0,
                                                                              F@_1,
                                                                              F@_2,
                                                                              TrUserData);
                1 ->
                    skip_64_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                                        0,
                                                                                        0,
                                                                                        F@_1,
                                                                                        F@_2,
                                                                                        TrUserData);
                3 ->
                    skip_group_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                             Key
                                                                                 bsr
                                                                                 3,
                                                                             0,
                                                                             F@_1,
                                                                             F@_2,
                                                                             TrUserData);
                5 ->
                    skip_32_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(<<>>,
                                                                0, 0, F@_1,
                                                                F@_2, _) ->
    #gateway_poc_check_challenge_target_resp_v1_pb{target =
                                                       F@_1,
                                                   onion = F@_2}.

d_field_gateway_poc_check_challenge_target_resp_v1_pb_target(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_resp_v1_pb_target(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 F@_2,
                                                                 TrUserData);
d_field_gateway_poc_check_challenge_target_resp_v1_pb_target(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, _, F@_2,
                                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(RestF,
                                                                     0,
                                                                     0,
                                                                     NewFValue,
                                                                     F@_2,
                                                                     TrUserData).

d_field_gateway_poc_check_challenge_target_resp_v1_pb_onion(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            TrUserData)
    when N < 57 ->
    d_field_gateway_poc_check_challenge_target_resp_v1_pb_onion(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
d_field_gateway_poc_check_challenge_target_resp_v1_pb_onion(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, _,
                                                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(RestF,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     NewFValue,
                                                                     TrUserData).

skip_varint_gateway_poc_check_challenge_target_resp_v1_pb(<<1:1,
                                                            _:7, Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          TrUserData) ->
    skip_varint_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
skip_varint_gateway_poc_check_challenge_target_resp_v1_pb(<<0:1,
                                                            _:7, Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData).

skip_length_delimited_gateway_poc_check_challenge_target_resp_v1_pb(<<1:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                        N + 7,
                                                                        X bsl N
                                                                            +
                                                                            Acc,
                                                                        F@_1,
                                                                        F@_2,
                                                                        TrUserData);
skip_length_delimited_gateway_poc_check_challenge_target_resp_v1_pb(<<0:1,
                                                                      X:7,
                                                                      Rest/binary>>,
                                                                    N, Acc,
                                                                    F@_1, F@_2,
                                                                    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Rest2,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData).

skip_group_gateway_poc_check_challenge_target_resp_v1_pb(Bin,
                                                         FNum, Z2, F@_1, F@_2,
                                                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                     0,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData).

skip_32_gateway_poc_check_challenge_target_resp_v1_pb(<<_:32,
                                                        Rest/binary>>,
                                                      Z1, Z2, F@_1, F@_2,
                                                      TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData).

skip_64_gateway_poc_check_challenge_target_resp_v1_pb(<<_:64,
                                                        Rest/binary>>,
                                                      Z1, Z2, F@_1, F@_2,
                                                      TrUserData) ->
    dfp_read_field_def_gateway_poc_check_challenge_target_resp_v1_pb(Rest,
                                                                     Z1,
                                                                     Z2,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData).

decode_msg_gateway_poc_report_req_v1_pb(Bin,
                                        TrUserData) ->
    dfp_read_field_def_gateway_poc_report_req_v1_pb(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    id(undefined, TrUserData),
                                                    TrUserData).

dfp_read_field_def_gateway_poc_report_req_v1_pb(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_gateway_poc_report_req_v1_pb_onion_key_hash(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
dfp_read_field_def_gateway_poc_report_req_v1_pb(<<18,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_gateway_poc_report_req_v1_pb_receipt(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_gateway_poc_report_req_v1_pb(<<26,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    d_field_gateway_poc_report_req_v1_pb_witness(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_gateway_poc_report_req_v1_pb(<<>>, 0,
                                                0, F@_1, F@_2, _) ->
    #gateway_poc_report_req_v1_pb{onion_key_hash = F@_1,
                                  msg = F@_2};
dfp_read_field_def_gateway_poc_report_req_v1_pb(Other,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dg_read_field_def_gateway_poc_report_req_v1_pb(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData).

dg_read_field_def_gateway_poc_report_req_v1_pb(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_report_req_v1_pb(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
dg_read_field_def_gateway_poc_report_req_v1_pb(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2,
                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_report_req_v1_pb_onion_key_hash(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData);
        18 ->
            d_field_gateway_poc_report_req_v1_pb_receipt(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        26 ->
            d_field_gateway_poc_report_req_v1_pb_witness(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_report_req_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
                1 ->
                    skip_64_gateway_poc_report_req_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_report_req_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
                3 ->
                    skip_group_gateway_poc_report_req_v1_pb(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
                5 ->
                    skip_32_gateway_poc_report_req_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_report_req_v1_pb(<<>>, 0,
                                               0, F@_1, F@_2, _) ->
    #gateway_poc_report_req_v1_pb{onion_key_hash = F@_1,
                                  msg = F@_2}.

d_field_gateway_poc_report_req_v1_pb_onion_key_hash(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2,
                                                    TrUserData)
    when N < 57 ->
    d_field_gateway_poc_report_req_v1_pb_onion_key_hash(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
d_field_gateway_poc_report_req_v1_pb_onion_key_hash(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, _, F@_2,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_report_req_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    F@_2,
                                                    TrUserData).

d_field_gateway_poc_report_req_v1_pb_receipt(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_poc_report_req_v1_pb_receipt(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_gateway_poc_report_req_v1_pb_receipt(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_receipt_v1_pb(Bs,
                                                                         TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_poc_report_req_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    case Prev of
                                                        undefined ->
                                                            id({receipt,
                                                                NewFValue},
                                                               TrUserData);
                                                        {receipt, MVPrev} ->
                                                            id({receipt,
                                                                merge_msg_blockchain_poc_receipt_v1_pb(MVPrev,
                                                                                                       NewFValue,
                                                                                                       TrUserData)},
                                                               TrUserData);
                                                        _ ->
                                                            id({receipt,
                                                                NewFValue},
                                                               TrUserData)
                                                    end,
                                                    TrUserData).

d_field_gateway_poc_report_req_v1_pb_witness(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_gateway_poc_report_req_v1_pb_witness(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_gateway_poc_report_req_v1_pb_witness(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_witness_v1_pb(Bs,
                                                                         TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_poc_report_req_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    case Prev of
                                                        undefined ->
                                                            id({witness,
                                                                NewFValue},
                                                               TrUserData);
                                                        {witness, MVPrev} ->
                                                            id({witness,
                                                                merge_msg_blockchain_poc_witness_v1_pb(MVPrev,
                                                                                                       NewFValue,
                                                                                                       TrUserData)},
                                                               TrUserData);
                                                        _ ->
                                                            id({witness,
                                                                NewFValue},
                                                               TrUserData)
                                                    end,
                                                    TrUserData).

skip_varint_gateway_poc_report_req_v1_pb(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_gateway_poc_report_req_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
skip_varint_gateway_poc_report_req_v1_pb(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_report_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_length_delimited_gateway_poc_report_req_v1_pb(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_report_req_v1_pb(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
skip_length_delimited_gateway_poc_report_req_v1_pb(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2,
                                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_report_req_v1_pb(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_group_gateway_poc_report_req_v1_pb(Bin, FNum, Z2,
                                        F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_report_req_v1_pb(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_32_gateway_poc_report_req_v1_pb(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_report_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

skip_64_gateway_poc_report_req_v1_pb(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_gateway_poc_report_req_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData).

decode_msg_gateway_address_routing_data_req_v1_pb(Bin,
                                                  TrUserData) ->
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Bin,
                                                              0,
                                                              0,
                                                              id(<<>>,
                                                                 TrUserData),
                                                              TrUserData).

dfp_read_field_def_gateway_address_routing_data_req_v1_pb(<<10,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_gateway_address_routing_data_req_v1_pb_address(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           TrUserData);
dfp_read_field_def_gateway_address_routing_data_req_v1_pb(<<>>,
                                                          0, 0, F@_1, _) ->
    #gateway_address_routing_data_req_v1_pb{address = F@_1};
dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Other,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    dg_read_field_def_gateway_address_routing_data_req_v1_pb(Other,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

dg_read_field_def_gateway_address_routing_data_req_v1_pb(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_address_routing_data_req_v1_pb(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             TrUserData);
dg_read_field_def_gateway_address_routing_data_req_v1_pb(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_address_routing_data_req_v1_pb_address(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_address_routing_data_req_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       TrUserData);
                1 ->
                    skip_64_gateway_address_routing_data_req_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                2 ->
                    skip_length_delimited_gateway_address_routing_data_req_v1_pb(Rest,
                                                                                 0,
                                                                                 0,
                                                                                 F@_1,
                                                                                 TrUserData);
                3 ->
                    skip_group_gateway_address_routing_data_req_v1_pb(Rest,
                                                                      Key bsr 3,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                5 ->
                    skip_32_gateway_address_routing_data_req_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData)
            end
    end;
dg_read_field_def_gateway_address_routing_data_req_v1_pb(<<>>,
                                                         0, 0, F@_1, _) ->
    #gateway_address_routing_data_req_v1_pb{address = F@_1}.

d_field_gateway_address_routing_data_req_v1_pb_address(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_address_routing_data_req_v1_pb_address(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           TrUserData);
d_field_gateway_address_routing_data_req_v1_pb_address(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              NewFValue,
                                                              TrUserData).

skip_varint_gateway_address_routing_data_req_v1_pb(<<1:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_address_routing_data_req_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       TrUserData);
skip_varint_gateway_address_routing_data_req_v1_pb(<<0:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_length_delimited_gateway_address_routing_data_req_v1_pb(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1,
                                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_address_routing_data_req_v1_pb(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 TrUserData);
skip_length_delimited_gateway_address_routing_data_req_v1_pb(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1,
                                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Rest2,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData).

skip_group_gateway_address_routing_data_req_v1_pb(Bin,
                                                  FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Rest,
                                                              0,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_32_gateway_address_routing_data_req_v1_pb(<<_:32,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_64_gateway_address_routing_data_req_v1_pb(<<_:64,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_address_routing_data_req_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

decode_msg_gateway_poc_key_routing_data_req_v1_pb(Bin,
                                                  TrUserData) ->
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Bin,
                                                              0,
                                                              0,
                                                              id(<<>>,
                                                                 TrUserData),
                                                              TrUserData).

dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(<<10,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_gateway_poc_key_routing_data_req_v1_pb_key(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       TrUserData);
dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(<<>>,
                                                          0, 0, F@_1, _) ->
    #gateway_poc_key_routing_data_req_v1_pb{key = F@_1};
dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Other,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    dg_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Other,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

dg_read_field_def_gateway_poc_key_routing_data_req_v1_pb(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             TrUserData);
dg_read_field_def_gateway_poc_key_routing_data_req_v1_pb(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_poc_key_routing_data_req_v1_pb_key(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       TrUserData);
                1 ->
                    skip_64_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                2 ->
                    skip_length_delimited_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                                                 0,
                                                                                 0,
                                                                                 F@_1,
                                                                                 TrUserData);
                3 ->
                    skip_group_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                                      Key bsr 3,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                5 ->
                    skip_32_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData)
            end
    end;
dg_read_field_def_gateway_poc_key_routing_data_req_v1_pb(<<>>,
                                                         0, 0, F@_1, _) ->
    #gateway_poc_key_routing_data_req_v1_pb{key = F@_1}.

d_field_gateway_poc_key_routing_data_req_v1_pb_key(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_gateway_poc_key_routing_data_req_v1_pb_key(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       TrUserData);
d_field_gateway_poc_key_routing_data_req_v1_pb_key(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              NewFValue,
                                                              TrUserData).

skip_varint_gateway_poc_key_routing_data_req_v1_pb(<<1:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       TrUserData);
skip_varint_gateway_poc_key_routing_data_req_v1_pb(<<0:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_length_delimited_gateway_poc_key_routing_data_req_v1_pb(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1,
                                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 TrUserData);
skip_length_delimited_gateway_poc_key_routing_data_req_v1_pb(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1,
                                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Rest2,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData).

skip_group_gateway_poc_key_routing_data_req_v1_pb(Bin,
                                                  FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                              0,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_32_gateway_poc_key_routing_data_req_v1_pb(<<_:32,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_64_gateway_poc_key_routing_data_req_v1_pb(<<_:64,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_gateway_poc_key_routing_data_req_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

decode_msg_gateway_public_routing_data_resp_v1_pb(Bin,
                                                  TrUserData) ->
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Bin,
                                                              0,
                                                              0,
                                                              id(<<>>,
                                                                 TrUserData),
                                                              id(undefined,
                                                                 TrUserData),
                                                              TrUserData).

dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(<<10,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          TrUserData) ->
    d_field_gateway_public_routing_data_resp_v1_pb_address(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(<<18,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          TrUserData) ->
    d_field_gateway_public_routing_data_resp_v1_pb_public_uri(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(<<>>,
                                                          0, 0, F@_1, F@_2,
                                                          _) ->
    #gateway_public_routing_data_resp_v1_pb{address = F@_1,
                                            public_uri = F@_2};
dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Other,
                                                          Z1, Z2, F@_1, F@_2,
                                                          TrUserData) ->
    dg_read_field_def_gateway_public_routing_data_resp_v1_pb(Other,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData).

dg_read_field_def_gateway_public_routing_data_resp_v1_pb(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_gateway_public_routing_data_resp_v1_pb(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
dg_read_field_def_gateway_public_routing_data_resp_v1_pb(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_gateway_public_routing_data_resp_v1_pb_address(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   TrUserData);
        18 ->
            d_field_gateway_public_routing_data_resp_v1_pb_public_uri(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_gateway_public_routing_data_resp_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
                1 ->
                    skip_64_gateway_public_routing_data_resp_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   TrUserData);
                2 ->
                    skip_length_delimited_gateway_public_routing_data_resp_v1_pb(Rest,
                                                                                 0,
                                                                                 0,
                                                                                 F@_1,
                                                                                 F@_2,
                                                                                 TrUserData);
                3 ->
                    skip_group_gateway_public_routing_data_resp_v1_pb(Rest,
                                                                      Key bsr 3,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      TrUserData);
                5 ->
                    skip_32_gateway_public_routing_data_resp_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   TrUserData)
            end
    end;
dg_read_field_def_gateway_public_routing_data_resp_v1_pb(<<>>,
                                                         0, 0, F@_1, F@_2, _) ->
    #gateway_public_routing_data_resp_v1_pb{address = F@_1,
                                            public_uri = F@_2}.

d_field_gateway_public_routing_data_resp_v1_pb_address(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2,
                                                       TrUserData)
    when N < 57 ->
    d_field_gateway_public_routing_data_resp_v1_pb_address(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           TrUserData);
d_field_gateway_public_routing_data_resp_v1_pb_address(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, _, F@_2,
                                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              NewFValue,
                                                              F@_2,
                                                              TrUserData).

d_field_gateway_public_routing_data_resp_v1_pb_public_uri(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          TrUserData)
    when N < 57 ->
    d_field_gateway_public_routing_data_resp_v1_pb_public_uri(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
d_field_gateway_public_routing_data_resp_v1_pb_public_uri(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, Prev,
                                                          TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_address_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              if Prev ==
                                                                     undefined ->
                                                                     NewFValue;
                                                                 true ->
                                                                     merge_msg_routing_address_pb(Prev,
                                                                                                  NewFValue,
                                                                                                  TrUserData)
                                                              end,
                                                              TrUserData).

skip_varint_gateway_public_routing_data_resp_v1_pb(<<1:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2,
                                                   TrUserData) ->
    skip_varint_gateway_public_routing_data_resp_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       TrUserData);
skip_varint_gateway_public_routing_data_resp_v1_pb(<<0:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2,
                                                   TrUserData) ->
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData).

skip_length_delimited_gateway_public_routing_data_resp_v1_pb(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_gateway_public_routing_data_resp_v1_pb(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 F@_2,
                                                                 TrUserData);
skip_length_delimited_gateway_public_routing_data_resp_v1_pb(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Rest2,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData).

skip_group_gateway_public_routing_data_resp_v1_pb(Bin,
                                                  FNum, Z2, F@_1, F@_2,
                                                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Rest,
                                                              0,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData).

skip_32_gateway_public_routing_data_resp_v1_pb(<<_:32,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData).

skip_64_gateway_public_routing_data_resp_v1_pb(<<_:64,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2,
                                               TrUserData) ->
    dfp_read_field_def_gateway_public_routing_data_resp_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData).

decode_msg_blockchain_state_channel_summary_v1_pb(Bin,
                                                  TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Bin,
                                                              0,
                                                              0,
                                                              id(<<>>,
                                                                 TrUserData),
                                                              id(0, TrUserData),
                                                              id(0, TrUserData),
                                                              TrUserData).

dfp_read_field_def_blockchain_state_channel_summary_v1_pb(<<10,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          F@_3, TrUserData) ->
    d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData);
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(<<16,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          F@_3, TrUserData) ->
    d_field_blockchain_state_channel_summary_v1_pb_num_packets(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(<<24,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1, F@_2,
                                                          F@_3, TrUserData) ->
    d_field_blockchain_state_channel_summary_v1_pb_num_dcs(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(<<>>,
                                                          0, 0, F@_1, F@_2,
                                                          F@_3, _) ->
    #blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                = F@_1,
                                            num_packets = F@_2, num_dcs = F@_3};
dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Other,
                                                          Z1, Z2, F@_1, F@_2,
                                                          F@_3, TrUserData) ->
    dg_read_field_def_blockchain_state_channel_summary_v1_pb(Other,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData).

dg_read_field_def_blockchain_state_channel_summary_v1_pb(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_summary_v1_pb(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             TrUserData);
dg_read_field_def_blockchain_state_channel_summary_v1_pb(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData);
        16 ->
            d_field_blockchain_state_channel_summary_v1_pb_num_packets(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData);
        24 ->
            d_field_blockchain_state_channel_summary_v1_pb_num_dcs(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_summary_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_summary_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_summary_v1_pb(Rest,
                                                                                 0,
                                                                                 0,
                                                                                 F@_1,
                                                                                 F@_2,
                                                                                 F@_3,
                                                                                 TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_summary_v1_pb(Rest,
                                                                      Key bsr 3,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_summary_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_summary_v1_pb(<<>>,
                                                         0, 0, F@_1, F@_2, F@_3,
                                                         _) ->
    #blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                = F@_1,
                                            num_packets = F@_2, num_dcs = F@_3}.

d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    TrUserData);
d_field_blockchain_state_channel_summary_v1_pb_client_pubkeybin(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, _, F@_2,
                                                                F@_3,
                                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              NewFValue,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData).

d_field_blockchain_state_channel_summary_v1_pb_num_packets(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_summary_v1_pb_num_packets(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
d_field_blockchain_state_channel_summary_v1_pb_num_packets(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, _,
                                                           F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              NewFValue,
                                                              F@_3,
                                                              TrUserData).

d_field_blockchain_state_channel_summary_v1_pb_num_dcs(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_summary_v1_pb_num_dcs(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           TrUserData);
d_field_blockchain_state_channel_summary_v1_pb_num_dcs(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, _,
                                                       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              NewFValue,
                                                              TrUserData).

skip_varint_blockchain_state_channel_summary_v1_pb(<<1:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   TrUserData) ->
    skip_varint_blockchain_state_channel_summary_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       TrUserData);
skip_varint_blockchain_state_channel_summary_v1_pb(<<0:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, F@_2, F@_3,
                                                   TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData).

skip_length_delimited_blockchain_state_channel_summary_v1_pb(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_summary_v1_pb(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
skip_length_delimited_blockchain_state_channel_summary_v1_pb(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             F@_3,
                                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Rest2,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData).

skip_group_blockchain_state_channel_summary_v1_pb(Bin,
                                                  FNum, Z2, F@_1, F@_2, F@_3,
                                                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Rest,
                                                              0,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData).

skip_32_blockchain_state_channel_summary_v1_pb(<<_:32,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData).

skip_64_blockchain_state_channel_summary_v1_pb(<<_:64,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_summary_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData).

decode_msg_blockchain_state_channel_v1_pb(Bin,
                                          TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(Bin,
                                                      0,
                                                      0,
                                                      id(<<>>, TrUserData),
                                                      id(<<>>, TrUserData),
                                                      id(0, TrUserData),
                                                      id(0, TrUserData),
                                                      id([], TrUserData),
                                                      id(<<>>, TrUserData),
                                                      id(<<>>, TrUserData),
                                                      id(open, TrUserData),
                                                      id(0, TrUserData),
                                                      id(<<>>, TrUserData),
                                                      TrUserData).

dfp_read_field_def_blockchain_state_channel_v1_pb(<<10,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_id(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<18,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_owner(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<24,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_credits(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<32,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_nonce(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<42,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_summaries(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<50,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_root_hash(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<58,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_skewed(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<64,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_state(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<72,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_expire_at_block(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<82,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    d_field_blockchain_state_channel_v1_pb_signature(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
dfp_read_field_def_blockchain_state_channel_v1_pb(<<>>,
                                                  0, 0, F@_1, F@_2, F@_3, F@_4,
                                                  R1, F@_6, F@_7, F@_8, F@_9,
                                                  F@_10, TrUserData) ->
    #blockchain_state_channel_v1_pb{id = F@_1, owner = F@_2,
                                    credits = F@_3, nonce = F@_4,
                                    summaries = lists_reverse(R1, TrUserData),
                                    root_hash = F@_6, skewed = F@_7,
                                    state = F@_8, expire_at_block = F@_9,
                                    signature = F@_10};
dfp_read_field_def_blockchain_state_channel_v1_pb(Other,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  F@_9, F@_10, TrUserData) ->
    dg_read_field_def_blockchain_state_channel_v1_pb(Other,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData).

dg_read_field_def_blockchain_state_channel_v1_pb(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_v1_pb(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
dg_read_field_def_blockchain_state_channel_v1_pb(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_v1_pb_id(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData);
        18 ->
            d_field_blockchain_state_channel_v1_pb_owner(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         TrUserData);
        24 ->
            d_field_blockchain_state_channel_v1_pb_credits(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           TrUserData);
        32 ->
            d_field_blockchain_state_channel_v1_pb_nonce(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         TrUserData);
        42 ->
            d_field_blockchain_state_channel_v1_pb_summaries(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             F@_10,
                                                             TrUserData);
        50 ->
            d_field_blockchain_state_channel_v1_pb_root_hash(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             F@_10,
                                                             TrUserData);
        58 ->
            d_field_blockchain_state_channel_v1_pb_skewed(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          F@_10,
                                                          TrUserData);
        64 ->
            d_field_blockchain_state_channel_v1_pb_state(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         TrUserData);
        72 ->
            d_field_blockchain_state_channel_v1_pb_expire_at_block(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   F@_6,
                                                                   F@_7,
                                                                   F@_8,
                                                                   F@_9,
                                                                   F@_10,
                                                                   TrUserData);
        82 ->
            d_field_blockchain_state_channel_v1_pb_signature(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             F@_10,
                                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_v1_pb(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               F@_6,
                                                               F@_7,
                                                               F@_8,
                                                               F@_9,
                                                               F@_10,
                                                               TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         F@_4,
                                                                         F@_5,
                                                                         F@_6,
                                                                         F@_7,
                                                                         F@_8,
                                                                         F@_9,
                                                                         F@_10,
                                                                         TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_v1_pb(Rest,
                                                              Key bsr 3,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              F@_8,
                                                              F@_9,
                                                              F@_10,
                                                              TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_v1_pb(<<>>,
                                                 0, 0, F@_1, F@_2, F@_3, F@_4,
                                                 R1, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData) ->
    #blockchain_state_channel_v1_pb{id = F@_1, owner = F@_2,
                                    credits = F@_3, nonce = F@_4,
                                    summaries = lists_reverse(R1, TrUserData),
                                    root_hash = F@_6, skewed = F@_7,
                                    state = F@_8, expire_at_block = F@_9,
                                    signature = F@_10}.

d_field_blockchain_state_channel_v1_pb_id(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, F@_8, F@_9, F@_10,
                                          TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_id(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              TrUserData);
d_field_blockchain_state_channel_v1_pb_id(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, F@_8, F@_9, F@_10,
                                          TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      NewFValue,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_owner(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_owner(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 TrUserData);
d_field_blockchain_state_channel_v1_pb_owner(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, _, F@_3, F@_4, F@_5,
                                             F@_6, F@_7, F@_8, F@_9, F@_10,
                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      NewFValue,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_credits(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_credits(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   TrUserData);
d_field_blockchain_state_channel_v1_pb_credits(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, _, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      NewFValue,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_nonce(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_nonce(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 TrUserData);
d_field_blockchain_state_channel_v1_pb_nonce(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                             F@_6, F@_7, F@_8, F@_9, F@_10,
                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      NewFValue,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_summaries(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_summaries(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
d_field_blockchain_state_channel_v1_pb_summaries(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 Prev, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_summary_v1_pb(Bs,
                                                                                   TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      cons(NewFValue,
                                                           Prev,
                                                           TrUserData),
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_root_hash(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_root_hash(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
d_field_blockchain_state_channel_v1_pb_root_hash(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, _, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      NewFValue,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_skewed(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, F@_9,
                                              F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_skewed(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  TrUserData);
d_field_blockchain_state_channel_v1_pb_skewed(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, _, F@_8, F@_9, F@_10,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      NewFValue,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_state(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_state(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 TrUserData);
d_field_blockchain_state_channel_v1_pb_state(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, _, F@_9, F@_10,
                                             TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_helium.blockchain_state_channel_state_v1'(begin
                                                                  <<Res:32/signed-native>> =
                                                                      <<(X bsl N
                                                                             +
                                                                             Acc):32/unsigned-native>>,
                                                                  id(Res,
                                                                     TrUserData)
                                                              end),
            TrUserData),
         Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      NewFValue,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_expire_at_block(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, F@_6, F@_7,
                                                       F@_8, F@_9, F@_10,
                                                       TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_expire_at_block(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           TrUserData);
d_field_blockchain_state_channel_v1_pb_expire_at_block(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, F@_6, F@_7,
                                                       F@_8, _, F@_10,
                                                       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      NewFValue,
                                                      F@_10,
                                                      TrUserData).

d_field_blockchain_state_channel_v1_pb_signature(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 F@_10, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_v1_pb_signature(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     TrUserData);
d_field_blockchain_state_channel_v1_pb_signature(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      NewFValue,
                                                      TrUserData).

skip_varint_blockchain_state_channel_v1_pb(<<1:1, _:7,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, F@_8, F@_9, F@_10,
                                           TrUserData) ->
    skip_varint_blockchain_state_channel_v1_pb(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               F@_4,
                                               F@_5,
                                               F@_6,
                                               F@_7,
                                               F@_8,
                                               F@_9,
                                               F@_10,
                                               TrUserData);
skip_varint_blockchain_state_channel_v1_pb(<<0:1, _:7,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                           F@_6, F@_7, F@_8, F@_9, F@_10,
                                           TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

skip_length_delimited_blockchain_state_channel_v1_pb(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, F@_9, F@_10,
                                                     TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_v1_pb(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         TrUserData);
skip_length_delimited_blockchain_state_channel_v1_pb(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, F@_9, F@_10,
                                                     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_v1_pb(Rest2,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

skip_group_blockchain_state_channel_v1_pb(Bin, FNum, Z2,
                                          F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                          F@_7, F@_8, F@_9, F@_10,
                                          TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_v1_pb(Rest,
                                                      0,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

skip_32_blockchain_state_channel_v1_pb(<<_:32,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       F@_6, F@_7, F@_8, F@_9, F@_10,
                                       TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

skip_64_blockchain_state_channel_v1_pb(<<_:64,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       F@_6, F@_7, F@_8, F@_9, F@_10,
                                       TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      TrUserData).

decode_msg_blockchain_state_channel_response_v1_pb(Bin,
                                                   TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(Bin,
                                                               0,
                                                               0,
                                                               id(false,
                                                                  TrUserData),
                                                               id(undefined,
                                                                  TrUserData),
                                                               TrUserData).

dfp_read_field_def_blockchain_state_channel_response_v1_pb(<<8,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_response_v1_pb_accepted(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
dfp_read_field_def_blockchain_state_channel_response_v1_pb(<<34,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_response_v1_pb_downlink(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
dfp_read_field_def_blockchain_state_channel_response_v1_pb(<<>>,
                                                           0, 0, F@_1, F@_2,
                                                           _) ->
    #blockchain_state_channel_response_v1_pb{accepted =
                                                 F@_1,
                                             downlink = F@_2};
dfp_read_field_def_blockchain_state_channel_response_v1_pb(Other,
                                                           Z1, Z2, F@_1, F@_2,
                                                           TrUserData) ->
    dg_read_field_def_blockchain_state_channel_response_v1_pb(Other,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData).

dg_read_field_def_blockchain_state_channel_response_v1_pb(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_response_v1_pb(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
dg_read_field_def_blockchain_state_channel_response_v1_pb(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_response_v1_pb_accepted(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData);
        34 ->
            d_field_blockchain_state_channel_response_v1_pb_downlink(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_response_v1_pb(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_response_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_response_v1_pb(Rest,
                                                                                  0,
                                                                                  0,
                                                                                  F@_1,
                                                                                  F@_2,
                                                                                  TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_response_v1_pb(Rest,
                                                                       Key bsr
                                                                           3,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_response_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_response_v1_pb(<<>>,
                                                          0, 0, F@_1, F@_2,
                                                          _) ->
    #blockchain_state_channel_response_v1_pb{accepted =
                                                 F@_1,
                                             downlink = F@_2}.

d_field_blockchain_state_channel_response_v1_pb_accepted(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_response_v1_pb_accepted(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
d_field_blockchain_state_channel_response_v1_pb_accepted(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, _, F@_2,
                                                         TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               NewFValue,
                                                               F@_2,
                                                               TrUserData).

d_field_blockchain_state_channel_response_v1_pb_downlink(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_response_v1_pb_downlink(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             TrUserData);
d_field_blockchain_state_channel_response_v1_pb_downlink(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, Prev,
                                                         TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_packet_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               if Prev ==
                                                                      undefined ->
                                                                      NewFValue;
                                                                  true ->
                                                                      merge_msg_packet_pb(Prev,
                                                                                          NewFValue,
                                                                                          TrUserData)
                                                               end,
                                                               TrUserData).

skip_varint_blockchain_state_channel_response_v1_pb(<<1:1,
                                                      _:7, Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2,
                                                    TrUserData) ->
    skip_varint_blockchain_state_channel_response_v1_pb(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
skip_varint_blockchain_state_channel_response_v1_pb(<<0:1,
                                                      _:7, Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2,
                                                    TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

skip_length_delimited_blockchain_state_channel_response_v1_pb(<<1:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_response_v1_pb(Rest,
                                                                  N + 7,
                                                                  X bsl N + Acc,
                                                                  F@_1,
                                                                  F@_2,
                                                                  TrUserData);
skip_length_delimited_blockchain_state_channel_response_v1_pb(<<0:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2,
                                                              TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(Rest2,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

skip_group_blockchain_state_channel_response_v1_pb(Bin,
                                                   FNum, Z2, F@_1, F@_2,
                                                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(Rest,
                                                               0,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

skip_32_blockchain_state_channel_response_v1_pb(<<_:32,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

skip_64_blockchain_state_channel_response_v1_pb(<<_:64,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2,
                                                TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_response_v1_pb(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

decode_msg_blockchain_state_channel_packet_v1_pb(Bin,
                                                 TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Bin,
                                                             0,
                                                             0,
                                                             id(undefined,
                                                                TrUserData),
                                                             id(<<>>,
                                                                TrUserData),
                                                             id(<<>>,
                                                                TrUserData),
                                                             id('US915',
                                                                TrUserData),
                                                             id(0, TrUserData),
                                                             TrUserData).

dfp_read_field_def_blockchain_state_channel_packet_v1_pb(<<10,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5,
                                                         TrUserData) ->
    d_field_blockchain_state_channel_packet_v1_pb_packet(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(<<18,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5,
                                                         TrUserData) ->
    d_field_blockchain_state_channel_packet_v1_pb_hotspot(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(<<26,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5,
                                                         TrUserData) ->
    d_field_blockchain_state_channel_packet_v1_pb_signature(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(<<32,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5,
                                                         TrUserData) ->
    d_field_blockchain_state_channel_packet_v1_pb_region(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(<<40,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5,
                                                         TrUserData) ->
    d_field_blockchain_state_channel_packet_v1_pb_hold_time(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(<<>>,
                                                         0, 0, F@_1, F@_2, F@_3,
                                                         F@_4, F@_5, _) ->
    #blockchain_state_channel_packet_v1_pb{packet = F@_1,
                                           hotspot = F@_2, signature = F@_3,
                                           region = F@_4, hold_time = F@_5};
dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Other,
                                                         Z1, Z2, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5,
                                                         TrUserData) ->
    dg_read_field_def_blockchain_state_channel_packet_v1_pb(Other,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData).

dg_read_field_def_blockchain_state_channel_packet_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_packet_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
dg_read_field_def_blockchain_state_channel_packet_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_packet_v1_pb_packet(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 TrUserData);
        18 ->
            d_field_blockchain_state_channel_packet_v1_pb_hotspot(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  TrUserData);
        26 ->
            d_field_blockchain_state_channel_packet_v1_pb_signature(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
        32 ->
            d_field_blockchain_state_channel_packet_v1_pb_region(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 TrUserData);
        40 ->
            d_field_blockchain_state_channel_packet_v1_pb_hold_time(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_packet_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      F@_4,
                                                                      F@_5,
                                                                      TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_packet_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_packet_v1_pb(Rest,
                                                                                0,
                                                                                0,
                                                                                F@_1,
                                                                                F@_2,
                                                                                F@_3,
                                                                                F@_4,
                                                                                F@_5,
                                                                                TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_packet_v1_pb(Rest,
                                                                     Key bsr 3,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_packet_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_packet_v1_pb(<<>>,
                                                        0, 0, F@_1, F@_2, F@_3,
                                                        F@_4, F@_5, _) ->
    #blockchain_state_channel_packet_v1_pb{packet = F@_1,
                                           hotspot = F@_2, signature = F@_3,
                                           region = F@_4, hold_time = F@_5}.

d_field_blockchain_state_channel_packet_v1_pb_packet(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_packet(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
d_field_blockchain_state_channel_packet_v1_pb_packet(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, Prev, F@_2, F@_3,
                                                     F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_packet_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             if Prev ==
                                                                    undefined ->
                                                                    NewFValue;
                                                                true ->
                                                                    merge_msg_packet_pb(Prev,
                                                                                        NewFValue,
                                                                                        TrUserData)
                                                             end,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

d_field_blockchain_state_channel_packet_v1_pb_hotspot(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_hotspot(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          TrUserData);
d_field_blockchain_state_channel_packet_v1_pb_hotspot(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, _, F@_3,
                                                      F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             NewFValue,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

d_field_blockchain_state_channel_packet_v1_pb_signature(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_signature(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
d_field_blockchain_state_channel_packet_v1_pb_signature(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2, _,
                                                        F@_4, F@_5,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             NewFValue,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

d_field_blockchain_state_channel_packet_v1_pb_region(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_region(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
d_field_blockchain_state_channel_packet_v1_pb_region(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_helium.Region'(begin
                                                        <<Res:32/signed-native>> =
                                                            <<(X bsl N +
                                                                   Acc):32/unsigned-native>>,
                                                        id(Res, TrUserData)
                                                    end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             NewFValue,
                                                             F@_5,
                                                             TrUserData).

d_field_blockchain_state_channel_packet_v1_pb_hold_time(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_packet_v1_pb_hold_time(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
d_field_blockchain_state_channel_packet_v1_pb_hold_time(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, _,
                                                        TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             NewFValue,
                                                             TrUserData).

skip_varint_blockchain_state_channel_packet_v1_pb(<<1:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData) ->
    skip_varint_blockchain_state_channel_packet_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      TrUserData);
skip_varint_blockchain_state_channel_packet_v1_pb(<<0:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

skip_length_delimited_blockchain_state_channel_packet_v1_pb(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_packet_v1_pb(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData);
skip_length_delimited_blockchain_state_channel_packet_v1_pb(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Rest2,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

skip_group_blockchain_state_channel_packet_v1_pb(Bin,
                                                 FNum, Z2, F@_1, F@_2, F@_3,
                                                 F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Rest,
                                                             0,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

skip_32_blockchain_state_channel_packet_v1_pb(<<_:32,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

skip_64_blockchain_state_channel_packet_v1_pb(<<_:64,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_packet_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             TrUserData).

decode_msg_blockchain_state_channel_offer_v1_pb(Bin,
                                                TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Bin,
                                                            0,
                                                            0,
                                                            id(undefined,
                                                               TrUserData),
                                                            id(<<>>,
                                                               TrUserData),
                                                            id(0, TrUserData),
                                                            id(0, TrUserData),
                                                            id(<<>>,
                                                               TrUserData),
                                                            id(<<>>,
                                                               TrUserData),
                                                            id('US915',
                                                               TrUserData),
                                                            id(false,
                                                               TrUserData),
                                                            TrUserData).

dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<10,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_routing(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<18,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_packet_hash(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<24,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_payload_size(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              F@_8,
                                                              TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<32,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_fcnt(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<42,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_hotspot(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<50,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_signature(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<56,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_region(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<64,
                                                          Rest/binary>>,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    d_field_blockchain_state_channel_offer_v1_pb_req_diff(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(<<>>,
                                                        0, 0, F@_1, F@_2, F@_3,
                                                        F@_4, F@_5, F@_6, F@_7,
                                                        F@_8, _) ->
    #blockchain_state_channel_offer_v1_pb{routing = F@_1,
                                          packet_hash = F@_2,
                                          payload_size = F@_3, fcnt = F@_4,
                                          hotspot = F@_5, signature = F@_6,
                                          region = F@_7, req_diff = F@_8};
dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Other,
                                                        Z1, Z2, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, F@_8,
                                                        TrUserData) ->
    dg_read_field_def_blockchain_state_channel_offer_v1_pb(Other,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           TrUserData).

dg_read_field_def_blockchain_state_channel_offer_v1_pb(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, F@_6, F@_7,
                                                       F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_offer_v1_pb(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           TrUserData);
dg_read_field_def_blockchain_state_channel_offer_v1_pb(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, F@_6, F@_7,
                                                       F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_offer_v1_pb_routing(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 F@_8,
                                                                 TrUserData);
        18 ->
            d_field_blockchain_state_channel_offer_v1_pb_packet_hash(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     F@_6,
                                                                     F@_7,
                                                                     F@_8,
                                                                     TrUserData);
        24 ->
            d_field_blockchain_state_channel_offer_v1_pb_payload_size(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      F@_4,
                                                                      F@_5,
                                                                      F@_6,
                                                                      F@_7,
                                                                      F@_8,
                                                                      TrUserData);
        32 ->
            d_field_blockchain_state_channel_offer_v1_pb_fcnt(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              F@_8,
                                                              TrUserData);
        42 ->
            d_field_blockchain_state_channel_offer_v1_pb_hotspot(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 F@_8,
                                                                 TrUserData);
        50 ->
            d_field_blockchain_state_channel_offer_v1_pb_signature(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   F@_6,
                                                                   F@_7,
                                                                   F@_8,
                                                                   TrUserData);
        56 ->
            d_field_blockchain_state_channel_offer_v1_pb_region(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                F@_8,
                                                                TrUserData);
        64 ->
            d_field_blockchain_state_channel_offer_v1_pb_req_diff(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  F@_6,
                                                                  F@_7,
                                                                  F@_8,
                                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_offer_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     F@_6,
                                                                     F@_7,
                                                                     F@_8,
                                                                     TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_offer_v1_pb(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 F@_8,
                                                                 TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_offer_v1_pb(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               F@_4,
                                                                               F@_5,
                                                                               F@_6,
                                                                               F@_7,
                                                                               F@_8,
                                                                               TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_offer_v1_pb(Rest,
                                                                    Key bsr 3,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_offer_v1_pb(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 F@_8,
                                                                 TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_offer_v1_pb(<<>>,
                                                       0, 0, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, F@_6, F@_7,
                                                       F@_8, _) ->
    #blockchain_state_channel_offer_v1_pb{routing = F@_1,
                                          packet_hash = F@_2,
                                          payload_size = F@_3, fcnt = F@_4,
                                          hotspot = F@_5, signature = F@_6,
                                          region = F@_7, req_diff = F@_8}.

d_field_blockchain_state_channel_offer_v1_pb_routing(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_routing(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_routing(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, Prev, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_information_pb(Bs,
                                                                   TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            if Prev ==
                                                                   undefined ->
                                                                   NewFValue;
                                                               true ->
                                                                   merge_msg_routing_information_pb(Prev,
                                                                                                    NewFValue,
                                                                                                    TrUserData)
                                                            end,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_packet_hash(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5, F@_6,
                                                         F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_packet_hash(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_packet_hash(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, _, F@_3,
                                                         F@_4, F@_5, F@_6, F@_7,
                                                         F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            NewFValue,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_payload_size(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          F@_3, F@_4, F@_5,
                                                          F@_6, F@_7, F@_8,
                                                          TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_payload_size(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              F@_8,
                                                              TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_payload_size(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2, _,
                                                          F@_4, F@_5, F@_6,
                                                          F@_7, F@_8,
                                                          TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            NewFValue,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_fcnt(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, F@_5, F@_6, F@_7, F@_8,
                                                  TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_fcnt(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_fcnt(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3, _,
                                                  F@_5, F@_6, F@_7, F@_8,
                                                  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            NewFValue,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_hotspot(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     F@_8, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_hotspot(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_hotspot(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, _, F@_6, F@_7, F@_8,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            NewFValue,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_signature(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, F@_6, F@_7,
                                                       F@_8, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_signature(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_signature(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, _, F@_7,
                                                       F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            NewFValue,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_region(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    F@_8, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_region(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_region(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, _, F@_8,
                                                    TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_helium.Region'(begin
                                                        <<Res:32/signed-native>> =
                                                            <<(X bsl N +
                                                                   Acc):32/unsigned-native>>,
                                                        id(Res, TrUserData)
                                                    end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            NewFValue,
                                                            F@_8,
                                                            TrUserData).

d_field_blockchain_state_channel_offer_v1_pb_req_diff(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, F@_5, F@_6, F@_7,
                                                      F@_8, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_offer_v1_pb_req_diff(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          TrUserData);
d_field_blockchain_state_channel_offer_v1_pb_req_diff(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, F@_5, F@_6, F@_7, _,
                                                      TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(RestF,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            NewFValue,
                                                            TrUserData).

skip_varint_blockchain_state_channel_offer_v1_pb(<<1:1,
                                                   _:7, Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8,
                                                 TrUserData) ->
    skip_varint_blockchain_state_channel_offer_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     TrUserData);
skip_varint_blockchain_state_channel_offer_v1_pb(<<0:1,
                                                   _:7, Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8,
                                                 TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

skip_length_delimited_blockchain_state_channel_offer_v1_pb(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           F@_6, F@_7, F@_8,
                                                           TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_offer_v1_pb(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               F@_6,
                                                               F@_7,
                                                               F@_8,
                                                               TrUserData);
skip_length_delimited_blockchain_state_channel_offer_v1_pb(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           F@_6, F@_7, F@_8,
                                                           TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Rest2,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

skip_group_blockchain_state_channel_offer_v1_pb(Bin,
                                                FNum, Z2, F@_1, F@_2, F@_3,
                                                F@_4, F@_5, F@_6, F@_7, F@_8,
                                                TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Rest,
                                                            0,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

skip_32_blockchain_state_channel_offer_v1_pb(<<_:32,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8,
                                             TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

skip_64_blockchain_state_channel_offer_v1_pb(<<_:64,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8,
                                             TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_offer_v1_pb(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            TrUserData).

decode_msg_blockchain_state_channel_purchase_v1_pb(Bin,
                                                   TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Bin,
                                                               0,
                                                               0,
                                                               id(undefined,
                                                                  TrUserData),
                                                               id(<<>>,
                                                                  TrUserData),
                                                               id(<<>>,
                                                                  TrUserData),
                                                               id('US915',
                                                                  TrUserData),
                                                               id(undefined,
                                                                  TrUserData),
                                                               TrUserData).

dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(<<10,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData);
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(<<18,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_purchase_v1_pb_hotspot(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(<<26,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData);
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(<<32,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_purchase_v1_pb_region(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(<<42,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(<<>>,
                                                           0, 0, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           _) ->
    #blockchain_state_channel_purchase_v1_pb{sc = F@_1,
                                             hotspot = F@_2, packet_hash = F@_3,
                                             region = F@_4, sc_diff = F@_5};
dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Other,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    dg_read_field_def_blockchain_state_channel_purchase_v1_pb(Other,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              TrUserData).

dg_read_field_def_blockchain_state_channel_purchase_v1_pb(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          F@_3, F@_4, F@_5,
                                                          TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_purchase_v1_pb(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              TrUserData);
dg_read_field_def_blockchain_state_channel_purchase_v1_pb(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          F@_3, F@_4, F@_5,
                                                          TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_purchase_v1_pb_sc(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
        18 ->
            d_field_blockchain_state_channel_purchase_v1_pb_hotspot(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
        26 ->
            d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        TrUserData);
        32 ->
            d_field_blockchain_state_channel_purchase_v1_pb_region(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   TrUserData);
        42 ->
            d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_purchase_v1_pb(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_purchase_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_purchase_v1_pb(Rest,
                                                                                  0,
                                                                                  0,
                                                                                  F@_1,
                                                                                  F@_2,
                                                                                  F@_3,
                                                                                  F@_4,
                                                                                  F@_5,
                                                                                  TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_purchase_v1_pb(Rest,
                                                                       Key bsr
                                                                           3,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_purchase_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_purchase_v1_pb(<<>>,
                                                          0, 0, F@_1, F@_2,
                                                          F@_3, F@_4, F@_5,
                                                          _) ->
    #blockchain_state_channel_purchase_v1_pb{sc = F@_1,
                                             hotspot = F@_2, packet_hash = F@_3,
                                             region = F@_4, sc_diff = F@_5}.

d_field_blockchain_state_channel_purchase_v1_pb_sc(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       TrUserData);
d_field_blockchain_state_channel_purchase_v1_pb_sc(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, Prev, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_v1_pb(Bs,
                                                                           TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               if Prev ==
                                                                      undefined ->
                                                                      NewFValue;
                                                                  true ->
                                                                      merge_msg_blockchain_state_channel_v1_pb(Prev,
                                                                                                               NewFValue,
                                                                                                               TrUserData)
                                                               end,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

d_field_blockchain_state_channel_purchase_v1_pb_hotspot(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_hotspot(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
d_field_blockchain_state_channel_purchase_v1_pb_hotspot(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, _, F@_3,
                                                        F@_4, F@_5,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               NewFValue,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData);
d_field_blockchain_state_channel_purchase_v1_pb_packet_hash(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1, F@_2,
                                                            _, F@_4, F@_5,
                                                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               NewFValue,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

d_field_blockchain_state_channel_purchase_v1_pb_region(<<1:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_region(Rest,
                                                           N + 7,
                                                           X bsl N + Acc,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           TrUserData);
d_field_blockchain_state_channel_purchase_v1_pb_region(<<0:1,
                                                         X:7, Rest/binary>>,
                                                       N, Acc, F@_1, F@_2, F@_3,
                                                       _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_helium.Region'(begin
                                                        <<Res:32/signed-native>> =
                                                            <<(X bsl N +
                                                                   Acc):32/unsigned-native>>,
                                                        id(Res, TrUserData)
                                                    end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               NewFValue,
                                                               F@_5,
                                                               TrUserData).

d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
d_field_blockchain_state_channel_purchase_v1_pb_sc_diff(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, Prev,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_diff_v1_pb(Bs,
                                                                                TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(RestF,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               if Prev ==
                                                                      undefined ->
                                                                      NewFValue;
                                                                  true ->
                                                                      merge_msg_blockchain_state_channel_diff_v1_pb(Prev,
                                                                                                                    NewFValue,
                                                                                                                    TrUserData)
                                                               end,
                                                               TrUserData).

skip_varint_blockchain_state_channel_purchase_v1_pb(<<1:1,
                                                      _:7, Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, TrUserData) ->
    skip_varint_blockchain_state_channel_purchase_v1_pb(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        TrUserData);
skip_varint_blockchain_state_channel_purchase_v1_pb(<<0:1,
                                                      _:7, Rest/binary>>,
                                                    Z1, Z2, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

skip_length_delimited_blockchain_state_channel_purchase_v1_pb(<<1:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, F@_3, F@_4,
                                                              F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_purchase_v1_pb(Rest,
                                                                  N + 7,
                                                                  X bsl N + Acc,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  TrUserData);
skip_length_delimited_blockchain_state_channel_purchase_v1_pb(<<0:1,
                                                                X:7,
                                                                Rest/binary>>,
                                                              N, Acc, F@_1,
                                                              F@_2, F@_3, F@_4,
                                                              F@_5,
                                                              TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Rest2,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

skip_group_blockchain_state_channel_purchase_v1_pb(Bin,
                                                   FNum, Z2, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Rest,
                                                               0,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

skip_32_blockchain_state_channel_purchase_v1_pb(<<_:32,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

skip_64_blockchain_state_channel_purchase_v1_pb(<<_:64,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v1_pb(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

decode_msg_blockchain_state_channel_diff_v1_pb(Bin,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Bin,
                                                           0,
                                                           0,
                                                           id(<<>>, TrUserData),
                                                           id(0, TrUserData),
                                                           id(<<>>, TrUserData),
                                                           id([], TrUserData),
                                                           TrUserData).

dfp_read_field_def_blockchain_state_channel_diff_v1_pb(<<10,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1, F@_2, F@_3,
                                                       F@_4, TrUserData) ->
    d_field_blockchain_state_channel_diff_v1_pb_id(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(<<16,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1, F@_2, F@_3,
                                                       F@_4, TrUserData) ->
    d_field_blockchain_state_channel_diff_v1_pb_add_nonce(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(<<26,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1, F@_2, F@_3,
                                                       F@_4, TrUserData) ->
    d_field_blockchain_state_channel_diff_v1_pb_signature(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(<<34,
                                                         Rest/binary>>,
                                                       Z1, Z2, F@_1, F@_2, F@_3,
                                                       F@_4, TrUserData) ->
    d_field_blockchain_state_channel_diff_v1_pb_diffs(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(<<>>,
                                                       0, 0, F@_1, F@_2, F@_3,
                                                       R1, TrUserData) ->
    #blockchain_state_channel_diff_v1_pb{id = F@_1,
                                         add_nonce = F@_2, signature = F@_3,
                                         diffs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Other,
                                                       Z1, Z2, F@_1, F@_2, F@_3,
                                                       F@_4, TrUserData) ->
    dg_read_field_def_blockchain_state_channel_diff_v1_pb(Other,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData).

dg_read_field_def_blockchain_state_channel_diff_v1_pb(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_v1_pb(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
dg_read_field_def_blockchain_state_channel_diff_v1_pb(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_diff_v1_pb_id(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData);
        16 ->
            d_field_blockchain_state_channel_diff_v1_pb_add_nonce(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  TrUserData);
        26 ->
            d_field_blockchain_state_channel_diff_v1_pb_signature(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  TrUserData);
        34 ->
            d_field_blockchain_state_channel_diff_v1_pb_diffs(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_diff_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_v1_pb(Rest,
                                                                              0,
                                                                              0,
                                                                              F@_1,
                                                                              F@_2,
                                                                              F@_3,
                                                                              F@_4,
                                                                              TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_diff_v1_pb(Rest,
                                                                   Key bsr 3,
                                                                   0,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_diff_v1_pb(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_v1_pb(<<>>,
                                                      0, 0, F@_1, F@_2, F@_3,
                                                      R1, TrUserData) ->
    #blockchain_state_channel_diff_v1_pb{id = F@_1,
                                         add_nonce = F@_2, signature = F@_3,
                                         diffs = lists_reverse(R1, TrUserData)}.

d_field_blockchain_state_channel_diff_v1_pb_id(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_id(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
d_field_blockchain_state_channel_diff_v1_pb_id(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, _, F@_2, F@_3, F@_4,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           NewFValue,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

d_field_blockchain_state_channel_diff_v1_pb_add_nonce(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_add_nonce(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
d_field_blockchain_state_channel_diff_v1_pb_add_nonce(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, _, F@_3,
                                                      F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           NewFValue,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

d_field_blockchain_state_channel_diff_v1_pb_signature(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, F@_3,
                                                      F@_4, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_signature(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
d_field_blockchain_state_channel_diff_v1_pb_signature(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, F@_2, _,
                                                      F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           NewFValue,
                                                           F@_4,
                                                           TrUserData).

d_field_blockchain_state_channel_diff_v1_pb_diffs(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  F@_4, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_v1_pb_diffs(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
d_field_blockchain_state_channel_diff_v1_pb_diffs(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_diff_entry_v1_pb(Bs,
                                                                                      TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(RestF,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           cons(NewFValue,
                                                                Prev,
                                                                TrUserData),
                                                           TrUserData).

skip_varint_blockchain_state_channel_diff_v1_pb(<<1:1,
                                                  _:7, Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData) ->
    skip_varint_blockchain_state_channel_diff_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
skip_varint_blockchain_state_channel_diff_v1_pb(<<0:1,
                                                  _:7, Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

skip_length_delimited_blockchain_state_channel_diff_v1_pb(<<1:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          F@_3, F@_4,
                                                          TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_v1_pb(Rest,
                                                              N + 7,
                                                              X bsl N + Acc,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              TrUserData);
skip_length_delimited_blockchain_state_channel_diff_v1_pb(<<0:1,
                                                            X:7, Rest/binary>>,
                                                          N, Acc, F@_1, F@_2,
                                                          F@_3, F@_4,
                                                          TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Rest2,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

skip_group_blockchain_state_channel_diff_v1_pb(Bin,
                                               FNum, Z2, F@_1, F@_2, F@_3, F@_4,
                                               TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Rest,
                                                           0,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

skip_32_blockchain_state_channel_diff_v1_pb(<<_:32,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

skip_64_blockchain_state_channel_diff_v1_pb(<<_:64,
                                              Rest/binary>>,
                                            Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_v1_pb(Rest,
                                                           Z1,
                                                           Z2,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData).

decode_msg_blockchain_state_channel_diff_entry_v1_pb(Bin,
                                                     TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Bin,
                                                                 0,
                                                                 0,
                                                                 id(undefined,
                                                                    TrUserData),
                                                                 TrUserData).

dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(<<10,
                                                               Rest/binary>>,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_append(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(<<18,
                                                               Rest/binary>>,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_add(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(<<>>,
                                                             0, 0, F@_1, _) ->
    #blockchain_state_channel_diff_entry_v1_pb{entry =
                                                   F@_1};
dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Other,
                                                             Z1, Z2, F@_1,
                                                             TrUserData) ->
    dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Other,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                TrUserData).

dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                TrUserData);
dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_diff_entry_v1_pb_append(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     TrUserData);
        18 ->
            d_field_blockchain_state_channel_diff_entry_v1_pb_add(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                                    0,
                                                                                    0,
                                                                                    F@_1,
                                                                                    TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                         Key bsr
                                                                             3,
                                                                         0,
                                                                         F@_1,
                                                                         TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_entry_v1_pb(<<>>,
                                                            0, 0, F@_1, _) ->
    #blockchain_state_channel_diff_entry_v1_pb{entry =
                                                   F@_1}.

d_field_blockchain_state_channel_diff_entry_v1_pb_append(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_append(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             TrUserData);
d_field_blockchain_state_channel_diff_entry_v1_pb_append(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, Prev,
                                                         TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_diff_append_summary_v1_pb(Bs,
                                                                                               TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(RestF,
                                                                 0,
                                                                 0,
                                                                 case Prev of
                                                                     undefined ->
                                                                         id({append,
                                                                             NewFValue},
                                                                            TrUserData);
                                                                     {append,
                                                                      MVPrev} ->
                                                                         id({append,
                                                                             merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(MVPrev,
                                                                                                                                          NewFValue,
                                                                                                                                          TrUserData)},
                                                                            TrUserData);
                                                                     _ ->
                                                                         id({append,
                                                                             NewFValue},
                                                                            TrUserData)
                                                                 end,
                                                                 TrUserData).

d_field_blockchain_state_channel_diff_entry_v1_pb_add(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_entry_v1_pb_add(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          TrUserData);
d_field_blockchain_state_channel_diff_entry_v1_pb_add(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, Prev,
                                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_diff_update_summary_v1_pb(Bs,
                                                                                               TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(RestF,
                                                                 0,
                                                                 0,
                                                                 case Prev of
                                                                     undefined ->
                                                                         id({add,
                                                                             NewFValue},
                                                                            TrUserData);
                                                                     {add,
                                                                      MVPrev} ->
                                                                         id({add,
                                                                             merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(MVPrev,
                                                                                                                                          NewFValue,
                                                                                                                                          TrUserData)},
                                                                            TrUserData);
                                                                     _ ->
                                                                         id({add,
                                                                             NewFValue},
                                                                            TrUserData)
                                                                 end,
                                                                 TrUserData).

skip_varint_blockchain_state_channel_diff_entry_v1_pb(<<1:1,
                                                        _:7, Rest/binary>>,
                                                      Z1, Z2, F@_1,
                                                      TrUserData) ->
    skip_varint_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
skip_varint_blockchain_state_channel_diff_entry_v1_pb(<<0:1,
                                                        _:7, Rest/binary>>,
                                                      Z1, Z2, F@_1,
                                                      TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    TrUserData);
skip_length_delimited_blockchain_state_channel_diff_entry_v1_pb(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Rest2,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData).

skip_group_blockchain_state_channel_diff_entry_v1_pb(Bin,
                                                     FNum, Z2, F@_1,
                                                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                 0,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_32_blockchain_state_channel_diff_entry_v1_pb(<<_:32,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

skip_64_blockchain_state_channel_diff_entry_v1_pb(<<_:64,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_entry_v1_pb(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 TrUserData).

decode_msg_blockchain_state_channel_diff_append_summary_v1_pb(Bin,
                                                              TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Bin,
                                                                          0,
                                                                          0,
                                                                          id(<<>>,
                                                                             TrUserData),
                                                                          id(0,
                                                                             TrUserData),
                                                                          id(0,
                                                                             TrUserData),
                                                                          TrUserData).

dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<10,
                                                                        Rest/binary>>,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(Rest,
                                                                                Z1,
                                                                                Z2,
                                                                                F@_1,
                                                                                F@_2,
                                                                                F@_3,
                                                                                TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<16,
                                                                        Rest/binary>>,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(Rest,
                                                                           Z1,
                                                                           Z2,
                                                                           F@_1,
                                                                           F@_2,
                                                                           F@_3,
                                                                           TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<24,
                                                                        Rest/binary>>,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(Rest,
                                                                       Z1,
                                                                       Z2,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<>>,
                                                                      0, 0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      _) ->
    #blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                            = F@_1,
                                                        num_packets = F@_2,
                                                        num_dcs = F@_3};
dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Other,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Other,
                                                                         Z1,
                                                                         Z2,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData).

dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<1:1,
                                                                       X:7,
                                                                       Rest/binary>>,
                                                                     N, Acc,
                                                                     F@_1, F@_2,
                                                                     F@_3,
                                                                     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                         N + 7,
                                                                         X bsl N
                                                                             +
                                                                             Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData);
dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<0:1,
                                                                       X:7,
                                                                       Rest/binary>>,
                                                                     N, Acc,
                                                                     F@_1, F@_2,
                                                                     F@_3,
                                                                     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(Rest,
                                                                                        0,
                                                                                        0,
                                                                                        F@_1,
                                                                                        F@_2,
                                                                                        F@_3,
                                                                                        TrUserData);
        16 ->
            d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   F@_3,
                                                                                   TrUserData);
        24 ->
            d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   F@_3,
                                                                                   TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                                             0,
                                                                                             0,
                                                                                             F@_1,
                                                                                             F@_2,
                                                                                             F@_3,
                                                                                             TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                                  Key
                                                                                      bsr
                                                                                      3,
                                                                                  0,
                                                                                  F@_1,
                                                                                  F@_2,
                                                                                  F@_3,
                                                                                  TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(<<>>,
                                                                     0, 0, F@_1,
                                                                     F@_2, F@_3,
                                                                     _) ->
    #blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                            = F@_1,
                                                        num_packets = F@_2,
                                                        num_dcs = F@_3}.

d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(<<1:1,
                                                                              X:7,
                                                                              Rest/binary>>,
                                                                            N,
                                                                            Acc,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(Rest,
                                                                                N
                                                                                    +
                                                                                    7,
                                                                                X
                                                                                    bsl
                                                                                    N
                                                                                    +
                                                                                    Acc,
                                                                                F@_1,
                                                                                F@_2,
                                                                                F@_3,
                                                                                TrUserData);
d_field_blockchain_state_channel_diff_append_summary_v1_pb_client_pubkeybin(<<0:1,
                                                                              X:7,
                                                                              Rest/binary>>,
                                                                            N,
                                                                            Acc,
                                                                            _,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(RestF,
                                                                          0,
                                                                          0,
                                                                          NewFValue,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(<<1:1,
                                                                         X:7,
                                                                         Rest/binary>>,
                                                                       N, Acc,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(Rest,
                                                                           N +
                                                                               7,
                                                                           X bsl
                                                                               N
                                                                               +
                                                                               Acc,
                                                                           F@_1,
                                                                           F@_2,
                                                                           F@_3,
                                                                           TrUserData);
d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_packets(<<0:1,
                                                                         X:7,
                                                                         Rest/binary>>,
                                                                       N, Acc,
                                                                       F@_1, _,
                                                                       F@_3,
                                                                       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(RestF,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          NewFValue,
                                                                          F@_3,
                                                                          TrUserData).

d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(<<1:1,
                                                                     X:7,
                                                                     Rest/binary>>,
                                                                   N, Acc, F@_1,
                                                                   F@_2, F@_3,
                                                                   TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(Rest,
                                                                       N + 7,
                                                                       X bsl N +
                                                                           Acc,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData);
d_field_blockchain_state_channel_diff_append_summary_v1_pb_num_dcs(<<0:1,
                                                                     X:7,
                                                                     Rest/binary>>,
                                                                   N, Acc, F@_1,
                                                                   F@_2, _,
                                                                   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(RestF,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          NewFValue,
                                                                          TrUserData).

skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(<<1:1,
                                                                 _:7,
                                                                 Rest/binary>>,
                                                               Z1, Z2, F@_1,
                                                               F@_2, F@_3,
                                                               TrUserData) ->
    skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                   Z1,
                                                                   Z2,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
skip_varint_blockchain_state_channel_diff_append_summary_v1_pb(<<0:1,
                                                                 _:7,
                                                                 Rest/binary>>,
                                                               Z1, Z2, F@_1,
                                                               F@_2, F@_3,
                                                               TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                          Z1,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(<<1:1,
                                                                           X:7,
                                                                           Rest/binary>>,
                                                                         N, Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                             N +
                                                                                 7,
                                                                             X
                                                                                 bsl
                                                                                 N
                                                                                 +
                                                                                 Acc,
                                                                             F@_1,
                                                                             F@_2,
                                                                             F@_3,
                                                                             TrUserData);
skip_length_delimited_blockchain_state_channel_diff_append_summary_v1_pb(<<0:1,
                                                                           X:7,
                                                                           Rest/binary>>,
                                                                         N, Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Rest2,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_group_blockchain_state_channel_diff_append_summary_v1_pb(Bin,
                                                              FNum, Z2, F@_1,
                                                              F@_2, F@_3,
                                                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                          0,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_32_blockchain_state_channel_diff_append_summary_v1_pb(<<_:32,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                          Z1,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_64_blockchain_state_channel_diff_append_summary_v1_pb(<<_:64,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_append_summary_v1_pb(Rest,
                                                                          Z1,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

decode_msg_blockchain_state_channel_diff_update_summary_v1_pb(Bin,
                                                              TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Bin,
                                                                          0,
                                                                          0,
                                                                          id(0,
                                                                             TrUserData),
                                                                          id(0,
                                                                             TrUserData),
                                                                          id(0,
                                                                             TrUserData),
                                                                          TrUserData).

dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<8,
                                                                        Rest/binary>>,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(Rest,
                                                                            Z1,
                                                                            Z2,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<16,
                                                                        Rest/binary>>,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(Rest,
                                                                           Z1,
                                                                           Z2,
                                                                           F@_1,
                                                                           F@_2,
                                                                           F@_3,
                                                                           TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<24,
                                                                        Rest/binary>>,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(Rest,
                                                                       Z1,
                                                                       Z2,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData);
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<>>,
                                                                      0, 0,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      _) ->
    #blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                            = F@_1,
                                                        add_packets = F@_2,
                                                        add_dcs = F@_3};
dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Other,
                                                                      Z1, Z2,
                                                                      F@_1,
                                                                      F@_2,
                                                                      F@_3,
                                                                      TrUserData) ->
    dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Other,
                                                                         Z1,
                                                                         Z2,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData).

dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<1:1,
                                                                       X:7,
                                                                       Rest/binary>>,
                                                                     N, Acc,
                                                                     F@_1, F@_2,
                                                                     F@_3,
                                                                     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                         N + 7,
                                                                         X bsl N
                                                                             +
                                                                             Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData);
dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<0:1,
                                                                       X:7,
                                                                       Rest/binary>>,
                                                                     N, Acc,
                                                                     F@_1, F@_2,
                                                                     F@_3,
                                                                     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(Rest,
                                                                                    0,
                                                                                    0,
                                                                                    F@_1,
                                                                                    F@_2,
                                                                                    F@_3,
                                                                                    TrUserData);
        16 ->
            d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   F@_3,
                                                                                   TrUserData);
        24 ->
            d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   F@_3,
                                                                                   TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                                             0,
                                                                                             0,
                                                                                             F@_1,
                                                                                             F@_2,
                                                                                             F@_3,
                                                                                             TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                                  Key
                                                                                      bsr
                                                                                      3,
                                                                                  0,
                                                                                  F@_1,
                                                                                  F@_2,
                                                                                  F@_3,
                                                                                  TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                               0,
                                                                               0,
                                                                               F@_1,
                                                                               F@_2,
                                                                               F@_3,
                                                                               TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(<<>>,
                                                                     0, 0, F@_1,
                                                                     F@_2, F@_3,
                                                                     _) ->
    #blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                            = F@_1,
                                                        add_packets = F@_2,
                                                        add_dcs = F@_3}.

d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(<<1:1,
                                                                          X:7,
                                                                          Rest/binary>>,
                                                                        N, Acc,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(Rest,
                                                                            N +
                                                                                7,
                                                                            X
                                                                                bsl
                                                                                N
                                                                                +
                                                                                Acc,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData);
d_field_blockchain_state_channel_diff_update_summary_v1_pb_client_index(<<0:1,
                                                                          X:7,
                                                                          Rest/binary>>,
                                                                        N, Acc,
                                                                        _, F@_2,
                                                                        F@_3,
                                                                        TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(RestF,
                                                                          0,
                                                                          0,
                                                                          NewFValue,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(<<1:1,
                                                                         X:7,
                                                                         Rest/binary>>,
                                                                       N, Acc,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(Rest,
                                                                           N +
                                                                               7,
                                                                           X bsl
                                                                               N
                                                                               +
                                                                               Acc,
                                                                           F@_1,
                                                                           F@_2,
                                                                           F@_3,
                                                                           TrUserData);
d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_packets(<<0:1,
                                                                         X:7,
                                                                         Rest/binary>>,
                                                                       N, Acc,
                                                                       F@_1, _,
                                                                       F@_3,
                                                                       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(RestF,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          NewFValue,
                                                                          F@_3,
                                                                          TrUserData).

d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(<<1:1,
                                                                     X:7,
                                                                     Rest/binary>>,
                                                                   N, Acc, F@_1,
                                                                   F@_2, F@_3,
                                                                   TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(Rest,
                                                                       N + 7,
                                                                       X bsl N +
                                                                           Acc,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       TrUserData);
d_field_blockchain_state_channel_diff_update_summary_v1_pb_add_dcs(<<0:1,
                                                                     X:7,
                                                                     Rest/binary>>,
                                                                   N, Acc, F@_1,
                                                                   F@_2, _,
                                                                   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(RestF,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          NewFValue,
                                                                          TrUserData).

skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(<<1:1,
                                                                 _:7,
                                                                 Rest/binary>>,
                                                               Z1, Z2, F@_1,
                                                               F@_2, F@_3,
                                                               TrUserData) ->
    skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                   Z1,
                                                                   Z2,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   TrUserData);
skip_varint_blockchain_state_channel_diff_update_summary_v1_pb(<<0:1,
                                                                 _:7,
                                                                 Rest/binary>>,
                                                               Z1, Z2, F@_1,
                                                               F@_2, F@_3,
                                                               TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                          Z1,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(<<1:1,
                                                                           X:7,
                                                                           Rest/binary>>,
                                                                         N, Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                             N +
                                                                                 7,
                                                                             X
                                                                                 bsl
                                                                                 N
                                                                                 +
                                                                                 Acc,
                                                                             F@_1,
                                                                             F@_2,
                                                                             F@_3,
                                                                             TrUserData);
skip_length_delimited_blockchain_state_channel_diff_update_summary_v1_pb(<<0:1,
                                                                           X:7,
                                                                           Rest/binary>>,
                                                                         N, Acc,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Rest2,
                                                                          0,
                                                                          0,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_group_blockchain_state_channel_diff_update_summary_v1_pb(Bin,
                                                              FNum, Z2, F@_1,
                                                              F@_2, F@_3,
                                                              TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                          0,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_32_blockchain_state_channel_diff_update_summary_v1_pb(<<_:32,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                          Z1,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

skip_64_blockchain_state_channel_diff_update_summary_v1_pb(<<_:64,
                                                             Rest/binary>>,
                                                           Z1, Z2, F@_1, F@_2,
                                                           F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_diff_update_summary_v1_pb(Rest,
                                                                          Z1,
                                                                          Z2,
                                                                          F@_1,
                                                                          F@_2,
                                                                          F@_3,
                                                                          TrUserData).

decode_msg_blockchain_state_channel_banner_v1_pb(Bin,
                                                 TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Bin,
                                                             0,
                                                             0,
                                                             id(undefined,
                                                                TrUserData),
                                                             TrUserData).

dfp_read_field_def_blockchain_state_channel_banner_v1_pb(<<10,
                                                           Rest/binary>>,
                                                         Z1, Z2, F@_1,
                                                         TrUserData) ->
    d_field_blockchain_state_channel_banner_v1_pb_sc(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData);
dfp_read_field_def_blockchain_state_channel_banner_v1_pb(<<>>,
                                                         0, 0, F@_1, _) ->
    #blockchain_state_channel_banner_v1_pb{sc = F@_1};
dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Other,
                                                         Z1, Z2, F@_1,
                                                         TrUserData) ->
    dg_read_field_def_blockchain_state_channel_banner_v1_pb(Other,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            TrUserData).

dg_read_field_def_blockchain_state_channel_banner_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_banner_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
dg_read_field_def_blockchain_state_channel_banner_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_banner_v1_pb_sc(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_banner_v1_pb(Rest,
                                                                      0,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_banner_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_banner_v1_pb(Rest,
                                                                                0,
                                                                                0,
                                                                                F@_1,
                                                                                TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_banner_v1_pb(Rest,
                                                                     Key bsr 3,
                                                                     0,
                                                                     F@_1,
                                                                     TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_banner_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_banner_v1_pb(<<>>,
                                                        0, 0, F@_1, _) ->
    #blockchain_state_channel_banner_v1_pb{sc = F@_1}.

d_field_blockchain_state_channel_banner_v1_pb_sc(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_banner_v1_pb_sc(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
d_field_blockchain_state_channel_banner_v1_pb_sc(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_v1_pb(Bs,
                                                                           TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(RestF,
                                                             0,
                                                             0,
                                                             if Prev ==
                                                                    undefined ->
                                                                    NewFValue;
                                                                true ->
                                                                    merge_msg_blockchain_state_channel_v1_pb(Prev,
                                                                                                             NewFValue,
                                                                                                             TrUserData)
                                                             end,
                                                             TrUserData).

skip_varint_blockchain_state_channel_banner_v1_pb(<<1:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_blockchain_state_channel_banner_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData);
skip_varint_blockchain_state_channel_banner_v1_pb(<<0:1,
                                                    _:7, Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

skip_length_delimited_blockchain_state_channel_banner_v1_pb(<<1:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_banner_v1_pb(Rest,
                                                                N + 7,
                                                                X bsl N + Acc,
                                                                F@_1,
                                                                TrUserData);
skip_length_delimited_blockchain_state_channel_banner_v1_pb(<<0:1,
                                                              X:7,
                                                              Rest/binary>>,
                                                            N, Acc, F@_1,
                                                            TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Rest2,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             TrUserData).

skip_group_blockchain_state_channel_banner_v1_pb(Bin,
                                                 FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Rest,
                                                             0,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

skip_32_blockchain_state_channel_banner_v1_pb(<<_:32,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

skip_64_blockchain_state_channel_banner_v1_pb(<<_:64,
                                                Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_banner_v1_pb(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

decode_msg_blockchain_state_channel_rejection_v1_pb(Bin,
                                                    TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Bin,
                                                                0,
                                                                0,
                                                                id(0,
                                                                   TrUserData),
                                                                id(<<>>,
                                                                   TrUserData),
                                                                TrUserData).

dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(<<8,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            TrUserData) ->
    d_field_blockchain_state_channel_rejection_v1_pb_reject(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(<<18,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            TrUserData) ->
    d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 F@_2,
                                                                 TrUserData);
dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(<<>>,
                                                            0, 0, F@_1, F@_2,
                                                            _) ->
    #blockchain_state_channel_rejection_v1_pb{reject = F@_1,
                                              packet_hash = F@_2};
dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Other,
                                                            Z1, Z2, F@_1, F@_2,
                                                            TrUserData) ->
    dg_read_field_def_blockchain_state_channel_rejection_v1_pb(Other,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData).

dg_read_field_def_blockchain_state_channel_rejection_v1_pb(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_rejection_v1_pb(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               TrUserData);
dg_read_field_def_blockchain_state_channel_rejection_v1_pb(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_rejection_v1_pb_reject(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    TrUserData);
        18 ->
            d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                        Key bsr
                                                                            3,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_rejection_v1_pb(<<>>,
                                                           0, 0, F@_1, F@_2,
                                                           _) ->
    #blockchain_state_channel_rejection_v1_pb{reject = F@_1,
                                              packet_hash = F@_2}.

d_field_blockchain_state_channel_rejection_v1_pb_reject(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_rejection_v1_pb_reject(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            TrUserData);
d_field_blockchain_state_channel_rejection_v1_pb_reject(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, _, F@_2,
                                                        TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                NewFValue,
                                                                F@_2,
                                                                TrUserData).

d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 F@_2,
                                                                 TrUserData);
d_field_blockchain_state_channel_rejection_v1_pb_packet_hash(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, _,
                                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                NewFValue,
                                                                TrUserData).

skip_varint_blockchain_state_channel_rejection_v1_pb(<<1:1,
                                                       _:7, Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2,
                                                     TrUserData) ->
    skip_varint_blockchain_state_channel_rejection_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
skip_varint_blockchain_state_channel_rejection_v1_pb(<<0:1,
                                                       _:7, Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2,
                                                     TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_length_delimited_blockchain_state_channel_rejection_v1_pb(<<1:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                   N + 7,
                                                                   X bsl N +
                                                                       Acc,
                                                                   F@_1,
                                                                   F@_2,
                                                                   TrUserData);
skip_length_delimited_blockchain_state_channel_rejection_v1_pb(<<0:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2,
                                                               TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Rest2,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_group_blockchain_state_channel_rejection_v1_pb(Bin,
                                                    FNum, Z2, F@_1, F@_2,
                                                    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                0,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_32_blockchain_state_channel_rejection_v1_pb(<<_:32,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2,
                                                 TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

skip_64_blockchain_state_channel_rejection_v1_pb(<<_:64,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2,
                                                 TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v1_pb(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                TrUserData).

decode_msg_blockchain_state_channel_message_v1_pb(Bin,
                                                  TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(Bin,
                                                              0,
                                                              0,
                                                              id(undefined,
                                                                 TrUserData),
                                                              TrUserData).

dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<18,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_blockchain_state_channel_message_v1_pb_response(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<34,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_blockchain_state_channel_message_v1_pb_packet(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<42,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_blockchain_state_channel_message_v1_pb_offer(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData);
dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<50,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_blockchain_state_channel_message_v1_pb_purchase(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            TrUserData);
dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<58,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_blockchain_state_channel_message_v1_pb_banner(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<66,
                                                            Rest/binary>>,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    d_field_blockchain_state_channel_message_v1_pb_reject(Rest,
                                                          Z1,
                                                          Z2,
                                                          F@_1,
                                                          TrUserData);
dfp_read_field_def_blockchain_state_channel_message_v1_pb(<<>>,
                                                          0, 0, F@_1, _) ->
    #blockchain_state_channel_message_v1_pb{msg = F@_1};
dfp_read_field_def_blockchain_state_channel_message_v1_pb(Other,
                                                          Z1, Z2, F@_1,
                                                          TrUserData) ->
    dg_read_field_def_blockchain_state_channel_message_v1_pb(Other,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             TrUserData).

dg_read_field_def_blockchain_state_channel_message_v1_pb(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_message_v1_pb(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             TrUserData);
dg_read_field_def_blockchain_state_channel_message_v1_pb(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1,
                                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        18 ->
            d_field_blockchain_state_channel_message_v1_pb_response(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
        34 ->
            d_field_blockchain_state_channel_message_v1_pb_packet(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
        42 ->
            d_field_blockchain_state_channel_message_v1_pb_offer(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
        50 ->
            d_field_blockchain_state_channel_message_v1_pb_purchase(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    TrUserData);
        58 ->
            d_field_blockchain_state_channel_message_v1_pb_banner(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
        66 ->
            d_field_blockchain_state_channel_message_v1_pb_reject(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_message_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       TrUserData);
                1 ->
                    skip_64_blockchain_state_channel_message_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData);
                2 ->
                    skip_length_delimited_blockchain_state_channel_message_v1_pb(Rest,
                                                                                 0,
                                                                                 0,
                                                                                 F@_1,
                                                                                 TrUserData);
                3 ->
                    skip_group_blockchain_state_channel_message_v1_pb(Rest,
                                                                      Key bsr 3,
                                                                      0,
                                                                      F@_1,
                                                                      TrUserData);
                5 ->
                    skip_32_blockchain_state_channel_message_v1_pb(Rest,
                                                                   0,
                                                                   0,
                                                                   F@_1,
                                                                   TrUserData)
            end
    end;
dg_read_field_def_blockchain_state_channel_message_v1_pb(<<>>,
                                                         0, 0, F@_1, _) ->
    #blockchain_state_channel_message_v1_pb{msg = F@_1}.

d_field_blockchain_state_channel_message_v1_pb_response(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_response(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
d_field_blockchain_state_channel_message_v1_pb_response(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, Prev,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_response_v1_pb(Bs,
                                                                                    TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              case Prev of
                                                                  undefined ->
                                                                      id({response,
                                                                          NewFValue},
                                                                         TrUserData);
                                                                  {response,
                                                                   MVPrev} ->
                                                                      id({response,
                                                                          merge_msg_blockchain_state_channel_response_v1_pb(MVPrev,
                                                                                                                            NewFValue,
                                                                                                                            TrUserData)},
                                                                         TrUserData);
                                                                  _ ->
                                                                      id({response,
                                                                          NewFValue},
                                                                         TrUserData)
                                                              end,
                                                              TrUserData).

d_field_blockchain_state_channel_message_v1_pb_packet(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_packet(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          TrUserData);
d_field_blockchain_state_channel_message_v1_pb_packet(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, Prev,
                                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_packet_v1_pb(Bs,
                                                                                  TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              case Prev of
                                                                  undefined ->
                                                                      id({packet,
                                                                          NewFValue},
                                                                         TrUserData);
                                                                  {packet,
                                                                   MVPrev} ->
                                                                      id({packet,
                                                                          merge_msg_blockchain_state_channel_packet_v1_pb(MVPrev,
                                                                                                                          NewFValue,
                                                                                                                          TrUserData)},
                                                                         TrUserData);
                                                                  _ ->
                                                                      id({packet,
                                                                          NewFValue},
                                                                         TrUserData)
                                                              end,
                                                              TrUserData).

d_field_blockchain_state_channel_message_v1_pb_offer(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_offer(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         TrUserData);
d_field_blockchain_state_channel_message_v1_pb_offer(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, Prev,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_offer_v1_pb(Bs,
                                                                                 TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              case Prev of
                                                                  undefined ->
                                                                      id({offer,
                                                                          NewFValue},
                                                                         TrUserData);
                                                                  {offer,
                                                                   MVPrev} ->
                                                                      id({offer,
                                                                          merge_msg_blockchain_state_channel_offer_v1_pb(MVPrev,
                                                                                                                         NewFValue,
                                                                                                                         TrUserData)},
                                                                         TrUserData);
                                                                  _ ->
                                                                      id({offer,
                                                                          NewFValue},
                                                                         TrUserData)
                                                              end,
                                                              TrUserData).

d_field_blockchain_state_channel_message_v1_pb_purchase(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_purchase(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
d_field_blockchain_state_channel_message_v1_pb_purchase(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, Prev,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_purchase_v1_pb(Bs,
                                                                                    TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              case Prev of
                                                                  undefined ->
                                                                      id({purchase,
                                                                          NewFValue},
                                                                         TrUserData);
                                                                  {purchase,
                                                                   MVPrev} ->
                                                                      id({purchase,
                                                                          merge_msg_blockchain_state_channel_purchase_v1_pb(MVPrev,
                                                                                                                            NewFValue,
                                                                                                                            TrUserData)},
                                                                         TrUserData);
                                                                  _ ->
                                                                      id({purchase,
                                                                          NewFValue},
                                                                         TrUserData)
                                                              end,
                                                              TrUserData).

d_field_blockchain_state_channel_message_v1_pb_banner(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_banner(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          TrUserData);
d_field_blockchain_state_channel_message_v1_pb_banner(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, Prev,
                                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_banner_v1_pb(Bs,
                                                                                  TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              case Prev of
                                                                  undefined ->
                                                                      id({banner,
                                                                          NewFValue},
                                                                         TrUserData);
                                                                  {banner,
                                                                   MVPrev} ->
                                                                      id({banner,
                                                                          merge_msg_blockchain_state_channel_banner_v1_pb(MVPrev,
                                                                                                                          NewFValue,
                                                                                                                          TrUserData)},
                                                                         TrUserData);
                                                                  _ ->
                                                                      id({banner,
                                                                          NewFValue},
                                                                         TrUserData)
                                                              end,
                                                              TrUserData).

d_field_blockchain_state_channel_message_v1_pb_reject(<<1:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_state_channel_message_v1_pb_reject(Rest,
                                                          N + 7,
                                                          X bsl N + Acc,
                                                          F@_1,
                                                          TrUserData);
d_field_blockchain_state_channel_message_v1_pb_reject(<<0:1,
                                                        X:7, Rest/binary>>,
                                                      N, Acc, Prev,
                                                      TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_rejection_v1_pb(Bs,
                                                                                     TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(RestF,
                                                              0,
                                                              0,
                                                              case Prev of
                                                                  undefined ->
                                                                      id({reject,
                                                                          NewFValue},
                                                                         TrUserData);
                                                                  {reject,
                                                                   MVPrev} ->
                                                                      id({reject,
                                                                          merge_msg_blockchain_state_channel_rejection_v1_pb(MVPrev,
                                                                                                                             NewFValue,
                                                                                                                             TrUserData)},
                                                                         TrUserData);
                                                                  _ ->
                                                                      id({reject,
                                                                          NewFValue},
                                                                         TrUserData)
                                                              end,
                                                              TrUserData).

skip_varint_blockchain_state_channel_message_v1_pb(<<1:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_blockchain_state_channel_message_v1_pb(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       TrUserData);
skip_varint_blockchain_state_channel_message_v1_pb(<<0:1,
                                                     _:7, Rest/binary>>,
                                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_length_delimited_blockchain_state_channel_message_v1_pb(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1,
                                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_state_channel_message_v1_pb(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 TrUserData);
skip_length_delimited_blockchain_state_channel_message_v1_pb(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1,
                                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(Rest2,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData).

skip_group_blockchain_state_channel_message_v1_pb(Bin,
                                                  FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(Rest,
                                                              0,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_32_blockchain_state_channel_message_v1_pb(<<_:32,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

skip_64_blockchain_state_channel_message_v1_pb(<<_:64,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_state_channel_message_v1_pb(Rest,
                                                              Z1,
                                                              Z2,
                                                              F@_1,
                                                              TrUserData).

decode_msg_eui_pb(Bin, TrUserData) ->
    dfp_read_field_def_eui_pb(Bin,
                              0,
                              0,
                              id(0, TrUserData),
                              id(0, TrUserData),
                              TrUserData).

dfp_read_field_def_eui_pb(<<8, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, TrUserData) ->
    d_field_eui_pb_deveui(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          TrUserData);
dfp_read_field_def_eui_pb(<<16, Rest/binary>>, Z1, Z2,
                          F@_1, F@_2, TrUserData) ->
    d_field_eui_pb_appeui(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          TrUserData);
dfp_read_field_def_eui_pb(<<>>, 0, 0, F@_1, F@_2, _) ->
    #eui_pb{deveui = F@_1, appeui = F@_2};
dfp_read_field_def_eui_pb(Other, Z1, Z2, F@_1, F@_2,
                          TrUserData) ->
    dg_read_field_def_eui_pb(Other,
                             Z1,
                             Z2,
                             F@_1,
                             F@_2,
                             TrUserData).

dg_read_field_def_eui_pb(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_eui_pb(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             F@_2,
                             TrUserData);
dg_read_field_def_eui_pb(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_eui_pb_deveui(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
        16 ->
            d_field_eui_pb_appeui(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_eui_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_eui_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_eui_pb(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
                3 ->
                    skip_group_eui_pb(Rest,
                                      Key bsr 3,
                                      0,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
                5 -> skip_32_eui_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_eui_pb(<<>>, 0, 0, F@_1, F@_2, _) ->
    #eui_pb{deveui = F@_1, appeui = F@_2}.

d_field_eui_pb_deveui(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_eui_pb_deveui(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          F@_2,
                          TrUserData);
d_field_eui_pb_deveui(<<0:1, X:7, Rest/binary>>, N, Acc,
                      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_eui_pb(RestF,
                              0,
                              0,
                              NewFValue,
                              F@_2,
                              TrUserData).

d_field_eui_pb_appeui(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_eui_pb_appeui(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          F@_2,
                          TrUserData);
d_field_eui_pb_appeui(<<0:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_eui_pb(RestF,
                              0,
                              0,
                              F@_1,
                              NewFValue,
                              TrUserData).

skip_varint_eui_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                   F@_1, F@_2, TrUserData) ->
    skip_varint_eui_pb(Rest,
                       Z1,
                       Z2,
                       F@_1,
                       F@_2,
                       TrUserData);
skip_varint_eui_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_eui_pb(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData).

skip_length_delimited_eui_pb(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_eui_pb(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 TrUserData);
skip_length_delimited_eui_pb(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_eui_pb(Rest2,
                              0,
                              0,
                              F@_1,
                              F@_2,
                              TrUserData).

skip_group_eui_pb(Bin, FNum, Z2, F@_1, F@_2,
                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_eui_pb(Rest,
                              0,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData).

skip_32_eui_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
               F@_2, TrUserData) ->
    dfp_read_field_def_eui_pb(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData).

skip_64_eui_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
               F@_2, TrUserData) ->
    dfp_read_field_def_eui_pb(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData).

decode_msg_routing_information_pb(Bin, TrUserData) ->
    dfp_read_field_def_routing_information_pb(Bin,
                                              0,
                                              0,
                                              id(undefined, TrUserData),
                                              TrUserData).

dfp_read_field_def_routing_information_pb(<<8,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    d_field_routing_information_pb_devaddr(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           TrUserData);
dfp_read_field_def_routing_information_pb(<<18,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    d_field_routing_information_pb_eui(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
dfp_read_field_def_routing_information_pb(<<>>, 0, 0,
                                          F@_1, _) ->
    #routing_information_pb{data = F@_1};
dfp_read_field_def_routing_information_pb(Other, Z1, Z2,
                                          F@_1, TrUserData) ->
    dg_read_field_def_routing_information_pb(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             TrUserData).

dg_read_field_def_routing_information_pb(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_routing_information_pb(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             TrUserData);
dg_read_field_def_routing_information_pb(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_information_pb_devaddr(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
        18 ->
            d_field_routing_information_pb_eui(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_information_pb(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
                1 ->
                    skip_64_routing_information_pb(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_routing_information_pb(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                3 ->
                    skip_group_routing_information_pb(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                5 ->
                    skip_32_routing_information_pb(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   TrUserData)
            end
    end;
dg_read_field_def_routing_information_pb(<<>>, 0, 0,
                                         F@_1, _) ->
    #routing_information_pb{data = F@_1}.

d_field_routing_information_pb_devaddr(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_routing_information_pb_devaddr(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           TrUserData);
d_field_routing_information_pb_devaddr(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_routing_information_pb(RestF,
                                              0,
                                              0,
                                              id({devaddr, NewFValue},
                                                 TrUserData),
                                              TrUserData).

d_field_routing_information_pb_eui(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_routing_information_pb_eui(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
d_field_routing_information_pb_eui(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_eui_pb(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_routing_information_pb(RestF,
                                              0,
                                              0,
                                              case Prev of
                                                  undefined ->
                                                      id({eui, NewFValue},
                                                         TrUserData);
                                                  {eui, MVPrev} ->
                                                      id({eui,
                                                          merge_msg_eui_pb(MVPrev,
                                                                           NewFValue,
                                                                           TrUserData)},
                                                         TrUserData);
                                                  _ ->
                                                      id({eui, NewFValue},
                                                         TrUserData)
                                              end,
                                              TrUserData).

skip_varint_routing_information_pb(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_routing_information_pb(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
skip_varint_routing_information_pb(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_routing_information_pb(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_length_delimited_routing_information_pb(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_routing_information_pb(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 TrUserData);
skip_length_delimited_routing_information_pb(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_information_pb(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              TrUserData).

skip_group_routing_information_pb(Bin, FNum, Z2, F@_1,
                                  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_information_pb(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_32_routing_information_pb(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_routing_information_pb(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

skip_64_routing_information_pb(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_routing_information_pb(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData).

decode_msg_window_pb(Bin, TrUserData) ->
    dfp_read_field_def_window_pb(Bin,
                                 0,
                                 0,
                                 id(0, TrUserData),
                                 id(0.0, TrUserData),
                                 id([], TrUserData),
                                 TrUserData).

dfp_read_field_def_window_pb(<<8, Rest/binary>>, Z1, Z2,
                             F@_1, F@_2, F@_3, TrUserData) ->
    d_field_window_pb_timestamp(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
dfp_read_field_def_window_pb(<<21, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_window_pb_frequency(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
dfp_read_field_def_window_pb(<<26, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_window_pb_datarate(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               TrUserData);
dfp_read_field_def_window_pb(<<>>, 0, 0, F@_1, F@_2,
                             F@_3, _) ->
    #window_pb{timestamp = F@_1, frequency = F@_2,
               datarate = F@_3};
dfp_read_field_def_window_pb(Other, Z1, Z2, F@_1, F@_2,
                             F@_3, TrUserData) ->
    dg_read_field_def_window_pb(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData).

dg_read_field_def_window_pb(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_window_pb(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
dg_read_field_def_window_pb(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_window_pb_timestamp(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
        21 ->
            d_field_window_pb_frequency(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        TrUserData);
        26 ->
            d_field_window_pb_datarate(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_window_pb(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          TrUserData);
                1 ->
                    skip_64_window_pb(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
                2 ->
                    skip_length_delimited_window_pb(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
                3 ->
                    skip_group_window_pb(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         TrUserData);
                5 ->
                    skip_32_window_pb(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData)
            end
    end;
dg_read_field_def_window_pb(<<>>, 0, 0, F@_1, F@_2,
                            F@_3, _) ->
    #window_pb{timestamp = F@_1, frequency = F@_2,
               datarate = F@_3}.

d_field_window_pb_timestamp(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_window_pb_timestamp(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                TrUserData);
d_field_window_pb_timestamp(<<0:1, X:7, Rest/binary>>,
                            N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_window_pb(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

d_field_window_pb_frequency(<<0:16, 128, 127,
                              Rest/binary>>,
                            Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 id(infinity, TrUserData),
                                 F@_3,
                                 TrUserData);
d_field_window_pb_frequency(<<0:16, 128, 255,
                              Rest/binary>>,
                            Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 id('-infinity', TrUserData),
                                 F@_3,
                                 TrUserData);
d_field_window_pb_frequency(<<_:16, 1:1, _:7, _:1,
                              127:7, Rest/binary>>,
                            Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 id(nan, TrUserData),
                                 F@_3,
                                 TrUserData);
d_field_window_pb_frequency(<<Value:32/little-float,
                              Rest/binary>>,
                            Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 id(Value, TrUserData),
                                 F@_3,
                                 TrUserData).

d_field_window_pb_datarate(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_window_pb_datarate(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               TrUserData);
d_field_window_pb_datarate(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_window_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 NewFValue,
                                 TrUserData).

skip_varint_window_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_window_pb(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          TrUserData);
skip_varint_window_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_length_delimited_window_pb(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_window_pb(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    TrUserData);
skip_length_delimited_window_pb(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_window_pb(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_group_window_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_window_pb(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_32_window_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

skip_64_window_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_window_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 TrUserData).

decode_msg_packet_pb(Bin, TrUserData) ->
    dfp_read_field_def_packet_pb(Bin,
                                 0,
                                 0,
                                 id(0, TrUserData),
                                 id(longfi, TrUserData),
                                 id(<<>>, TrUserData),
                                 id(0, TrUserData),
                                 id(0.0, TrUserData),
                                 id(0.0, TrUserData),
                                 id([], TrUserData),
                                 id(0.0, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 TrUserData).

dfp_read_field_def_packet_pb(<<8, Rest/binary>>, Z1, Z2,
                             F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_oui(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          F@_8,
                          F@_9,
                          F@_10,
                          TrUserData);
dfp_read_field_def_packet_pb(<<16, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_type(Rest,
                           Z1,
                           Z2,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           F@_10,
                           TrUserData);
dfp_read_field_def_packet_pb(<<26, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_payload(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              F@_10,
                              TrUserData);
dfp_read_field_def_packet_pb(<<32, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_timestamp(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                F@_10,
                                TrUserData);
dfp_read_field_def_packet_pb(<<45, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_signal_strength(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      TrUserData);
dfp_read_field_def_packet_pb(<<53, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_frequency(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                F@_10,
                                TrUserData);
dfp_read_field_def_packet_pb(<<58, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_datarate(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               TrUserData);
dfp_read_field_def_packet_pb(<<69, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_snr(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          F@_8,
                          F@_9,
                          F@_10,
                          TrUserData);
dfp_read_field_def_packet_pb(<<74, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_routing(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              F@_10,
                              TrUserData);
dfp_read_field_def_packet_pb(<<82, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                             F@_9, F@_10, TrUserData) ->
    d_field_packet_pb_rx2_window(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
dfp_read_field_def_packet_pb(<<>>, 0, 0, F@_1, F@_2,
                             F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                             _) ->
    #packet_pb{oui = F@_1, type = F@_2, payload = F@_3,
               timestamp = F@_4, signal_strength = F@_5,
               frequency = F@_6, datarate = F@_7, snr = F@_8,
               routing = F@_9, rx2_window = F@_10};
dfp_read_field_def_packet_pb(Other, Z1, Z2, F@_1, F@_2,
                             F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                             TrUserData) ->
    dg_read_field_def_packet_pb(Other,
                                Z1,
                                Z2,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                F@_10,
                                TrUserData).

dg_read_field_def_packet_pb(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_packet_pb(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                F@_10,
                                TrUserData);
dg_read_field_def_packet_pb(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_packet_pb_oui(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  F@_10,
                                  TrUserData);
        16 ->
            d_field_packet_pb_type(Rest,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   F@_3,
                                   F@_4,
                                   F@_5,
                                   F@_6,
                                   F@_7,
                                   F@_8,
                                   F@_9,
                                   F@_10,
                                   TrUserData);
        26 ->
            d_field_packet_pb_payload(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      TrUserData);
        32 ->
            d_field_packet_pb_timestamp(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        TrUserData);
        45 ->
            d_field_packet_pb_signal_strength(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              TrUserData);
        53 ->
            d_field_packet_pb_frequency(Rest,
                                        0,
                                        0,
                                        F@_1,
                                        F@_2,
                                        F@_3,
                                        F@_4,
                                        F@_5,
                                        F@_6,
                                        F@_7,
                                        F@_8,
                                        F@_9,
                                        F@_10,
                                        TrUserData);
        58 ->
            d_field_packet_pb_datarate(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       F@_5,
                                       F@_6,
                                       F@_7,
                                       F@_8,
                                       F@_9,
                                       F@_10,
                                       TrUserData);
        69 ->
            d_field_packet_pb_snr(Rest,
                                  0,
                                  0,
                                  F@_1,
                                  F@_2,
                                  F@_3,
                                  F@_4,
                                  F@_5,
                                  F@_6,
                                  F@_7,
                                  F@_8,
                                  F@_9,
                                  F@_10,
                                  TrUserData);
        74 ->
            d_field_packet_pb_routing(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      TrUserData);
        82 ->
            d_field_packet_pb_rx2_window(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_packet_pb(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          TrUserData);
                1 ->
                    skip_64_packet_pb(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      TrUserData);
                2 ->
                    skip_length_delimited_packet_pb(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    TrUserData);
                3 ->
                    skip_group_packet_pb(Rest,
                                         Key bsr 3,
                                         0,
                                         F@_1,
                                         F@_2,
                                         F@_3,
                                         F@_4,
                                         F@_5,
                                         F@_6,
                                         F@_7,
                                         F@_8,
                                         F@_9,
                                         F@_10,
                                         TrUserData);
                5 ->
                    skip_32_packet_pb(Rest,
                                      0,
                                      0,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      F@_5,
                                      F@_6,
                                      F@_7,
                                      F@_8,
                                      F@_9,
                                      F@_10,
                                      TrUserData)
            end
    end;
dg_read_field_def_packet_pb(<<>>, 0, 0, F@_1, F@_2,
                            F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                            _) ->
    #packet_pb{oui = F@_1, type = F@_2, payload = F@_3,
               timestamp = F@_4, signal_strength = F@_5,
               frequency = F@_6, datarate = F@_7, snr = F@_8,
               routing = F@_9, rx2_window = F@_10}.

d_field_packet_pb_oui(<<1:1, X:7, Rest/binary>>, N, Acc,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                      F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_oui(Rest,
                          N + 7,
                          X bsl N + Acc,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          F@_8,
                          F@_9,
                          F@_10,
                          TrUserData);
d_field_packet_pb_oui(<<0:1, X:7, Rest/binary>>, N, Acc,
                      _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                      F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 NewFValue,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_type(<<1:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                       F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_type(Rest,
                           N + 7,
                           X bsl N + Acc,
                           F@_1,
                           F@_2,
                           F@_3,
                           F@_4,
                           F@_5,
                           F@_6,
                           F@_7,
                           F@_8,
                           F@_9,
                           F@_10,
                           TrUserData);
d_field_packet_pb_type(<<0:1, X:7, Rest/binary>>, N,
                       Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                       F@_10, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_packet_pb.packet_type'(begin
                                               <<Res:32/signed-native>> = <<(X
                                                                                 bsl
                                                                                 N
                                                                                 +
                                                                                 Acc):32/unsigned-native>>,
                                               id(Res, TrUserData)
                                           end),
            TrUserData),
         Rest},
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 NewFValue,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_payload(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                          F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_payload(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              F@_10,
                              TrUserData);
d_field_packet_pb_payload(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
                          F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 NewFValue,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_timestamp(<<1:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                            F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_timestamp(Rest,
                                N + 7,
                                X bsl N + Acc,
                                F@_1,
                                F@_2,
                                F@_3,
                                F@_4,
                                F@_5,
                                F@_6,
                                F@_7,
                                F@_8,
                                F@_9,
                                F@_10,
                                TrUserData);
d_field_packet_pb_timestamp(<<0:1, X:7, Rest/binary>>,
                            N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
                            F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 NewFValue,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_signal_strength(<<0:16, 128, 127,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
                                  F@_8, F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 id(infinity, TrUserData),
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_signal_strength(<<0:16, 128, 255,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
                                  F@_8, F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 id('-infinity', TrUserData),
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_signal_strength(<<_:16, 1:1, _:7, _:1,
                                    127:7, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
                                  F@_8, F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 id(nan, TrUserData),
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_signal_strength(<<Value:32/little-float,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
                                  F@_8, F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 id(Value, TrUserData),
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_frequency(<<0:16, 128, 127,
                              Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
                            F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 id(infinity, TrUserData),
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_frequency(<<0:16, 128, 255,
                              Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
                            F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 id('-infinity', TrUserData),
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_frequency(<<_:16, 1:1, _:7, _:1,
                              127:7, Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
                            F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 id(nan, TrUserData),
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_frequency(<<Value:32/little-float,
                              Rest/binary>>,
                            Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
                            F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 id(Value, TrUserData),
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_datarate(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                           F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_datarate(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               F@_5,
                               F@_6,
                               F@_7,
                               F@_8,
                               F@_9,
                               F@_10,
                               TrUserData);
d_field_packet_pb_datarate(<<0:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
                           F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 NewFValue,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_snr(<<0:16, 128, 127, Rest/binary>>,
                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
                      F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 id(infinity, TrUserData),
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_snr(<<0:16, 128, 255, Rest/binary>>,
                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
                      F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 id('-infinity', TrUserData),
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_snr(<<_:16, 1:1, _:7, _:1, 127:7,
                        Rest/binary>>,
                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
                      F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 id(nan, TrUserData),
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_snr(<<Value:32/little-float,
                        Rest/binary>>,
                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
                      F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 id(Value, TrUserData),
                                 F@_9,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_routing(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                          F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_routing(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              F@_3,
                              F@_4,
                              F@_5,
                              F@_6,
                              F@_7,
                              F@_8,
                              F@_9,
                              F@_10,
                              TrUserData);
d_field_packet_pb_routing(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
                          Prev, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_routing_information_pb(Bs,
                                                                   TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 if Prev == undefined -> NewFValue;
                                    true ->
                                        merge_msg_routing_information_pb(Prev,
                                                                         NewFValue,
                                                                         TrUserData)
                                 end,
                                 F@_10,
                                 TrUserData).

d_field_packet_pb_rx2_window(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_packet_pb_rx2_window(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData);
d_field_packet_pb_rx2_window(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                             F@_8, F@_9, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_window_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_packet_pb(RestF,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 if Prev == undefined -> NewFValue;
                                    true ->
                                        merge_msg_window_pb(Prev,
                                                            NewFValue,
                                                            TrUserData)
                                 end,
                                 TrUserData).

skip_varint_packet_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                      F@_10, TrUserData) ->
    skip_varint_packet_pb(Rest,
                          Z1,
                          Z2,
                          F@_1,
                          F@_2,
                          F@_3,
                          F@_4,
                          F@_5,
                          F@_6,
                          F@_7,
                          F@_8,
                          F@_9,
                          F@_10,
                          TrUserData);
skip_varint_packet_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
                      F@_10, TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

skip_length_delimited_packet_pb(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_packet_pb(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    F@_2,
                                    F@_3,
                                    F@_4,
                                    F@_5,
                                    F@_6,
                                    F@_7,
                                    F@_8,
                                    F@_9,
                                    F@_10,
                                    TrUserData);
skip_length_delimited_packet_pb(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_packet_pb(Rest2,
                                 0,
                                 0,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

skip_group_packet_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3,
                     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_packet_pb(Rest,
                                 0,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

skip_32_packet_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                  TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

skip_64_packet_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                  TrUserData) ->
    dfp_read_field_def_packet_pb(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 TrUserData).

decode_msg_blockchain_txn_state_channel_close_v1_pb(Bin,
                                                    TrUserData) ->
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Bin,
                                                                0,
                                                                0,
                                                                id(undefined,
                                                                   TrUserData),
                                                                id(<<>>,
                                                                   TrUserData),
                                                                id(<<>>,
                                                                   TrUserData),
                                                                id(0,
                                                                   TrUserData),
                                                                id(undefined,
                                                                   TrUserData),
                                                                TrUserData).

dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<10,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    d_field_blockchain_txn_state_channel_close_v1_pb_state_channel(Rest,
                                                                   Z1,
                                                                   Z2,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   TrUserData);
dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<18,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    d_field_blockchain_txn_state_channel_close_v1_pb_closer(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<26,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    d_field_blockchain_txn_state_channel_close_v1_pb_signature(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<32,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    d_field_blockchain_txn_state_channel_close_v1_pb_fee(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<42,
                                                              Rest/binary>>,
                                                            Z1, Z2, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    d_field_blockchain_txn_state_channel_close_v1_pb_conflicts_with(Rest,
                                                                    Z1,
                                                                    Z2,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<>>,
                                                            0, 0, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            _) ->
    #blockchain_txn_state_channel_close_v1_pb{state_channel
                                                  = F@_1,
                                              closer = F@_2, signature = F@_3,
                                              fee = F@_4,
                                              conflicts_with = F@_5};
dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Other,
                                                            Z1, Z2, F@_1, F@_2,
                                                            F@_3, F@_4, F@_5,
                                                            TrUserData) ->
    dg_read_field_def_blockchain_txn_state_channel_close_v1_pb(Other,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData).

dg_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
dg_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_txn_state_channel_close_v1_pb_state_channel(Rest,
                                                                           0,
                                                                           0,
                                                                           F@_1,
                                                                           F@_2,
                                                                           F@_3,
                                                                           F@_4,
                                                                           F@_5,
                                                                           TrUserData);
        18 ->
            d_field_blockchain_txn_state_channel_close_v1_pb_closer(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
        26 ->
            d_field_blockchain_txn_state_channel_close_v1_pb_signature(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       TrUserData);
        32 ->
            d_field_blockchain_txn_state_channel_close_v1_pb_fee(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 TrUserData);
        42 ->
            d_field_blockchain_txn_state_channel_close_v1_pb_conflicts_with(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            F@_4,
                                                                            F@_5,
                                                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         F@_4,
                                                                         F@_5,
                                                                         TrUserData);
                1 ->
                    skip_64_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     TrUserData);
                2 ->
                    skip_length_delimited_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                                   0,
                                                                                   0,
                                                                                   F@_1,
                                                                                   F@_2,
                                                                                   F@_3,
                                                                                   F@_4,
                                                                                   F@_5,
                                                                                   TrUserData);
                3 ->
                    skip_group_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                        Key bsr
                                                                            3,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        F@_5,
                                                                        TrUserData);
                5 ->
                    skip_32_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     TrUserData)
            end
    end;
dg_read_field_def_blockchain_txn_state_channel_close_v1_pb(<<>>,
                                                           0, 0, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           _) ->
    #blockchain_txn_state_channel_close_v1_pb{state_channel
                                                  = F@_1,
                                              closer = F@_2, signature = F@_3,
                                              fee = F@_4,
                                              conflicts_with = F@_5}.

d_field_blockchain_txn_state_channel_close_v1_pb_state_channel(<<1:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, F@_3, F@_4,
                                                               F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_state_channel_close_v1_pb_state_channel(Rest,
                                                                   N + 7,
                                                                   X bsl N +
                                                                       Acc,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   TrUserData);
d_field_blockchain_txn_state_channel_close_v1_pb_state_channel(<<0:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, Prev,
                                                               F@_2, F@_3, F@_4,
                                                               F@_5,
                                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_v1_pb(Bs,
                                                                           TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                if Prev ==
                                                                       undefined ->
                                                                       NewFValue;
                                                                   true ->
                                                                       merge_msg_blockchain_state_channel_v1_pb(Prev,
                                                                                                                NewFValue,
                                                                                                                TrUserData)
                                                                end,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

d_field_blockchain_txn_state_channel_close_v1_pb_closer(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5,
                                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_state_channel_close_v1_pb_closer(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            TrUserData);
d_field_blockchain_txn_state_channel_close_v1_pb_closer(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, _, F@_3,
                                                        F@_4, F@_5,
                                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                NewFValue,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

d_field_blockchain_txn_state_channel_close_v1_pb_signature(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           F@_3, F@_4, F@_5,
                                                           TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_state_channel_close_v1_pb_signature(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               TrUserData);
d_field_blockchain_txn_state_channel_close_v1_pb_signature(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1, F@_2,
                                                           _, F@_4, F@_5,
                                                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                NewFValue,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

d_field_blockchain_txn_state_channel_close_v1_pb_fee(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_state_channel_close_v1_pb_fee(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
d_field_blockchain_txn_state_channel_close_v1_pb_fee(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                NewFValue,
                                                                F@_5,
                                                                TrUserData).

d_field_blockchain_txn_state_channel_close_v1_pb_conflicts_with(<<1:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, F@_5,
                                                                TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_state_channel_close_v1_pb_conflicts_with(Rest,
                                                                    N + 7,
                                                                    X bsl N +
                                                                        Acc,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    TrUserData);
d_field_blockchain_txn_state_channel_close_v1_pb_conflicts_with(<<0:1,
                                                                  X:7,
                                                                  Rest/binary>>,
                                                                N, Acc, F@_1,
                                                                F@_2, F@_3,
                                                                F@_4, Prev,
                                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_state_channel_v1_pb(Bs,
                                                                           TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(RestF,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                if Prev ==
                                                                       undefined ->
                                                                       NewFValue;
                                                                   true ->
                                                                       merge_msg_blockchain_state_channel_v1_pb(Prev,
                                                                                                                NewFValue,
                                                                                                                TrUserData)
                                                                end,
                                                                TrUserData).

skip_varint_blockchain_txn_state_channel_close_v1_pb(<<1:1,
                                                       _:7, Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, TrUserData) ->
    skip_varint_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         TrUserData);
skip_varint_blockchain_txn_state_channel_close_v1_pb(<<0:1,
                                                       _:7, Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

skip_length_delimited_blockchain_txn_state_channel_close_v1_pb(<<1:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, F@_3, F@_4,
                                                               F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                   N + 7,
                                                                   X bsl N +
                                                                       Acc,
                                                                   F@_1,
                                                                   F@_2,
                                                                   F@_3,
                                                                   F@_4,
                                                                   F@_5,
                                                                   TrUserData);
skip_length_delimited_blockchain_txn_state_channel_close_v1_pb(<<0:1,
                                                                 X:7,
                                                                 Rest/binary>>,
                                                               N, Acc, F@_1,
                                                               F@_2, F@_3, F@_4,
                                                               F@_5,
                                                               TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Rest2,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

skip_group_blockchain_txn_state_channel_close_v1_pb(Bin,
                                                    FNum, Z2, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                0,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

skip_32_blockchain_txn_state_channel_close_v1_pb(<<_:32,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

skip_64_blockchain_txn_state_channel_close_v1_pb(<<_:64,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, TrUserData) ->
    dfp_read_field_def_blockchain_txn_state_channel_close_v1_pb(Rest,
                                                                Z1,
                                                                Z2,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                TrUserData).

decode_msg_blockchain_var_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_blockchain_var_v1_pb(Bin,
                                            0,
                                            0,
                                            id([], TrUserData),
                                            id([], TrUserData),
                                            id(<<>>, TrUserData),
                                            TrUserData).

dfp_read_field_def_blockchain_var_v1_pb(<<10,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_blockchain_var_v1_pb_name(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dfp_read_field_def_blockchain_var_v1_pb(<<18,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_blockchain_var_v1_pb_type(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
dfp_read_field_def_blockchain_var_v1_pb(<<26,
                                          Rest/binary>>,
                                        Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_blockchain_var_v1_pb_value(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
dfp_read_field_def_blockchain_var_v1_pb(<<>>, 0, 0,
                                        F@_1, F@_2, F@_3, _) ->
    #blockchain_var_v1_pb{name = F@_1, type = F@_2,
                          value = F@_3};
dfp_read_field_def_blockchain_var_v1_pb(Other, Z1, Z2,
                                        F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_blockchain_var_v1_pb(Other,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData).

dg_read_field_def_blockchain_var_v1_pb(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_var_v1_pb(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           TrUserData);
dg_read_field_def_blockchain_var_v1_pb(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_var_v1_pb_name(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
        18 ->
            d_field_blockchain_var_v1_pb_type(Rest,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              TrUserData);
        26 ->
            d_field_blockchain_var_v1_pb_value(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_var_v1_pb(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     TrUserData);
                1 ->
                    skip_64_blockchain_var_v1_pb(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData);
                2 ->
                    skip_length_delimited_blockchain_var_v1_pb(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               TrUserData);
                3 ->
                    skip_group_blockchain_var_v1_pb(Rest,
                                                    Key bsr 3,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    TrUserData);
                5 ->
                    skip_32_blockchain_var_v1_pb(Rest,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 TrUserData)
            end
    end;
dg_read_field_def_blockchain_var_v1_pb(<<>>, 0, 0, F@_1,
                                       F@_2, F@_3, _) ->
    #blockchain_var_v1_pb{name = F@_1, type = F@_2,
                          value = F@_3}.

d_field_blockchain_var_v1_pb_name(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_blockchain_var_v1_pb_name(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
d_field_blockchain_var_v1_pb_name(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_var_v1_pb(RestF,
                                            0,
                                            0,
                                            NewFValue,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

d_field_blockchain_var_v1_pb_type(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_blockchain_var_v1_pb_type(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      TrUserData);
d_field_blockchain_var_v1_pb_type(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_var_v1_pb(RestF,
                                            0,
                                            0,
                                            F@_1,
                                            NewFValue,
                                            F@_3,
                                            TrUserData).

d_field_blockchain_var_v1_pb_value(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_blockchain_var_v1_pb_value(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       TrUserData);
d_field_blockchain_var_v1_pb_value(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_var_v1_pb(RestF,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            NewFValue,
                                            TrUserData).

skip_varint_blockchain_var_v1_pb(<<1:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_blockchain_var_v1_pb(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     F@_3,
                                     TrUserData);
skip_varint_blockchain_var_v1_pb(<<0:1, _:7,
                                   Rest/binary>>,
                                 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_var_v1_pb(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

skip_length_delimited_blockchain_var_v1_pb(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_var_v1_pb(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               F@_2,
                                               F@_3,
                                               TrUserData);
skip_length_delimited_blockchain_var_v1_pb(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, F@_2, F@_3,
                                           TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_var_v1_pb(Rest2,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

skip_group_blockchain_var_v1_pb(Bin, FNum, Z2, F@_1,
                                F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_var_v1_pb(Rest,
                                            0,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

skip_32_blockchain_var_v1_pb(<<_:32, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_var_v1_pb(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

skip_64_blockchain_var_v1_pb(<<_:64, Rest/binary>>, Z1,
                             Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_blockchain_var_v1_pb(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            TrUserData).

decode_msg_blockchain_txn_vars_v1_pb(Bin, TrUserData) ->
    dfp_read_field_def_blockchain_txn_vars_v1_pb(Bin,
                                                 0,
                                                 0,
                                                 id([], TrUserData),
                                                 id(0, TrUserData),
                                                 id(<<>>, TrUserData),
                                                 id(<<>>, TrUserData),
                                                 id(<<>>, TrUserData),
                                                 id([], TrUserData),
                                                 id([], TrUserData),
                                                 id(0, TrUserData),
                                                 id([], TrUserData),
                                                 id([], TrUserData),
                                                 id([], TrUserData),
                                                 TrUserData).

dfp_read_field_def_blockchain_txn_vars_v1_pb(<<10,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_vars(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<16,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_version_predicate(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<26,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_proof(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            F@_11,
                                            TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<34,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_master_key(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<42,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_key_proof(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<50,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_cancels(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<58,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_unsets(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<64,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_nonce(Rest,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            F@_11,
                                            TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<74,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_multi_keys(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<82,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_multi_proofs(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<90,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData) ->
    d_field_blockchain_txn_vars_v1_pb_multi_key_proofs(Rest,
                                                       Z1,
                                                       Z2,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       TrUserData);
dfp_read_field_def_blockchain_txn_vars_v1_pb(<<>>, 0, 0,
                                             R1, F@_2, F@_3, F@_4, F@_5, R2, R3,
                                             F@_8, R4, R5, R6, TrUserData) ->
    #blockchain_txn_vars_v1_pb{vars =
                                   lists_reverse(R1, TrUserData),
                               version_predicate = F@_2, proof = F@_3,
                               master_key = F@_4, key_proof = F@_5,
                               cancels = lists_reverse(R2, TrUserData),
                               unsets = lists_reverse(R3, TrUserData),
                               nonce = F@_8,
                               multi_keys = lists_reverse(R4, TrUserData),
                               multi_proofs = lists_reverse(R5, TrUserData),
                               multi_key_proofs =
                                   lists_reverse(R6, TrUserData)};
dfp_read_field_def_blockchain_txn_vars_v1_pb(Other, Z1,
                                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                             F@_6, F@_7, F@_8, F@_9, F@_10,
                                             F@_11, TrUserData) ->
    dg_read_field_def_blockchain_txn_vars_v1_pb(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                TrUserData).

dg_read_field_def_blockchain_txn_vars_v1_pb(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_txn_vars_v1_pb(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                TrUserData);
dg_read_field_def_blockchain_txn_vars_v1_pb(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_txn_vars_v1_pb_vars(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   TrUserData);
        16 ->
            d_field_blockchain_txn_vars_v1_pb_version_predicate(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                F@_8,
                                                                F@_9,
                                                                F@_10,
                                                                F@_11,
                                                                TrUserData);
        26 ->
            d_field_blockchain_txn_vars_v1_pb_proof(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    TrUserData);
        34 ->
            d_field_blockchain_txn_vars_v1_pb_master_key(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         TrUserData);
        42 ->
            d_field_blockchain_txn_vars_v1_pb_key_proof(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        TrUserData);
        50 ->
            d_field_blockchain_txn_vars_v1_pb_cancels(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      TrUserData);
        58 ->
            d_field_blockchain_txn_vars_v1_pb_unsets(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     F@_11,
                                                     TrUserData);
        64 ->
            d_field_blockchain_txn_vars_v1_pb_nonce(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    TrUserData);
        74 ->
            d_field_blockchain_txn_vars_v1_pb_multi_keys(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         TrUserData);
        82 ->
            d_field_blockchain_txn_vars_v1_pb_multi_proofs(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           F@_11,
                                                           TrUserData);
        90 ->
            d_field_blockchain_txn_vars_v1_pb_multi_key_proofs(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               F@_2,
                                                               F@_3,
                                                               F@_4,
                                                               F@_5,
                                                               F@_6,
                                                               F@_7,
                                                               F@_8,
                                                               F@_9,
                                                               F@_10,
                                                               F@_11,
                                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_txn_vars_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          F@_10,
                                                          F@_11,
                                                          TrUserData);
                1 ->
                    skip_64_blockchain_txn_vars_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_blockchain_txn_vars_v1_pb(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    F@_5,
                                                                    F@_6,
                                                                    F@_7,
                                                                    F@_8,
                                                                    F@_9,
                                                                    F@_10,
                                                                    F@_11,
                                                                    TrUserData);
                3 ->
                    skip_group_blockchain_txn_vars_v1_pb(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         TrUserData);
                5 ->
                    skip_32_blockchain_txn_vars_v1_pb(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      TrUserData)
            end
    end;
dg_read_field_def_blockchain_txn_vars_v1_pb(<<>>, 0, 0,
                                            R1, F@_2, F@_3, F@_4, F@_5, R2, R3,
                                            F@_8, R4, R5, R6, TrUserData) ->
    #blockchain_txn_vars_v1_pb{vars =
                                   lists_reverse(R1, TrUserData),
                               version_predicate = F@_2, proof = F@_3,
                               master_key = F@_4, key_proof = F@_5,
                               cancels = lists_reverse(R2, TrUserData),
                               unsets = lists_reverse(R3, TrUserData),
                               nonce = F@_8,
                               multi_keys = lists_reverse(R4, TrUserData),
                               multi_proofs = lists_reverse(R5, TrUserData),
                               multi_key_proofs =
                                   lists_reverse(R6, TrUserData)}.

d_field_blockchain_txn_vars_v1_pb_vars(<<1:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                       TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_vars(Rest,
                                           N + 7,
                                           X bsl N + Acc,
                                           F@_1,
                                           F@_2,
                                           F@_3,
                                           F@_4,
                                           F@_5,
                                           F@_6,
                                           F@_7,
                                           F@_8,
                                           F@_9,
                                           F@_10,
                                           F@_11,
                                           TrUserData);
d_field_blockchain_txn_vars_v1_pb_vars(<<0:1, X:7,
                                         Rest/binary>>,
                                       N, Acc, Prev, F@_2, F@_3, F@_4, F@_5,
                                       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                       TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_var_v1_pb(Bs,
                                                                 TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_version_predicate(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    F@_8, F@_9, F@_10, F@_11,
                                                    TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_version_predicate(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        TrUserData);
d_field_blockchain_txn_vars_v1_pb_version_predicate(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, _, F@_3, F@_4,
                                                    F@_5, F@_6, F@_7, F@_8,
                                                    F@_9, F@_10, F@_11,
                                                    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 NewFValue,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_proof(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_proof(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            F@_11,
                                            TrUserData);
d_field_blockchain_txn_vars_v1_pb_proof(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
                                        F@_7, F@_8, F@_9, F@_10, F@_11,
                                        TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 NewFValue,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_master_key(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_master_key(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData);
d_field_blockchain_txn_vars_v1_pb_master_key(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                             F@_6, F@_7, F@_8, F@_9, F@_10,
                                             F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 NewFValue,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_key_proof(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_key_proof(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                TrUserData);
d_field_blockchain_txn_vars_v1_pb_key_proof(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                            F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 NewFValue,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_cancels(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                          TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_cancels(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              TrUserData);
d_field_blockchain_txn_vars_v1_pb_cancels(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          Prev, F@_7, F@_8, F@_9, F@_10, F@_11,
                                          TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_unsets(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                         TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_unsets(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             TrUserData);
d_field_blockchain_txn_vars_v1_pb_unsets(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, Prev, F@_8, F@_9, F@_10, F@_11,
                                         TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_nonce(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                        TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_nonce(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            F@_5,
                                            F@_6,
                                            F@_7,
                                            F@_8,
                                            F@_9,
                                            F@_10,
                                            F@_11,
                                            TrUserData);
d_field_blockchain_txn_vars_v1_pb_nonce(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                        F@_6, F@_7, _, F@_9, F@_10, F@_11,
                                        TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 NewFValue,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_multi_keys(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_multi_keys(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData);
d_field_blockchain_txn_vars_v1_pb_multi_keys(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, Prev,
                                             F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_multi_proofs(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_multi_proofs(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   TrUserData);
d_field_blockchain_txn_vars_v1_pb_multi_proofs(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               Prev, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 F@_11,
                                                 TrUserData).

d_field_blockchain_txn_vars_v1_pb_multi_key_proofs(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, F@_6, F@_7, F@_8,
                                                   F@_9, F@_10, F@_11,
                                                   TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_vars_v1_pb_multi_key_proofs(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       TrUserData);
d_field_blockchain_txn_vars_v1_pb_multi_key_proofs(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, F@_6, F@_7, F@_8,
                                                   F@_9, F@_10, Prev,
                                                   TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 cons(NewFValue,
                                                      Prev,
                                                      TrUserData),
                                                 TrUserData).

skip_varint_blockchain_txn_vars_v1_pb(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                      TrUserData) ->
    skip_varint_blockchain_txn_vars_v1_pb(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          F@_5,
                                          F@_6,
                                          F@_7,
                                          F@_8,
                                          F@_9,
                                          F@_10,
                                          F@_11,
                                          TrUserData);
skip_varint_blockchain_txn_vars_v1_pb(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                      TrUserData) ->
    dfp_read_field_def_blockchain_txn_vars_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

skip_length_delimited_blockchain_txn_vars_v1_pb(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_txn_vars_v1_pb(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    TrUserData);
skip_length_delimited_blockchain_txn_vars_v1_pb(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_txn_vars_v1_pb(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

skip_group_blockchain_txn_vars_v1_pb(Bin, FNum, Z2,
                                     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
                                     F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_txn_vars_v1_pb(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

skip_32_blockchain_txn_vars_v1_pb(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                  F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_blockchain_txn_vars_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

skip_64_blockchain_txn_vars_v1_pb(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                  F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_blockchain_txn_vars_v1_pb(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 TrUserData).

decode_msg_blockchain_txn_poc_receipts_v1_pb(Bin,
                                             TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Bin,
                                                         0,
                                                         0,
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id([], TrUserData),
                                                         id(0, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         TrUserData).

dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<10,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_challenger(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<18,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_secret(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<26,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_onion_key_hash(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<34,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_path(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<40,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_fee(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<50,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_signature(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<58,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v1_pb_request_block_hash(Rest,
                                                                 Z1,
                                                                 Z2,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<>>,
                                                     0, 0, F@_1, F@_2, F@_3, R1,
                                                     F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    #blockchain_txn_poc_receipts_v1_pb{challenger = F@_1,
                                       secret = F@_2, onion_key_hash = F@_3,
                                       path = lists_reverse(R1, TrUserData),
                                       fee = F@_5, signature = F@_6,
                                       request_block_hash = F@_7};
dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Other,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    dg_read_field_def_blockchain_txn_poc_receipts_v1_pb(Other,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData).

dg_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
dg_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_challenger(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
        18 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_secret(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             TrUserData);
        26 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_onion_key_hash(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     F@_6,
                                                                     F@_7,
                                                                     TrUserData);
        34 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_path(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           TrUserData);
        40 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_fee(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          TrUserData);
        50 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_signature(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                TrUserData);
        58 ->
            d_field_blockchain_txn_poc_receipts_v1_pb_request_block_hash(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         F@_2,
                                                                         F@_3,
                                                                         F@_4,
                                                                         F@_5,
                                                                         F@_6,
                                                                         F@_7,
                                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  F@_6,
                                                                  F@_7,
                                                                  TrUserData);
                1 ->
                    skip_64_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              TrUserData);
                2 ->
                    skip_length_delimited_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            F@_4,
                                                                            F@_5,
                                                                            F@_6,
                                                                            F@_7,
                                                                            TrUserData);
                3 ->
                    skip_group_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                                 Key bsr 3,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
                5 ->
                    skip_32_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              TrUserData)
            end
    end;
dg_read_field_def_blockchain_txn_poc_receipts_v1_pb(<<>>,
                                                    0, 0, F@_1, F@_2, F@_3, R1,
                                                    F@_5, F@_6, F@_7,
                                                    TrUserData) ->
    #blockchain_txn_poc_receipts_v1_pb{challenger = F@_1,
                                       secret = F@_2, onion_key_hash = F@_3,
                                       path = lists_reverse(R1, TrUserData),
                                       fee = F@_5, signature = F@_6,
                                       request_block_hash = F@_7}.

d_field_blockchain_txn_poc_receipts_v1_pb_challenger(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_challenger(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_challenger(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, _, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         NewFValue,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v1_pb_secret(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_secret(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_secret(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, _, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7,
                                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         NewFValue,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v1_pb_onion_key_hash(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5, F@_6,
                                                         F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_onion_key_hash(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_onion_key_hash(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2, _,
                                                         F@_4, F@_5, F@_6, F@_7,
                                                         TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         NewFValue,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v1_pb_path(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_path(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_path(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, Prev,
                                               F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_path_element_v1_pb(Bs,
                                                                              TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         cons(NewFValue,
                                                              Prev,
                                                              TrUserData),
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v1_pb_fee(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_fee(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_fee(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                              F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         NewFValue,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v1_pb_signature(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_signature(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_signature(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, _, F@_7,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         NewFValue,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v1_pb_request_block_hash(<<1:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             F@_3, F@_4, F@_5,
                                                             F@_6, F@_7,
                                                             TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v1_pb_request_block_hash(Rest,
                                                                 N + 7,
                                                                 X bsl N + Acc,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
d_field_blockchain_txn_poc_receipts_v1_pb_request_block_hash(<<0:1,
                                                               X:7,
                                                               Rest/binary>>,
                                                             N, Acc, F@_1, F@_2,
                                                             F@_3, F@_4, F@_5,
                                                             F@_6, _,
                                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         NewFValue,
                                                         TrUserData).

skip_varint_blockchain_txn_poc_receipts_v1_pb(<<1:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
skip_varint_blockchain_txn_poc_receipts_v1_pb(<<0:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_length_delimited_blockchain_txn_poc_receipts_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            TrUserData);
skip_length_delimited_blockchain_txn_poc_receipts_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Rest2,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_group_blockchain_txn_poc_receipts_v1_pb(Bin, FNum,
                                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                             F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                         0,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_32_blockchain_txn_poc_receipts_v1_pb(<<_:32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_64_blockchain_txn_poc_receipts_v1_pb(<<_:64,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

decode_msg_blockchain_poc_receipt_v1_pb(Bin,
                                        TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    id(0, TrUserData),
                                                    id(0, TrUserData),
                                                    id(<<>>, TrUserData),
                                                    id(p2p, TrUserData),
                                                    id(<<>>, TrUserData),
                                                    id(0.0, TrUserData),
                                                    id(0.0, TrUserData),
                                                    id(0, TrUserData),
                                                    id([], TrUserData),
                                                    id(<<>>, TrUserData),
                                                    id(0, TrUserData),
                                                    TrUserData).

dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_gateway(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<16,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_timestamp(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<24,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_signal(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<34,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_data(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<40,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_origin(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<50,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_signature(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<61,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_snr(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             F@_12,
                                             TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<69,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_frequency(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<72,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_channel(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<82,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_datarate(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<90,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_addr_hash(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<96,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    d_field_blockchain_poc_receipt_v1_pb_tx_power(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  TrUserData);
dfp_read_field_def_blockchain_poc_receipt_v1_pb(<<>>, 0,
                                                0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                                F@_6, F@_7, F@_8, F@_9, F@_10,
                                                F@_11, F@_12, _) ->
    #blockchain_poc_receipt_v1_pb{gateway = F@_1,
                                  timestamp = F@_2, signal = F@_3, data = F@_4,
                                  origin = F@_5, signature = F@_6, snr = F@_7,
                                  frequency = F@_8, channel = F@_9,
                                  datarate = F@_10, addr_hash = F@_11,
                                  tx_power = F@_12};
dfp_read_field_def_blockchain_poc_receipt_v1_pb(Other,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                F@_10, F@_11, F@_12,
                                                TrUserData) ->
    dg_read_field_def_blockchain_poc_receipt_v1_pb(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData).

dg_read_field_def_blockchain_poc_receipt_v1_pb(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, F@_12, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
dg_read_field_def_blockchain_poc_receipt_v1_pb(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, F@_12,
                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_poc_receipt_v1_pb_gateway(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         F@_12,
                                                         TrUserData);
        16 ->
            d_field_blockchain_poc_receipt_v1_pb_timestamp(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           F@_11,
                                                           F@_12,
                                                           TrUserData);
        24 ->
            d_field_blockchain_poc_receipt_v1_pb_signal(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        F@_12,
                                                        TrUserData);
        34 ->
            d_field_blockchain_poc_receipt_v1_pb_data(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      F@_5,
                                                      F@_6,
                                                      F@_7,
                                                      F@_8,
                                                      F@_9,
                                                      F@_10,
                                                      F@_11,
                                                      F@_12,
                                                      TrUserData);
        40 ->
            d_field_blockchain_poc_receipt_v1_pb_origin(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        F@_10,
                                                        F@_11,
                                                        F@_12,
                                                        TrUserData);
        50 ->
            d_field_blockchain_poc_receipt_v1_pb_signature(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           F@_11,
                                                           F@_12,
                                                           TrUserData);
        61 ->
            d_field_blockchain_poc_receipt_v1_pb_snr(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     F@_10,
                                                     F@_11,
                                                     F@_12,
                                                     TrUserData);
        69 ->
            d_field_blockchain_poc_receipt_v1_pb_frequency(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           F@_11,
                                                           F@_12,
                                                           TrUserData);
        72 ->
            d_field_blockchain_poc_receipt_v1_pb_channel(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         F@_12,
                                                         TrUserData);
        82 ->
            d_field_blockchain_poc_receipt_v1_pb_datarate(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          F@_10,
                                                          F@_11,
                                                          F@_12,
                                                          TrUserData);
        90 ->
            d_field_blockchain_poc_receipt_v1_pb_addr_hash(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           F@_10,
                                                           F@_11,
                                                           F@_12,
                                                           TrUserData);
        96 ->
            d_field_blockchain_poc_receipt_v1_pb_tx_power(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          F@_10,
                                                          F@_11,
                                                          F@_12,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_poc_receipt_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             F@_10,
                                                             F@_11,
                                                             F@_12,
                                                             TrUserData);
                1 ->
                    skip_64_blockchain_poc_receipt_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         F@_12,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_blockchain_poc_receipt_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       F@_6,
                                                                       F@_7,
                                                                       F@_8,
                                                                       F@_9,
                                                                       F@_10,
                                                                       F@_11,
                                                                       F@_12,
                                                                       TrUserData);
                3 ->
                    skip_group_blockchain_poc_receipt_v1_pb(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            F@_9,
                                                            F@_10,
                                                            F@_11,
                                                            F@_12,
                                                            TrUserData);
                5 ->
                    skip_32_blockchain_poc_receipt_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         F@_10,
                                                         F@_11,
                                                         F@_12,
                                                         TrUserData)
            end
    end;
dg_read_field_def_blockchain_poc_receipt_v1_pb(<<>>, 0,
                                               0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                               F@_6, F@_7, F@_8, F@_9, F@_10,
                                               F@_11, F@_12, _) ->
    #blockchain_poc_receipt_v1_pb{gateway = F@_1,
                                  timestamp = F@_2, signal = F@_3, data = F@_4,
                                  origin = F@_5, signature = F@_6, snr = F@_7,
                                  frequency = F@_8, channel = F@_9,
                                  datarate = F@_10, addr_hash = F@_11,
                                  tx_power = F@_12}.

d_field_blockchain_poc_receipt_v1_pb_gateway(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_gateway(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 TrUserData);
d_field_blockchain_poc_receipt_v1_pb_gateway(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                             F@_6, F@_7, F@_8, F@_9, F@_10,
                                             F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_timestamp(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_timestamp(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
d_field_blockchain_poc_receipt_v1_pb_timestamp(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, _, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, F@_12,
                                               TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    NewFValue,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_signal(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_signal(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                TrUserData);
d_field_blockchain_poc_receipt_v1_pb_signal(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, _, F@_4, F@_5,
                                            F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = X bsl N + Acc,
                              if ZValue band 1 =:= 0 ->
                                     id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    NewFValue,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_data(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                          F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_data(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              F@_5,
                                              F@_6,
                                              F@_7,
                                              F@_8,
                                              F@_9,
                                              F@_10,
                                              F@_11,
                                              F@_12,
                                              TrUserData);
d_field_blockchain_poc_receipt_v1_pb_data(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, _, F@_5,
                                          F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                          F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    NewFValue,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_origin(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_origin(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                F@_10,
                                                F@_11,
                                                F@_12,
                                                TrUserData);
d_field_blockchain_poc_receipt_v1_pb_origin(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                            F@_6, F@_7, F@_8, F@_9, F@_10,
                                            F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_helium.origin'(begin
                                                        <<Res:32/signed-native>> =
                                                            <<(X bsl N +
                                                                   Acc):32/unsigned-native>>,
                                                        id(Res, TrUserData)
                                                    end),
                             TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    NewFValue,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_signature(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_signature(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
d_field_blockchain_poc_receipt_v1_pb_signature(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, _, F@_7, F@_8, F@_9, F@_10,
                                               F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    NewFValue,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_snr(<<0:16, 128,
                                           127, Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, _, F@_8, F@_9, F@_10, F@_11,
                                         F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id(infinity, TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData);
d_field_blockchain_poc_receipt_v1_pb_snr(<<0:16, 128,
                                           255, Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, _, F@_8, F@_9, F@_10, F@_11,
                                         F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id('-infinity', TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData);
d_field_blockchain_poc_receipt_v1_pb_snr(<<_:16, 1:1,
                                           _:7, _:1, 127:7, Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, _, F@_8, F@_9, F@_10, F@_11,
                                         F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id(nan, TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData);
d_field_blockchain_poc_receipt_v1_pb_snr(<<Value:32/little-float,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, _, F@_8, F@_9, F@_10, F@_11,
                                         F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id(Value, TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_frequency(<<0:16,
                                                 128, 127, Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, _, F@_9, F@_10,
                                               F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    id(infinity, TrUserData),
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData);
d_field_blockchain_poc_receipt_v1_pb_frequency(<<0:16,
                                                 128, 255, Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, _, F@_9, F@_10,
                                               F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    id('-infinity', TrUserData),
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData);
d_field_blockchain_poc_receipt_v1_pb_frequency(<<_:16,
                                                 1:1, _:7, _:1, 127:7,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, _, F@_9, F@_10,
                                               F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    id(nan, TrUserData),
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData);
d_field_blockchain_poc_receipt_v1_pb_frequency(<<Value:32/little-float,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, _, F@_9, F@_10,
                                               F@_11, F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    id(Value, TrUserData),
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_channel(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_channel(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 F@_10,
                                                 F@_11,
                                                 F@_12,
                                                 TrUserData);
d_field_blockchain_poc_receipt_v1_pb_channel(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, _, F@_10,
                                             F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    NewFValue,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_datarate(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, F@_9,
                                              F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_datarate(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  TrUserData);
d_field_blockchain_poc_receipt_v1_pb_datarate(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, F@_9, _,
                                              F@_11, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    NewFValue,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_addr_hash(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_addr_hash(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   F@_10,
                                                   F@_11,
                                                   F@_12,
                                                   TrUserData);
d_field_blockchain_poc_receipt_v1_pb_addr_hash(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               F@_10, _, F@_12, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    NewFValue,
                                                    F@_12,
                                                    TrUserData).

d_field_blockchain_poc_receipt_v1_pb_tx_power(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, F@_9,
                                              F@_10, F@_11, F@_12, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_receipt_v1_pb_tx_power(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  F@_10,
                                                  F@_11,
                                                  F@_12,
                                                  TrUserData);
d_field_blockchain_poc_receipt_v1_pb_tx_power(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, F@_9,
                                              F@_10, F@_11, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    NewFValue,
                                                    TrUserData).

skip_varint_blockchain_poc_receipt_v1_pb(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                         F@_12, TrUserData) ->
    skip_varint_blockchain_poc_receipt_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             F@_10,
                                             F@_11,
                                             F@_12,
                                             TrUserData);
skip_varint_blockchain_poc_receipt_v1_pb(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
                                         F@_12, TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

skip_length_delimited_blockchain_poc_receipt_v1_pb(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, F@_6, F@_7, F@_8,
                                                   F@_9, F@_10, F@_11, F@_12,
                                                   TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_poc_receipt_v1_pb(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       F@_10,
                                                       F@_11,
                                                       F@_12,
                                                       TrUserData);
skip_length_delimited_blockchain_poc_receipt_v1_pb(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, F@_6, F@_7, F@_8,
                                                   F@_9, F@_10, F@_11, F@_12,
                                                   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

skip_group_blockchain_poc_receipt_v1_pb(Bin, FNum, Z2,
                                        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                        F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
                                        TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

skip_32_blockchain_poc_receipt_v1_pb(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
                                     TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

skip_64_blockchain_poc_receipt_v1_pb(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
                                     TrUserData) ->
    dfp_read_field_def_blockchain_poc_receipt_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    F@_10,
                                                    F@_11,
                                                    F@_12,
                                                    TrUserData).

decode_msg_blockchain_poc_witness_v1_pb(Bin,
                                        TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Bin,
                                                    0,
                                                    0,
                                                    id(<<>>, TrUserData),
                                                    id(0, TrUserData),
                                                    id(0, TrUserData),
                                                    id(<<>>, TrUserData),
                                                    id(<<>>, TrUserData),
                                                    id(0.0, TrUserData),
                                                    id(0.0, TrUserData),
                                                    id(0, TrUserData),
                                                    id([], TrUserData),
                                                    TrUserData).

dfp_read_field_def_blockchain_poc_witness_v1_pb(<<10,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_gateway(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<16,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_timestamp(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<24,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_signal(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<34,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_packet_hash(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<42,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_signature(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<53,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_snr(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<61,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_frequency(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<64,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_channel(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<74,
                                                  Rest/binary>>,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    d_field_blockchain_poc_witness_v1_pb_datarate(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  TrUserData);
dfp_read_field_def_blockchain_poc_witness_v1_pb(<<>>, 0,
                                                0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                                F@_6, F@_7, F@_8, F@_9, _) ->
    #blockchain_poc_witness_v1_pb{gateway = F@_1,
                                  timestamp = F@_2, signal = F@_3,
                                  packet_hash = F@_4, signature = F@_5,
                                  snr = F@_6, frequency = F@_7, channel = F@_8,
                                  datarate = F@_9};
dfp_read_field_def_blockchain_poc_witness_v1_pb(Other,
                                                Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                F@_5, F@_6, F@_7, F@_8, F@_9,
                                                TrUserData) ->
    dg_read_field_def_blockchain_poc_witness_v1_pb(Other,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData).

dg_read_field_def_blockchain_poc_witness_v1_pb(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData);
dg_read_field_def_blockchain_poc_witness_v1_pb(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_poc_witness_v1_pb_gateway(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         TrUserData);
        16 ->
            d_field_blockchain_poc_witness_v1_pb_timestamp(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           TrUserData);
        24 ->
            d_field_blockchain_poc_witness_v1_pb_signal(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        F@_8,
                                                        F@_9,
                                                        TrUserData);
        34 ->
            d_field_blockchain_poc_witness_v1_pb_packet_hash(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             TrUserData);
        42 ->
            d_field_blockchain_poc_witness_v1_pb_signature(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           TrUserData);
        53 ->
            d_field_blockchain_poc_witness_v1_pb_snr(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     TrUserData);
        61 ->
            d_field_blockchain_poc_witness_v1_pb_frequency(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           F@_8,
                                                           F@_9,
                                                           TrUserData);
        64 ->
            d_field_blockchain_poc_witness_v1_pb_channel(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         TrUserData);
        74 ->
            d_field_blockchain_poc_witness_v1_pb_datarate(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          F@_8,
                                                          F@_9,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_poc_witness_v1_pb(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             F@_8,
                                                             F@_9,
                                                             TrUserData);
                1 ->
                    skip_64_blockchain_poc_witness_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         TrUserData);
                2 ->
                    skip_length_delimited_blockchain_poc_witness_v1_pb(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       F@_2,
                                                                       F@_3,
                                                                       F@_4,
                                                                       F@_5,
                                                                       F@_6,
                                                                       F@_7,
                                                                       F@_8,
                                                                       F@_9,
                                                                       TrUserData);
                3 ->
                    skip_group_blockchain_poc_witness_v1_pb(Rest,
                                                            Key bsr 3,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            F@_8,
                                                            F@_9,
                                                            TrUserData);
                5 ->
                    skip_32_blockchain_poc_witness_v1_pb(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         F@_8,
                                                         F@_9,
                                                         TrUserData)
            end
    end;
dg_read_field_def_blockchain_poc_witness_v1_pb(<<>>, 0,
                                               0, F@_1, F@_2, F@_3, F@_4, F@_5,
                                               F@_6, F@_7, F@_8, F@_9, _) ->
    #blockchain_poc_witness_v1_pb{gateway = F@_1,
                                  timestamp = F@_2, signal = F@_3,
                                  packet_hash = F@_4, signature = F@_5,
                                  snr = F@_6, frequency = F@_7, channel = F@_8,
                                  datarate = F@_9}.

d_field_blockchain_poc_witness_v1_pb_gateway(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_gateway(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 TrUserData);
d_field_blockchain_poc_witness_v1_pb_gateway(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, _, F@_2, F@_3, F@_4, F@_5,
                                             F@_6, F@_7, F@_8, F@_9,
                                             TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    NewFValue,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_timestamp(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_timestamp(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData);
d_field_blockchain_poc_witness_v1_pb_timestamp(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, _, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    NewFValue,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_signal(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            F@_5, F@_6, F@_7, F@_8, F@_9,
                                            TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_signal(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                F@_5,
                                                F@_6,
                                                F@_7,
                                                F@_8,
                                                F@_9,
                                                TrUserData);
d_field_blockchain_poc_witness_v1_pb_signal(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, _, F@_4, F@_5,
                                            F@_6, F@_7, F@_8, F@_9,
                                            TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = X bsl N + Acc,
                              if ZValue band 1 =:= 0 ->
                                     id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    NewFValue,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_packet_hash(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_packet_hash(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     F@_8,
                                                     F@_9,
                                                     TrUserData);
d_field_blockchain_poc_witness_v1_pb_packet_hash(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, _,
                                                 F@_5, F@_6, F@_7, F@_8, F@_9,
                                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    NewFValue,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_signature(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, F@_8, F@_9,
                                               TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_signature(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   F@_8,
                                                   F@_9,
                                                   TrUserData);
d_field_blockchain_poc_witness_v1_pb_signature(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               _, F@_6, F@_7, F@_8, F@_9,
                                               TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    NewFValue,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_snr(<<0:16, 128,
                                           127, Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         _, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    id(infinity, TrUserData),
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData);
d_field_blockchain_poc_witness_v1_pb_snr(<<0:16, 128,
                                           255, Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         _, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    id('-infinity', TrUserData),
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData);
d_field_blockchain_poc_witness_v1_pb_snr(<<_:16, 1:1,
                                           _:7, _:1, 127:7, Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         _, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    id(nan, TrUserData),
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData);
d_field_blockchain_poc_witness_v1_pb_snr(<<Value:32/little-float,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         _, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    id(Value, TrUserData),
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_frequency(<<0:16,
                                                 128, 127, Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, _, F@_8, F@_9,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id(infinity, TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData);
d_field_blockchain_poc_witness_v1_pb_frequency(<<0:16,
                                                 128, 255, Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, _, F@_8, F@_9,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id('-infinity', TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData);
d_field_blockchain_poc_witness_v1_pb_frequency(<<_:16,
                                                 1:1, _:7, _:1, 127:7,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, _, F@_8, F@_9,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id(nan, TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData);
d_field_blockchain_poc_witness_v1_pb_frequency(<<Value:32/little-float,
                                                 Rest/binary>>,
                                               Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, _, F@_8, F@_9,
                                               TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    id(Value, TrUserData),
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_channel(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, F@_8, F@_9,
                                             TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_channel(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 F@_5,
                                                 F@_6,
                                                 F@_7,
                                                 F@_8,
                                                 F@_9,
                                                 TrUserData);
d_field_blockchain_poc_witness_v1_pb_channel(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             F@_5, F@_6, F@_7, _, F@_9,
                                             TrUserData) ->
    {NewFValue, RestF} = {begin
                              <<Res:32/signed-native>> = <<(X bsl N +
                                                                Acc):32/unsigned-native>>,
                              id(Res, TrUserData)
                          end,
                          Rest},
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    NewFValue,
                                                    F@_9,
                                                    TrUserData).

d_field_blockchain_poc_witness_v1_pb_datarate(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, F@_9,
                                              TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_witness_v1_pb_datarate(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  F@_8,
                                                  F@_9,
                                                  TrUserData);
d_field_blockchain_poc_witness_v1_pb_datarate(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, F@_8, _,
                                              TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_witness_v1_pb(RestF,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    NewFValue,
                                                    TrUserData).

skip_varint_blockchain_poc_witness_v1_pb(<<1:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    skip_varint_blockchain_poc_witness_v1_pb(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             F@_5,
                                             F@_6,
                                             F@_7,
                                             F@_8,
                                             F@_9,
                                             TrUserData);
skip_varint_blockchain_poc_witness_v1_pb(<<0:1, _:7,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                         F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

skip_length_delimited_blockchain_poc_witness_v1_pb(<<1:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, F@_6, F@_7, F@_8,
                                                   F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_poc_witness_v1_pb(Rest,
                                                       N + 7,
                                                       X bsl N + Acc,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       F@_5,
                                                       F@_6,
                                                       F@_7,
                                                       F@_8,
                                                       F@_9,
                                                       TrUserData);
skip_length_delimited_blockchain_poc_witness_v1_pb(<<0:1,
                                                     X:7, Rest/binary>>,
                                                   N, Acc, F@_1, F@_2, F@_3,
                                                   F@_4, F@_5, F@_6, F@_7, F@_8,
                                                   F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest2,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

skip_group_blockchain_poc_witness_v1_pb(Bin, FNum, Z2,
                                        F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                        F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    0,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

skip_32_blockchain_poc_witness_v1_pb(<<_:32,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

skip_64_blockchain_poc_witness_v1_pb(<<_:64,
                                       Rest/binary>>,
                                     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
                                     F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_blockchain_poc_witness_v1_pb(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    F@_5,
                                                    F@_6,
                                                    F@_7,
                                                    F@_8,
                                                    F@_9,
                                                    TrUserData).

decode_msg_blockchain_poc_response_v1_pb(Bin,
                                         TrUserData) ->
    dfp_read_field_def_blockchain_poc_response_v1_pb(Bin,
                                                     0,
                                                     0,
                                                     id(undefined, TrUserData),
                                                     TrUserData).

dfp_read_field_def_blockchain_poc_response_v1_pb(<<10,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_blockchain_poc_response_v1_pb_receipt(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData);
dfp_read_field_def_blockchain_poc_response_v1_pb(<<18,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, TrUserData) ->
    d_field_blockchain_poc_response_v1_pb_witness(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData);
dfp_read_field_def_blockchain_poc_response_v1_pb(<<>>,
                                                 0, 0, F@_1, _) ->
    #blockchain_poc_response_v1_pb{payload = F@_1};
dfp_read_field_def_blockchain_poc_response_v1_pb(Other,
                                                 Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_blockchain_poc_response_v1_pb(Other,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    TrUserData).

dg_read_field_def_blockchain_poc_response_v1_pb(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_poc_response_v1_pb(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    TrUserData);
dg_read_field_def_blockchain_poc_response_v1_pb(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_poc_response_v1_pb_receipt(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
        18 ->
            d_field_blockchain_poc_response_v1_pb_witness(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_poc_response_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                1 ->
                    skip_64_blockchain_poc_response_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                2 ->
                    skip_length_delimited_blockchain_poc_response_v1_pb(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        TrUserData);
                3 ->
                    skip_group_blockchain_poc_response_v1_pb(Rest,
                                                             Key bsr 3,
                                                             0,
                                                             F@_1,
                                                             TrUserData);
                5 ->
                    skip_32_blockchain_poc_response_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData)
            end
    end;
dg_read_field_def_blockchain_poc_response_v1_pb(<<>>, 0,
                                                0, F@_1, _) ->
    #blockchain_poc_response_v1_pb{payload = F@_1}.

d_field_blockchain_poc_response_v1_pb_receipt(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_response_v1_pb_receipt(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
d_field_blockchain_poc_response_v1_pb_receipt(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_receipt_v1_pb(Bs,
                                                                         TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_response_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     case Prev of
                                                         undefined ->
                                                             id({receipt,
                                                                 NewFValue},
                                                                TrUserData);
                                                         {receipt, MVPrev} ->
                                                             id({receipt,
                                                                 merge_msg_blockchain_poc_receipt_v1_pb(MVPrev,
                                                                                                        NewFValue,
                                                                                                        TrUserData)},
                                                                TrUserData);
                                                         _ ->
                                                             id({receipt,
                                                                 NewFValue},
                                                                TrUserData)
                                                     end,
                                                     TrUserData).

d_field_blockchain_poc_response_v1_pb_witness(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_response_v1_pb_witness(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  TrUserData);
d_field_blockchain_poc_response_v1_pb_witness(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_witness_v1_pb(Bs,
                                                                         TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_response_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     case Prev of
                                                         undefined ->
                                                             id({witness,
                                                                 NewFValue},
                                                                TrUserData);
                                                         {witness, MVPrev} ->
                                                             id({witness,
                                                                 merge_msg_blockchain_poc_witness_v1_pb(MVPrev,
                                                                                                        NewFValue,
                                                                                                        TrUserData)},
                                                                TrUserData);
                                                         _ ->
                                                             id({witness,
                                                                 NewFValue},
                                                                TrUserData)
                                                     end,
                                                     TrUserData).

skip_varint_blockchain_poc_response_v1_pb(<<1:1, _:7,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    skip_varint_blockchain_poc_response_v1_pb(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              TrUserData);
skip_varint_blockchain_poc_response_v1_pb(<<0:1, _:7,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_poc_response_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

skip_length_delimited_blockchain_poc_response_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_poc_response_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        TrUserData);
skip_length_delimited_blockchain_poc_response_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_poc_response_v1_pb(Rest2,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData).

skip_group_blockchain_poc_response_v1_pb(Bin, FNum, Z2,
                                         F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_poc_response_v1_pb(Rest,
                                                     0,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

skip_32_blockchain_poc_response_v1_pb(<<_:32,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_poc_response_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

skip_64_blockchain_poc_response_v1_pb(<<_:64,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_poc_response_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

decode_msg_blockchain_poc_path_element_v1_pb(Bin,
                                             TrUserData) ->
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(Bin,
                                                         0,
                                                         0,
                                                         id(<<>>, TrUserData),
                                                         id(undefined,
                                                            TrUserData),
                                                         id([], TrUserData),
                                                         TrUserData).

dfp_read_field_def_blockchain_poc_path_element_v1_pb(<<10,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    d_field_blockchain_poc_path_element_v1_pb_challengee(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
dfp_read_field_def_blockchain_poc_path_element_v1_pb(<<18,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    d_field_blockchain_poc_path_element_v1_pb_receipt(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
dfp_read_field_def_blockchain_poc_path_element_v1_pb(<<26,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    d_field_blockchain_poc_path_element_v1_pb_witnesses(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dfp_read_field_def_blockchain_poc_path_element_v1_pb(<<>>,
                                                     0, 0, F@_1, F@_2, R1,
                                                     TrUserData) ->
    #blockchain_poc_path_element_v1_pb{challengee = F@_1,
                                       receipt = F@_2,
                                       witnesses =
                                           lists_reverse(R1, TrUserData)};
dfp_read_field_def_blockchain_poc_path_element_v1_pb(Other,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     TrUserData) ->
    dg_read_field_def_blockchain_poc_path_element_v1_pb(Other,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData).

dg_read_field_def_blockchain_poc_path_element_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_poc_path_element_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
dg_read_field_def_blockchain_poc_path_element_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_poc_path_element_v1_pb_challengee(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
        18 ->
            d_field_blockchain_poc_path_element_v1_pb_receipt(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
        26 ->
            d_field_blockchain_poc_path_element_v1_pb_witnesses(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_poc_path_element_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  TrUserData);
                1 ->
                    skip_64_blockchain_poc_path_element_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData);
                2 ->
                    skip_length_delimited_blockchain_poc_path_element_v1_pb(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            TrUserData);
                3 ->
                    skip_group_blockchain_poc_path_element_v1_pb(Rest,
                                                                 Key bsr 3,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 TrUserData);
                5 ->
                    skip_32_blockchain_poc_path_element_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              TrUserData)
            end
    end;
dg_read_field_def_blockchain_poc_path_element_v1_pb(<<>>,
                                                    0, 0, F@_1, F@_2, R1,
                                                    TrUserData) ->
    #blockchain_poc_path_element_v1_pb{challengee = F@_1,
                                       receipt = F@_2,
                                       witnesses =
                                           lists_reverse(R1, TrUserData)}.

d_field_blockchain_poc_path_element_v1_pb_challengee(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_path_element_v1_pb_challengee(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData);
d_field_blockchain_poc_path_element_v1_pb_challengee(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, _, F@_2, F@_3,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         NewFValue,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

d_field_blockchain_poc_path_element_v1_pb_receipt(<<1:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, F@_2, F@_3,
                                                  TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_path_element_v1_pb_receipt(Rest,
                                                      N + 7,
                                                      X bsl N + Acc,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      TrUserData);
d_field_blockchain_poc_path_element_v1_pb_receipt(<<0:1,
                                                    X:7, Rest/binary>>,
                                                  N, Acc, F@_1, Prev, F@_3,
                                                  TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_receipt_v1_pb(Bs,
                                                                         TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         if Prev == undefined ->
                                                                NewFValue;
                                                            true ->
                                                                merge_msg_blockchain_poc_receipt_v1_pb(Prev,
                                                                                                       NewFValue,
                                                                                                       TrUserData)
                                                         end,
                                                         F@_3,
                                                         TrUserData).

d_field_blockchain_poc_path_element_v1_pb_witnesses(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    TrUserData)
    when N < 57 ->
    d_field_blockchain_poc_path_element_v1_pb_witnesses(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        TrUserData);
d_field_blockchain_poc_path_element_v1_pb_witnesses(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, Prev,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_witness_v1_pb(Bs,
                                                                         TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         cons(NewFValue,
                                                              Prev,
                                                              TrUserData),
                                                         TrUserData).

skip_varint_blockchain_poc_path_element_v1_pb(<<1:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    skip_varint_blockchain_poc_path_element_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  TrUserData);
skip_varint_blockchain_poc_path_element_v1_pb(<<0:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3,
                                              TrUserData) ->
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_length_delimited_blockchain_poc_path_element_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_poc_path_element_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            TrUserData);
skip_length_delimited_blockchain_poc_path_element_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(Rest2,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_group_blockchain_poc_path_element_v1_pb(Bin, FNum,
                                             Z2, F@_1, F@_2, F@_3,
                                             TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(Rest,
                                                         0,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_32_blockchain_poc_path_element_v1_pb(<<_:32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

skip_64_blockchain_poc_path_element_v1_pb(<<_:64,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3,
                                          TrUserData) ->
    dfp_read_field_def_blockchain_poc_path_element_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         TrUserData).

decode_msg_blockchain_txn_poc_receipts_v2_pb(Bin,
                                             TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Bin,
                                                         0,
                                                         0,
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id([], TrUserData),
                                                         id(0, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         id(<<>>, TrUserData),
                                                         TrUserData).

dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<10,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_challenger(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<18,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_secret(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<26,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_onion_key_hash(Rest,
                                                             Z1,
                                                             Z2,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<34,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_path(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<40,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_fee(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<50,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_signature(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<58,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    d_field_blockchain_txn_poc_receipts_v2_pb_block_hash(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData);
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<>>,
                                                     0, 0, F@_1, F@_2, F@_3, R1,
                                                     F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    #blockchain_txn_poc_receipts_v2_pb{challenger = F@_1,
                                       secret = F@_2, onion_key_hash = F@_3,
                                       path = lists_reverse(R1, TrUserData),
                                       fee = F@_5, signature = F@_6,
                                       block_hash = F@_7};
dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Other,
                                                     Z1, Z2, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    dg_read_field_def_blockchain_txn_poc_receipts_v2_pb(Other,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData).

dg_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
dg_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_challenger(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
        18 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_secret(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             TrUserData);
        26 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_onion_key_hash(Rest,
                                                                     0,
                                                                     0,
                                                                     F@_1,
                                                                     F@_2,
                                                                     F@_3,
                                                                     F@_4,
                                                                     F@_5,
                                                                     F@_6,
                                                                     F@_7,
                                                                     TrUserData);
        34 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_path(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           F@_5,
                                                           F@_6,
                                                           F@_7,
                                                           TrUserData);
        40 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_fee(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          F@_5,
                                                          F@_6,
                                                          F@_7,
                                                          TrUserData);
        50 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_signature(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                F@_5,
                                                                F@_6,
                                                                F@_7,
                                                                TrUserData);
        58 ->
            d_field_blockchain_txn_poc_receipts_v2_pb_block_hash(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  F@_2,
                                                                  F@_3,
                                                                  F@_4,
                                                                  F@_5,
                                                                  F@_6,
                                                                  F@_7,
                                                                  TrUserData);
                1 ->
                    skip_64_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              TrUserData);
                2 ->
                    skip_length_delimited_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            F@_2,
                                                                            F@_3,
                                                                            F@_4,
                                                                            F@_5,
                                                                            F@_6,
                                                                            F@_7,
                                                                            TrUserData);
                3 ->
                    skip_group_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                                 Key bsr 3,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 F@_5,
                                                                 F@_6,
                                                                 F@_7,
                                                                 TrUserData);
                5 ->
                    skip_32_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              F@_5,
                                                              F@_6,
                                                              F@_7,
                                                              TrUserData)
            end
    end;
dg_read_field_def_blockchain_txn_poc_receipts_v2_pb(<<>>,
                                                    0, 0, F@_1, F@_2, F@_3, R1,
                                                    F@_5, F@_6, F@_7,
                                                    TrUserData) ->
    #blockchain_txn_poc_receipts_v2_pb{challenger = F@_1,
                                       secret = F@_2, onion_key_hash = F@_3,
                                       path = lists_reverse(R1, TrUserData),
                                       fee = F@_5, signature = F@_6,
                                       block_hash = F@_7}.

d_field_blockchain_txn_poc_receipts_v2_pb_challenger(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_challenger(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_challenger(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, _, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         NewFValue,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v2_pb_secret(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_secret(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     F@_5,
                                                     F@_6,
                                                     F@_7,
                                                     TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_secret(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, _, F@_3, F@_4,
                                                 F@_5, F@_6, F@_7,
                                                 TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         NewFValue,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v2_pb_onion_key_hash(<<1:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2,
                                                         F@_3, F@_4, F@_5, F@_6,
                                                         F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_onion_key_hash(Rest,
                                                             N + 7,
                                                             X bsl N + Acc,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             F@_5,
                                                             F@_6,
                                                             F@_7,
                                                             TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_onion_key_hash(<<0:1,
                                                           X:7, Rest/binary>>,
                                                         N, Acc, F@_1, F@_2, _,
                                                         F@_4, F@_5, F@_6, F@_7,
                                                         TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         NewFValue,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v2_pb_path(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_path(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   F@_5,
                                                   F@_6,
                                                   F@_7,
                                                   TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_path(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, Prev,
                                               F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_poc_path_element_v1_pb(Bs,
                                                                              TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         cons(NewFValue,
                                                              Prev,
                                                              TrUserData),
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v2_pb_fee(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_fee(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_fee(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4, _,
                                              F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         NewFValue,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v2_pb_signature(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, F@_6, F@_7,
                                                    TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_signature(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        F@_5,
                                                        F@_6,
                                                        F@_7,
                                                        TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_signature(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, F@_5, _, F@_7,
                                                    TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         NewFValue,
                                                         F@_7,
                                                         TrUserData).

d_field_blockchain_txn_poc_receipts_v2_pb_block_hash(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, F@_7,
                                                     TrUserData)
    when N < 57 ->
    d_field_blockchain_txn_poc_receipts_v2_pb_block_hash(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData);
d_field_blockchain_txn_poc_receipts_v2_pb_block_hash(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, F@_2, F@_3,
                                                     F@_4, F@_5, F@_6, _,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bytes:Len/binary, Rest2/binary>> = Rest,
                             {id(binary:copy(Bytes), TrUserData), Rest2}
                         end,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(RestF,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         NewFValue,
                                                         TrUserData).

skip_varint_blockchain_txn_poc_receipts_v2_pb(<<1:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  F@_5,
                                                  F@_6,
                                                  F@_7,
                                                  TrUserData);
skip_varint_blockchain_txn_poc_receipts_v2_pb(<<0:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                              F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_length_delimited_blockchain_txn_poc_receipts_v2_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            F@_5,
                                                            F@_6,
                                                            F@_7,
                                                            TrUserData);
skip_length_delimited_blockchain_txn_poc_receipts_v2_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, F@_5, F@_6,
                                                        F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Rest2,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_group_blockchain_txn_poc_receipts_v2_pb(Bin, FNum,
                                             Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                             F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                         0,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_32_blockchain_txn_poc_receipts_v2_pb(<<_:32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

skip_64_blockchain_txn_poc_receipts_v2_pb(<<_:64,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
                                          F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_blockchain_txn_poc_receipts_v2_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         F@_5,
                                                         F@_6,
                                                         F@_7,
                                                         TrUserData).

decode_msg_blockchain_region_params_v1_pb(Bin,
                                          TrUserData) ->
    dfp_read_field_def_blockchain_region_params_v1_pb(Bin,
                                                      0,
                                                      0,
                                                      id([], TrUserData),
                                                      TrUserData).

dfp_read_field_def_blockchain_region_params_v1_pb(<<10,
                                                    Rest/binary>>,
                                                  Z1, Z2, F@_1, TrUserData) ->
    d_field_blockchain_region_params_v1_pb_region_params(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData);
dfp_read_field_def_blockchain_region_params_v1_pb(<<>>,
                                                  0, 0, R1, TrUserData) ->
    #blockchain_region_params_v1_pb{region_params =
                                        lists_reverse(R1, TrUserData)};
dfp_read_field_def_blockchain_region_params_v1_pb(Other,
                                                  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_blockchain_region_params_v1_pb(Other,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     TrUserData).

dg_read_field_def_blockchain_region_params_v1_pb(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_region_params_v1_pb(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     TrUserData);
dg_read_field_def_blockchain_region_params_v1_pb(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_region_params_v1_pb_region_params(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_region_params_v1_pb(Rest,
                                                               0,
                                                               0,
                                                               F@_1,
                                                               TrUserData);
                1 ->
                    skip_64_blockchain_region_params_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData);
                2 ->
                    skip_length_delimited_blockchain_region_params_v1_pb(Rest,
                                                                         0,
                                                                         0,
                                                                         F@_1,
                                                                         TrUserData);
                3 ->
                    skip_group_blockchain_region_params_v1_pb(Rest,
                                                              Key bsr 3,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                5 ->
                    skip_32_blockchain_region_params_v1_pb(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           TrUserData)
            end
    end;
dg_read_field_def_blockchain_region_params_v1_pb(<<>>,
                                                 0, 0, R1, TrUserData) ->
    #blockchain_region_params_v1_pb{region_params =
                                        lists_reverse(R1, TrUserData)}.

d_field_blockchain_region_params_v1_pb_region_params(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_blockchain_region_params_v1_pb_region_params(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         TrUserData);
d_field_blockchain_region_params_v1_pb_region_params(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, Prev,
                                                     TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_region_param_v1_pb(Bs,
                                                                          TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_region_params_v1_pb(RestF,
                                                      0,
                                                      0,
                                                      cons(NewFValue,
                                                           Prev,
                                                           TrUserData),
                                                      TrUserData).

skip_varint_blockchain_region_params_v1_pb(<<1:1, _:7,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    skip_varint_blockchain_region_params_v1_pb(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData);
skip_varint_blockchain_region_params_v1_pb(<<0:1, _:7,
                                             Rest/binary>>,
                                           Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_region_params_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData).

skip_length_delimited_blockchain_region_params_v1_pb(<<1:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_region_params_v1_pb(Rest,
                                                         N + 7,
                                                         X bsl N + Acc,
                                                         F@_1,
                                                         TrUserData);
skip_length_delimited_blockchain_region_params_v1_pb(<<0:1,
                                                       X:7, Rest/binary>>,
                                                     N, Acc, F@_1,
                                                     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_region_params_v1_pb(Rest2,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData).

skip_group_blockchain_region_params_v1_pb(Bin, FNum, Z2,
                                          F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_region_params_v1_pb(Rest,
                                                      0,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData).

skip_32_blockchain_region_params_v1_pb(<<_:32,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_region_params_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData).

skip_64_blockchain_region_params_v1_pb(<<_:64,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_region_params_v1_pb(Rest,
                                                      Z1,
                                                      Z2,
                                                      F@_1,
                                                      TrUserData).

decode_msg_tagged_spreading_pb(Bin, TrUserData) ->
    dfp_read_field_def_tagged_spreading_pb(Bin,
                                           0,
                                           0,
                                           id('SF_INVALID', TrUserData),
                                           id(0, TrUserData),
                                           TrUserData).

dfp_read_field_def_tagged_spreading_pb(<<8,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_tagged_spreading_pb_region_spreading(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
dfp_read_field_def_tagged_spreading_pb(<<16,
                                         Rest/binary>>,
                                       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_tagged_spreading_pb_max_packet_size(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
dfp_read_field_def_tagged_spreading_pb(<<>>, 0, 0, F@_1,
                                       F@_2, _) ->
    #tagged_spreading_pb{region_spreading = F@_1,
                         max_packet_size = F@_2};
dfp_read_field_def_tagged_spreading_pb(Other, Z1, Z2,
                                       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_tagged_spreading_pb(Other,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          TrUserData).

dg_read_field_def_tagged_spreading_pb(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_tagged_spreading_pb(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          F@_2,
                                          TrUserData);
dg_read_field_def_tagged_spreading_pb(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_tagged_spreading_pb_region_spreading(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         TrUserData);
        16 ->
            d_field_tagged_spreading_pb_max_packet_size(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_tagged_spreading_pb(Rest,
                                                    0,
                                                    0,
                                                    F@_1,
                                                    F@_2,
                                                    TrUserData);
                1 ->
                    skip_64_tagged_spreading_pb(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
                2 ->
                    skip_length_delimited_tagged_spreading_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              TrUserData);
                3 ->
                    skip_group_tagged_spreading_pb(Rest,
                                                   Key bsr 3,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   TrUserData);
                5 ->
                    skip_32_tagged_spreading_pb(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                F@_2,
                                                TrUserData)
            end
    end;
dg_read_field_def_tagged_spreading_pb(<<>>, 0, 0, F@_1,
                                      F@_2, _) ->
    #tagged_spreading_pb{region_spreading = F@_1,
                         max_packet_size = F@_2}.

d_field_tagged_spreading_pb_region_spreading(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_tagged_spreading_pb_region_spreading(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 TrUserData);
d_field_tagged_spreading_pb_region_spreading(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
        {id('d_enum_helium.RegionSpreading'(begin
                                                <<Res:32/signed-native>> = <<(X
                                                                                  bsl
                                                                                  N
                                                                                  +
                                                                                  Acc):32/unsigned-native>>,
                                                id(Res, TrUserData)
                                            end),
            TrUserData),
         Rest},
    dfp_read_field_def_tagged_spreading_pb(RestF,
                                           0,
                                           0,
                                           NewFValue,
                                           F@_2,
                                           TrUserData).

d_field_tagged_spreading_pb_max_packet_size(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_tagged_spreading_pb_max_packet_size(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                TrUserData);
d_field_tagged_spreading_pb_max_packet_size(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_tagged_spreading_pb(RestF,
                                           0,
                                           0,
                                           F@_1,
                                           NewFValue,
                                           TrUserData).

skip_varint_tagged_spreading_pb(<<1:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_tagged_spreading_pb(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
skip_varint_tagged_spreading_pb(<<0:1, _:7,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_tagged_spreading_pb(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_length_delimited_tagged_spreading_pb(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_tagged_spreading_pb(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              TrUserData);
skip_length_delimited_tagged_spreading_pb(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_tagged_spreading_pb(Rest2,
                                           0,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_group_tagged_spreading_pb(Bin, FNum, Z2, F@_1,
                               F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_tagged_spreading_pb(Rest,
                                           0,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_32_tagged_spreading_pb(<<_:32, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_tagged_spreading_pb(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

skip_64_tagged_spreading_pb(<<_:64, Rest/binary>>, Z1,
                            Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_tagged_spreading_pb(Rest,
                                           Z1,
                                           Z2,
                                           F@_1,
                                           F@_2,
                                           TrUserData).

decode_msg_blockchain_region_spreading_v1_pb(Bin,
                                             TrUserData) ->
    dfp_read_field_def_blockchain_region_spreading_v1_pb(Bin,
                                                         0,
                                                         0,
                                                         id([], TrUserData),
                                                         TrUserData).

dfp_read_field_def_blockchain_region_spreading_v1_pb(<<10,
                                                       Rest/binary>>,
                                                     Z1, Z2, F@_1,
                                                     TrUserData) ->
    d_field_blockchain_region_spreading_v1_pb_tagged_spreading(Rest,
                                                               Z1,
                                                               Z2,
                                                               F@_1,
                                                               TrUserData);
dfp_read_field_def_blockchain_region_spreading_v1_pb(<<>>,
                                                     0, 0, R1, TrUserData) ->
    #blockchain_region_spreading_v1_pb{tagged_spreading =
                                           lists_reverse(R1, TrUserData)};
dfp_read_field_def_blockchain_region_spreading_v1_pb(Other,
                                                     Z1, Z2, F@_1,
                                                     TrUserData) ->
    dg_read_field_def_blockchain_region_spreading_v1_pb(Other,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        TrUserData).

dg_read_field_def_blockchain_region_spreading_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_region_spreading_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        TrUserData);
dg_read_field_def_blockchain_region_spreading_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_region_spreading_v1_pb_tagged_spreading(Rest,
                                                                       0,
                                                                       0,
                                                                       F@_1,
                                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_region_spreading_v1_pb(Rest,
                                                                  0,
                                                                  0,
                                                                  F@_1,
                                                                  TrUserData);
                1 ->
                    skip_64_blockchain_region_spreading_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData);
                2 ->
                    skip_length_delimited_blockchain_region_spreading_v1_pb(Rest,
                                                                            0,
                                                                            0,
                                                                            F@_1,
                                                                            TrUserData);
                3 ->
                    skip_group_blockchain_region_spreading_v1_pb(Rest,
                                                                 Key bsr 3,
                                                                 0,
                                                                 F@_1,
                                                                 TrUserData);
                5 ->
                    skip_32_blockchain_region_spreading_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              TrUserData)
            end
    end;
dg_read_field_def_blockchain_region_spreading_v1_pb(<<>>,
                                                    0, 0, R1, TrUserData) ->
    #blockchain_region_spreading_v1_pb{tagged_spreading =
                                           lists_reverse(R1, TrUserData)}.

d_field_blockchain_region_spreading_v1_pb_tagged_spreading(<<1:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, F@_1,
                                                           TrUserData)
    when N < 57 ->
    d_field_blockchain_region_spreading_v1_pb_tagged_spreading(Rest,
                                                               N + 7,
                                                               X bsl N + Acc,
                                                               F@_1,
                                                               TrUserData);
d_field_blockchain_region_spreading_v1_pb_tagged_spreading(<<0:1,
                                                             X:7, Rest/binary>>,
                                                           N, Acc, Prev,
                                                           TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_tagged_spreading_pb(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_region_spreading_v1_pb(RestF,
                                                         0,
                                                         0,
                                                         cons(NewFValue,
                                                              Prev,
                                                              TrUserData),
                                                         TrUserData).

skip_varint_blockchain_region_spreading_v1_pb(<<1:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    skip_varint_blockchain_region_spreading_v1_pb(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  TrUserData);
skip_varint_blockchain_region_spreading_v1_pb(<<0:1,
                                                _:7, Rest/binary>>,
                                              Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_region_spreading_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

skip_length_delimited_blockchain_region_spreading_v1_pb(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_region_spreading_v1_pb(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            TrUserData);
skip_length_delimited_blockchain_region_spreading_v1_pb(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1,
                                                        TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_region_spreading_v1_pb(Rest2,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         TrUserData).

skip_group_blockchain_region_spreading_v1_pb(Bin, FNum,
                                             Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_region_spreading_v1_pb(Rest,
                                                         0,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

skip_32_blockchain_region_spreading_v1_pb(<<_:32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_region_spreading_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

skip_64_blockchain_region_spreading_v1_pb(<<_:64,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_blockchain_region_spreading_v1_pb(Rest,
                                                         Z1,
                                                         Z2,
                                                         F@_1,
                                                         TrUserData).

decode_msg_blockchain_region_param_v1_pb(Bin,
                                         TrUserData) ->
    dfp_read_field_def_blockchain_region_param_v1_pb(Bin,
                                                     0,
                                                     0,
                                                     id(0, TrUserData),
                                                     id(0, TrUserData),
                                                     id(0, TrUserData),
                                                     id(undefined, TrUserData),
                                                     TrUserData).

dfp_read_field_def_blockchain_region_param_v1_pb(<<8,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 TrUserData) ->
    d_field_blockchain_region_param_v1_pb_channel_frequency(Rest,
                                                            Z1,
                                                            Z2,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            TrUserData);
dfp_read_field_def_blockchain_region_param_v1_pb(<<16,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 TrUserData) ->
    d_field_blockchain_region_param_v1_pb_bandwidth(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
dfp_read_field_def_blockchain_region_param_v1_pb(<<24,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 TrUserData) ->
    d_field_blockchain_region_param_v1_pb_max_eirp(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
dfp_read_field_def_blockchain_region_param_v1_pb(<<34,
                                                   Rest/binary>>,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 TrUserData) ->
    d_field_blockchain_region_param_v1_pb_spreading(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
dfp_read_field_def_blockchain_region_param_v1_pb(<<>>,
                                                 0, 0, F@_1, F@_2, F@_3, F@_4,
                                                 _) ->
    #blockchain_region_param_v1_pb{channel_frequency = F@_1,
                                   bandwidth = F@_2, max_eirp = F@_3,
                                   spreading = F@_4};
dfp_read_field_def_blockchain_region_param_v1_pb(Other,
                                                 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                                 TrUserData) ->
    dg_read_field_def_blockchain_region_param_v1_pb(Other,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData).

dg_read_field_def_blockchain_region_param_v1_pb(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_blockchain_region_param_v1_pb(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
dg_read_field_def_blockchain_region_param_v1_pb(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_region_param_v1_pb_channel_frequency(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    TrUserData);
        16 ->
            d_field_blockchain_region_param_v1_pb_bandwidth(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            TrUserData);
        24 ->
            d_field_blockchain_region_param_v1_pb_max_eirp(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData);
        34 ->
            d_field_blockchain_region_param_v1_pb_spreading(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_region_param_v1_pb(Rest,
                                                              0,
                                                              0,
                                                              F@_1,
                                                              F@_2,
                                                              F@_3,
                                                              F@_4,
                                                              TrUserData);
                1 ->
                    skip_64_blockchain_region_param_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
                2 ->
                    skip_length_delimited_blockchain_region_param_v1_pb(Rest,
                                                                        0,
                                                                        0,
                                                                        F@_1,
                                                                        F@_2,
                                                                        F@_3,
                                                                        F@_4,
                                                                        TrUserData);
                3 ->
                    skip_group_blockchain_region_param_v1_pb(Rest,
                                                             Key bsr 3,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             TrUserData);
                5 ->
                    skip_32_blockchain_region_param_v1_pb(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData)
            end
    end;
dg_read_field_def_blockchain_region_param_v1_pb(<<>>, 0,
                                                0, F@_1, F@_2, F@_3, F@_4, _) ->
    #blockchain_region_param_v1_pb{channel_frequency = F@_1,
                                   bandwidth = F@_2, max_eirp = F@_3,
                                   spreading = F@_4}.

d_field_blockchain_region_param_v1_pb_channel_frequency(<<1:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, F@_1, F@_2,
                                                        F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_blockchain_region_param_v1_pb_channel_frequency(Rest,
                                                            N + 7,
                                                            X bsl N + Acc,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            TrUserData);
d_field_blockchain_region_param_v1_pb_channel_frequency(<<0:1,
                                                          X:7, Rest/binary>>,
                                                        N, Acc, _, F@_2, F@_3,
                                                        F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_region_param_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     NewFValue,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

d_field_blockchain_region_param_v1_pb_bandwidth(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 57 ->
    d_field_blockchain_region_param_v1_pb_bandwidth(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
d_field_blockchain_region_param_v1_pb_bandwidth(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, _, F@_3, F@_4,
                                                TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_region_param_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     NewFValue,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

d_field_blockchain_region_param_v1_pb_max_eirp(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               TrUserData)
    when N < 57 ->
    d_field_blockchain_region_param_v1_pb_max_eirp(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
d_field_blockchain_region_param_v1_pb_max_eirp(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, _, F@_4,
                                               TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_blockchain_region_param_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     NewFValue,
                                                     F@_4,
                                                     TrUserData).

d_field_blockchain_region_param_v1_pb_spreading(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 57 ->
    d_field_blockchain_region_param_v1_pb_spreading(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
d_field_blockchain_region_param_v1_pb_spreading(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, Prev,
                                                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_blockchain_region_spreading_v1_pb(Bs,
                                                                              TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_blockchain_region_param_v1_pb(RestF,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     if Prev == undefined ->
                                                            NewFValue;
                                                        true ->
                                                            merge_msg_blockchain_region_spreading_v1_pb(Prev,
                                                                                                        NewFValue,
                                                                                                        TrUserData)
                                                     end,
                                                     TrUserData).

skip_varint_blockchain_region_param_v1_pb(<<1:1, _:7,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    skip_varint_blockchain_region_param_v1_pb(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData);
skip_varint_blockchain_region_param_v1_pb(<<0:1, _:7,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    dfp_read_field_def_blockchain_region_param_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

skip_length_delimited_blockchain_region_param_v1_pb(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_blockchain_region_param_v1_pb(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
skip_length_delimited_blockchain_region_param_v1_pb(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_region_param_v1_pb(Rest2,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

skip_group_blockchain_region_param_v1_pb(Bin, FNum, Z2,
                                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_region_param_v1_pb(Rest,
                                                     0,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

skip_32_blockchain_region_param_v1_pb(<<_:32,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    dfp_read_field_def_blockchain_region_param_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

skip_64_blockchain_region_param_v1_pb(<<_:64,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    dfp_read_field_def_blockchain_region_param_v1_pb(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData).

'd_enum_helium.close_state'(0) -> close_state_closable;
'd_enum_helium.close_state'(1) -> close_state_closing;
'd_enum_helium.close_state'(2) -> close_state_closed;
'd_enum_helium.close_state'(3) -> close_state_dispute;
'd_enum_helium.close_state'(V) -> V.

'd_enum_helium.Region'(0) -> 'US915';
'd_enum_helium.Region'(1) -> 'EU868';
'd_enum_helium.Region'(2) -> 'EU433';
'd_enum_helium.Region'(3) -> 'CN470';
'd_enum_helium.Region'(4) -> 'CN779';
'd_enum_helium.Region'(5) -> 'AU915';
'd_enum_helium.Region'(6) -> 'AS923_1';
'd_enum_helium.Region'(7) -> 'KR920';
'd_enum_helium.Region'(8) -> 'IN865';
'd_enum_helium.Region'(9) -> 'AS923_2';
'd_enum_helium.Region'(10) -> 'AS923_3';
'd_enum_helium.Region'(11) -> 'AS923_4';
'd_enum_helium.Region'(V) -> V.

'd_enum_helium.blockchain_state_channel_state_v1'(0) ->
    open;
'd_enum_helium.blockchain_state_channel_state_v1'(1) ->
    closed;
'd_enum_helium.blockchain_state_channel_state_v1'(V) ->
    V.

'd_enum_packet_pb.packet_type'(0) -> longfi;
'd_enum_packet_pb.packet_type'(1) -> lorawan;
'd_enum_packet_pb.packet_type'(V) -> V.

'd_enum_helium.origin'(0) -> p2p;
'd_enum_helium.origin'(1) -> radio;
'd_enum_helium.origin'(V) -> V.

'd_enum_helium.RegionSpreading'(0) -> 'SF_INVALID';
'd_enum_helium.RegionSpreading'(1) -> 'SF7';
'd_enum_helium.RegionSpreading'(2) -> 'SF8';
'd_enum_helium.RegionSpreading'(3) -> 'SF9';
'd_enum_helium.RegionSpreading'(4) -> 'SF10';
'd_enum_helium.RegionSpreading'(5) -> 'SF11';
'd_enum_helium.RegionSpreading'(6) -> 'SF12';
'd_enum_helium.RegionSpreading'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
         is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        empty_pb -> merge_msg_empty_pb(Prev, New, TrUserData);
        gateway_success_resp_pb ->
            merge_msg_gateway_success_resp_pb(Prev,
                                              New,
                                              TrUserData);
        gateway_error_resp_pb ->
            merge_msg_gateway_error_resp_pb(Prev, New, TrUserData);
        gateway_config_req_v1_pb ->
            merge_msg_gateway_config_req_v1_pb(Prev,
                                               New,
                                               TrUserData);
        gateway_config_resp_v1_pb ->
            merge_msg_gateway_config_resp_v1_pb(Prev,
                                                New,
                                                TrUserData);
        gateway_config_update_req_v1_pb ->
            merge_msg_gateway_config_update_req_v1_pb(Prev,
                                                      New,
                                                      TrUserData);
        gateway_config_update_streamed_resp_v1_pb ->
            merge_msg_gateway_config_update_streamed_resp_v1_pb(Prev,
                                                                New,
                                                                TrUserData);
        gateway_validators_req_v1_pb ->
            merge_msg_gateway_validators_req_v1_pb(Prev,
                                                   New,
                                                   TrUserData);
        gateway_validators_resp_v1_pb ->
            merge_msg_gateway_validators_resp_v1_pb(Prev,
                                                    New,
                                                    TrUserData);
        gateway_resp_v1_pb ->
            merge_msg_gateway_resp_v1_pb(Prev, New, TrUserData);
        gateway_sc_is_active_req_v1_pb ->
            merge_msg_gateway_sc_is_active_req_v1_pb(Prev,
                                                     New,
                                                     TrUserData);
        gateway_sc_is_active_resp_v1_pb ->
            merge_msg_gateway_sc_is_active_resp_v1_pb(Prev,
                                                      New,
                                                      TrUserData);
        gateway_sc_is_overpaid_req_v1_pb ->
            merge_msg_gateway_sc_is_overpaid_req_v1_pb(Prev,
                                                       New,
                                                       TrUserData);
        gateway_sc_is_overpaid_resp_v1_pb ->
            merge_msg_gateway_sc_is_overpaid_resp_v1_pb(Prev,
                                                        New,
                                                        TrUserData);
        gateway_sc_close_req_v1_pb ->
            merge_msg_gateway_sc_close_req_v1_pb(Prev,
                                                 New,
                                                 TrUserData);
        gateway_sc_close_resp_v1_pb ->
            merge_msg_gateway_sc_close_resp_v1_pb(Prev,
                                                  New,
                                                  TrUserData);
        gateway_sc_follow_req_v1_pb ->
            merge_msg_gateway_sc_follow_req_v1_pb(Prev,
                                                  New,
                                                  TrUserData);
        gateway_sc_follow_streamed_resp_v1_pb ->
            merge_msg_gateway_sc_follow_streamed_resp_v1_pb(Prev,
                                                            New,
                                                            TrUserData);
        routing_pb ->
            merge_msg_routing_pb(Prev, New, TrUserData);
        routing_address_pb ->
            merge_msg_routing_address_pb(Prev, New, TrUserData);
        gateway_routing_req_v1_pb ->
            merge_msg_gateway_routing_req_v1_pb(Prev,
                                                New,
                                                TrUserData);
        gateway_routing_streamed_resp_v1_pb ->
            merge_msg_gateway_routing_streamed_resp_v1_pb(Prev,
                                                          New,
                                                          TrUserData);
        gateway_poc_req_v1_pb ->
            merge_msg_gateway_poc_req_v1_pb(Prev, New, TrUserData);
        gateway_poc_challenge_notification_resp_v1_pb ->
            merge_msg_gateway_poc_challenge_notification_resp_v1_pb(Prev,
                                                                    New,
                                                                    TrUserData);
        gateway_poc_check_challenge_target_req_v1_pb ->
            merge_msg_gateway_poc_check_challenge_target_req_v1_pb(Prev,
                                                                   New,
                                                                   TrUserData);
        gateway_poc_region_params_req_v1_pb ->
            merge_msg_gateway_poc_region_params_req_v1_pb(Prev,
                                                          New,
                                                          TrUserData);
        gateway_poc_region_params_resp_v1_pb ->
            merge_msg_gateway_poc_region_params_resp_v1_pb(Prev,
                                                           New,
                                                           TrUserData);
        gateway_poc_check_challenge_target_resp_v1_pb ->
            merge_msg_gateway_poc_check_challenge_target_resp_v1_pb(Prev,
                                                                    New,
                                                                    TrUserData);
        gateway_poc_report_req_v1_pb ->
            merge_msg_gateway_poc_report_req_v1_pb(Prev,
                                                   New,
                                                   TrUserData);
        gateway_address_routing_data_req_v1_pb ->
            merge_msg_gateway_address_routing_data_req_v1_pb(Prev,
                                                             New,
                                                             TrUserData);
        gateway_poc_key_routing_data_req_v1_pb ->
            merge_msg_gateway_poc_key_routing_data_req_v1_pb(Prev,
                                                             New,
                                                             TrUserData);
        gateway_public_routing_data_resp_v1_pb ->
            merge_msg_gateway_public_routing_data_resp_v1_pb(Prev,
                                                             New,
                                                             TrUserData);
        blockchain_state_channel_summary_v1_pb ->
            merge_msg_blockchain_state_channel_summary_v1_pb(Prev,
                                                             New,
                                                             TrUserData);
        blockchain_state_channel_v1_pb ->
            merge_msg_blockchain_state_channel_v1_pb(Prev,
                                                     New,
                                                     TrUserData);
        blockchain_state_channel_response_v1_pb ->
            merge_msg_blockchain_state_channel_response_v1_pb(Prev,
                                                              New,
                                                              TrUserData);
        blockchain_state_channel_packet_v1_pb ->
            merge_msg_blockchain_state_channel_packet_v1_pb(Prev,
                                                            New,
                                                            TrUserData);
        blockchain_state_channel_offer_v1_pb ->
            merge_msg_blockchain_state_channel_offer_v1_pb(Prev,
                                                           New,
                                                           TrUserData);
        blockchain_state_channel_purchase_v1_pb ->
            merge_msg_blockchain_state_channel_purchase_v1_pb(Prev,
                                                              New,
                                                              TrUserData);
        blockchain_state_channel_diff_v1_pb ->
            merge_msg_blockchain_state_channel_diff_v1_pb(Prev,
                                                          New,
                                                          TrUserData);
        blockchain_state_channel_diff_entry_v1_pb ->
            merge_msg_blockchain_state_channel_diff_entry_v1_pb(Prev,
                                                                New,
                                                                TrUserData);
        blockchain_state_channel_diff_append_summary_v1_pb ->
            merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(Prev,
                                                                         New,
                                                                         TrUserData);
        blockchain_state_channel_diff_update_summary_v1_pb ->
            merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(Prev,
                                                                         New,
                                                                         TrUserData);
        blockchain_state_channel_banner_v1_pb ->
            merge_msg_blockchain_state_channel_banner_v1_pb(Prev,
                                                            New,
                                                            TrUserData);
        blockchain_state_channel_rejection_v1_pb ->
            merge_msg_blockchain_state_channel_rejection_v1_pb(Prev,
                                                               New,
                                                               TrUserData);
        blockchain_state_channel_message_v1_pb ->
            merge_msg_blockchain_state_channel_message_v1_pb(Prev,
                                                             New,
                                                             TrUserData);
        eui_pb -> merge_msg_eui_pb(Prev, New, TrUserData);
        routing_information_pb ->
            merge_msg_routing_information_pb(Prev, New, TrUserData);
        window_pb -> merge_msg_window_pb(Prev, New, TrUserData);
        packet_pb -> merge_msg_packet_pb(Prev, New, TrUserData);
        blockchain_txn_state_channel_close_v1_pb ->
            merge_msg_blockchain_txn_state_channel_close_v1_pb(Prev,
                                                               New,
                                                               TrUserData);
        blockchain_var_v1_pb ->
            merge_msg_blockchain_var_v1_pb(Prev, New, TrUserData);
        blockchain_txn_vars_v1_pb ->
            merge_msg_blockchain_txn_vars_v1_pb(Prev,
                                                New,
                                                TrUserData);
        blockchain_txn_poc_receipts_v1_pb ->
            merge_msg_blockchain_txn_poc_receipts_v1_pb(Prev,
                                                        New,
                                                        TrUserData);
        blockchain_poc_receipt_v1_pb ->
            merge_msg_blockchain_poc_receipt_v1_pb(Prev,
                                                   New,
                                                   TrUserData);
        blockchain_poc_witness_v1_pb ->
            merge_msg_blockchain_poc_witness_v1_pb(Prev,
                                                   New,
                                                   TrUserData);
        blockchain_poc_response_v1_pb ->
            merge_msg_blockchain_poc_response_v1_pb(Prev,
                                                    New,
                                                    TrUserData);
        blockchain_poc_path_element_v1_pb ->
            merge_msg_blockchain_poc_path_element_v1_pb(Prev,
                                                        New,
                                                        TrUserData);
        blockchain_txn_poc_receipts_v2_pb ->
            merge_msg_blockchain_txn_poc_receipts_v2_pb(Prev,
                                                        New,
                                                        TrUserData);
        blockchain_region_params_v1_pb ->
            merge_msg_blockchain_region_params_v1_pb(Prev,
                                                     New,
                                                     TrUserData);
        tagged_spreading_pb ->
            merge_msg_tagged_spreading_pb(Prev, New, TrUserData);
        blockchain_region_spreading_v1_pb ->
            merge_msg_blockchain_region_spreading_v1_pb(Prev,
                                                        New,
                                                        TrUserData);
        blockchain_region_param_v1_pb ->
            merge_msg_blockchain_region_param_v1_pb(Prev,
                                                    New,
                                                    TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_empty_pb/3}).
merge_msg_empty_pb(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_gateway_success_resp_pb/3}).
merge_msg_gateway_success_resp_pb(#gateway_success_resp_pb{resp
                                                               = PFresp,
                                                           details = PFdetails},
                                  #gateway_success_resp_pb{resp = NFresp,
                                                           details = NFdetails},
                                  _) ->
    #gateway_success_resp_pb{resp =
                                 if NFresp =:= undefined -> PFresp;
                                    true -> NFresp
                                 end,
                             details =
                                 if NFdetails =:= undefined -> PFdetails;
                                    true -> NFdetails
                                 end}.

-compile({nowarn_unused_function,merge_msg_gateway_error_resp_pb/3}).
merge_msg_gateway_error_resp_pb(#gateway_error_resp_pb{error
                                                           = PFerror,
                                                       details = PFdetails},
                                #gateway_error_resp_pb{error = NFerror,
                                                       details = NFdetails},
                                _) ->
    #gateway_error_resp_pb{error =
                               if NFerror =:= undefined -> PFerror;
                                  true -> NFerror
                               end,
                           details =
                               if NFdetails =:= undefined -> PFdetails;
                                  true -> NFdetails
                               end}.

-compile({nowarn_unused_function,merge_msg_gateway_config_req_v1_pb/3}).
merge_msg_gateway_config_req_v1_pb(#gateway_config_req_v1_pb{keys
                                                                 = PFkeys},
                                   #gateway_config_req_v1_pb{keys = NFkeys},
                                   TrUserData) ->
    #gateway_config_req_v1_pb{keys =
                                  if PFkeys /= undefined, NFkeys /= undefined ->
                                         'erlang_++'(PFkeys,
                                                     NFkeys,
                                                     TrUserData);
                                     PFkeys == undefined -> NFkeys;
                                     NFkeys == undefined -> PFkeys
                                  end}.

-compile({nowarn_unused_function,merge_msg_gateway_config_resp_v1_pb/3}).
merge_msg_gateway_config_resp_v1_pb(#gateway_config_resp_v1_pb{result
                                                                   = PFresult},
                                    #gateway_config_resp_v1_pb{result =
                                                                   NFresult},
                                    TrUserData) ->
    #gateway_config_resp_v1_pb{result =
                                   if PFresult /= undefined,
                                      NFresult /= undefined ->
                                          'erlang_++'(PFresult,
                                                      NFresult,
                                                      TrUserData);
                                      PFresult == undefined -> NFresult;
                                      NFresult == undefined -> PFresult
                                   end}.

-compile({nowarn_unused_function,merge_msg_gateway_config_update_req_v1_pb/3}).
merge_msg_gateway_config_update_req_v1_pb(_Prev, New,
                                          _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_gateway_config_update_streamed_resp_v1_pb/3}).
merge_msg_gateway_config_update_streamed_resp_v1_pb(#gateway_config_update_streamed_resp_v1_pb{keys
                                                                                                   =
                                                                                                   PFkeys},
                                                    #gateway_config_update_streamed_resp_v1_pb{keys
                                                                                                   =
                                                                                                   NFkeys},
                                                    TrUserData) ->
    #gateway_config_update_streamed_resp_v1_pb{keys =
                                                   if PFkeys /= undefined,
                                                      NFkeys /= undefined ->
                                                          'erlang_++'(PFkeys,
                                                                      NFkeys,
                                                                      TrUserData);
                                                      PFkeys == undefined ->
                                                          NFkeys;
                                                      NFkeys == undefined ->
                                                          PFkeys
                                                   end}.

-compile({nowarn_unused_function,merge_msg_gateway_validators_req_v1_pb/3}).
merge_msg_gateway_validators_req_v1_pb(#gateway_validators_req_v1_pb{quantity
                                                                         =
                                                                         PFquantity},
                                       #gateway_validators_req_v1_pb{quantity =
                                                                         NFquantity},
                                       _) ->
    #gateway_validators_req_v1_pb{quantity =
                                      if NFquantity =:= undefined -> PFquantity;
                                         true -> NFquantity
                                      end}.

-compile({nowarn_unused_function,merge_msg_gateway_validators_resp_v1_pb/3}).
merge_msg_gateway_validators_resp_v1_pb(#gateway_validators_resp_v1_pb{result
                                                                           =
                                                                           PFresult},
                                        #gateway_validators_resp_v1_pb{result =
                                                                           NFresult},
                                        TrUserData) ->
    #gateway_validators_resp_v1_pb{result =
                                       if PFresult /= undefined,
                                          NFresult /= undefined ->
                                              'erlang_++'(PFresult,
                                                          NFresult,
                                                          TrUserData);
                                          PFresult == undefined -> NFresult;
                                          NFresult == undefined -> PFresult
                                       end}.

-compile({nowarn_unused_function,merge_msg_gateway_resp_v1_pb/3}).
merge_msg_gateway_resp_v1_pb(#gateway_resp_v1_pb{height
                                                     = PFheight,
                                                 signature = PFsignature,
                                                 msg = PFmsg,
                                                 block_time = PFblock_time,
                                                 block_age = PFblock_age},
                             #gateway_resp_v1_pb{height = NFheight,
                                                 signature = NFsignature,
                                                 msg = NFmsg,
                                                 block_time = NFblock_time,
                                                 block_age = NFblock_age},
                             TrUserData) ->
    #gateway_resp_v1_pb{height =
                            if NFheight =:= undefined -> PFheight;
                               true -> NFheight
                            end,
                        signature =
                            if NFsignature =:= undefined -> PFsignature;
                               true -> NFsignature
                            end,
                        msg =
                            case {PFmsg, NFmsg} of
                                {{is_active_resp, OPFmsg},
                                 {is_active_resp, ONFmsg}} ->
                                    {is_active_resp,
                                     merge_msg_gateway_sc_is_active_resp_v1_pb(OPFmsg,
                                                                               ONFmsg,
                                                                               TrUserData)};
                                {{is_overpaid_resp, OPFmsg},
                                 {is_overpaid_resp, ONFmsg}} ->
                                    {is_overpaid_resp,
                                     merge_msg_gateway_sc_is_overpaid_resp_v1_pb(OPFmsg,
                                                                                 ONFmsg,
                                                                                 TrUserData)};
                                {{close_resp, OPFmsg}, {close_resp, ONFmsg}} ->
                                    {close_resp,
                                     merge_msg_gateway_sc_close_resp_v1_pb(OPFmsg,
                                                                           ONFmsg,
                                                                           TrUserData)};
                                {{follow_streamed_resp, OPFmsg},
                                 {follow_streamed_resp, ONFmsg}} ->
                                    {follow_streamed_resp,
                                     merge_msg_gateway_sc_follow_streamed_resp_v1_pb(OPFmsg,
                                                                                     ONFmsg,
                                                                                     TrUserData)};
                                {{routing_streamed_resp, OPFmsg},
                                 {routing_streamed_resp, ONFmsg}} ->
                                    {routing_streamed_resp,
                                     merge_msg_gateway_routing_streamed_resp_v1_pb(OPFmsg,
                                                                                   ONFmsg,
                                                                                   TrUserData)};
                                {{config_resp, OPFmsg},
                                 {config_resp, ONFmsg}} ->
                                    {config_resp,
                                     merge_msg_gateway_config_resp_v1_pb(OPFmsg,
                                                                         ONFmsg,
                                                                         TrUserData)};
                                {{config_update_streamed_resp, OPFmsg},
                                 {config_update_streamed_resp, ONFmsg}} ->
                                    {config_update_streamed_resp,
                                     merge_msg_gateway_config_update_streamed_resp_v1_pb(OPFmsg,
                                                                                         ONFmsg,
                                                                                         TrUserData)};
                                {{validators_resp, OPFmsg},
                                 {validators_resp, ONFmsg}} ->
                                    {validators_resp,
                                     merge_msg_gateway_validators_resp_v1_pb(OPFmsg,
                                                                             ONFmsg,
                                                                             TrUserData)};
                                {{success_resp, OPFmsg},
                                 {success_resp, ONFmsg}} ->
                                    {success_resp,
                                     merge_msg_gateway_success_resp_pb(OPFmsg,
                                                                       ONFmsg,
                                                                       TrUserData)};
                                {{error_resp, OPFmsg}, {error_resp, ONFmsg}} ->
                                    {error_resp,
                                     merge_msg_gateway_error_resp_pb(OPFmsg,
                                                                     ONFmsg,
                                                                     TrUserData)};
                                {{poc_challenge_resp, OPFmsg},
                                 {poc_challenge_resp, ONFmsg}} ->
                                    {poc_challenge_resp,
                                     merge_msg_gateway_poc_challenge_notification_resp_v1_pb(OPFmsg,
                                                                                             ONFmsg,
                                                                                             TrUserData)};
                                {{poc_check_target_resp, OPFmsg},
                                 {poc_check_target_resp, ONFmsg}} ->
                                    {poc_check_target_resp,
                                     merge_msg_gateway_poc_check_challenge_target_resp_v1_pb(OPFmsg,
                                                                                             ONFmsg,
                                                                                             TrUserData)};
                                {{public_route, OPFmsg},
                                 {public_route, ONFmsg}} ->
                                    {public_route,
                                     merge_msg_gateway_public_routing_data_resp_v1_pb(OPFmsg,
                                                                                      ONFmsg,
                                                                                      TrUserData)};
                                {{poc_region_params_resp, OPFmsg},
                                 {poc_region_params_resp, ONFmsg}} ->
                                    {poc_region_params_resp,
                                     merge_msg_gateway_poc_region_params_resp_v1_pb(OPFmsg,
                                                                                    ONFmsg,
                                                                                    TrUserData)};
                                {_, undefined} -> PFmsg;
                                _ -> NFmsg
                            end,
                        block_time =
                            if NFblock_time =:= undefined -> PFblock_time;
                               true -> NFblock_time
                            end,
                        block_age =
                            if NFblock_age =:= undefined -> PFblock_age;
                               true -> NFblock_age
                            end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_is_active_req_v1_pb/3}).
merge_msg_gateway_sc_is_active_req_v1_pb(#gateway_sc_is_active_req_v1_pb{sc_id
                                                                             =
                                                                             PFsc_id,
                                                                         sc_owner
                                                                             =
                                                                             PFsc_owner},
                                         #gateway_sc_is_active_req_v1_pb{sc_id =
                                                                             NFsc_id,
                                                                         sc_owner
                                                                             =
                                                                             NFsc_owner},
                                         _) ->
    #gateway_sc_is_active_req_v1_pb{sc_id =
                                        if NFsc_id =:= undefined -> PFsc_id;
                                           true -> NFsc_id
                                        end,
                                    sc_owner =
                                        if NFsc_owner =:= undefined ->
                                               PFsc_owner;
                                           true -> NFsc_owner
                                        end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_is_active_resp_v1_pb/3}).
merge_msg_gateway_sc_is_active_resp_v1_pb(#gateway_sc_is_active_resp_v1_pb{sc_id
                                                                               =
                                                                               PFsc_id,
                                                                           sc_owner
                                                                               =
                                                                               PFsc_owner,
                                                                           active
                                                                               =
                                                                               PFactive,
                                                                           sc_expiry_at_block
                                                                               =
                                                                               PFsc_expiry_at_block,
                                                                           sc_original_dc_amount
                                                                               =
                                                                               PFsc_original_dc_amount},
                                          #gateway_sc_is_active_resp_v1_pb{sc_id
                                                                               =
                                                                               NFsc_id,
                                                                           sc_owner
                                                                               =
                                                                               NFsc_owner,
                                                                           active
                                                                               =
                                                                               NFactive,
                                                                           sc_expiry_at_block
                                                                               =
                                                                               NFsc_expiry_at_block,
                                                                           sc_original_dc_amount
                                                                               =
                                                                               NFsc_original_dc_amount},
                                          _) ->
    #gateway_sc_is_active_resp_v1_pb{sc_id =
                                         if NFsc_id =:= undefined -> PFsc_id;
                                            true -> NFsc_id
                                         end,
                                     sc_owner =
                                         if NFsc_owner =:= undefined ->
                                                PFsc_owner;
                                            true -> NFsc_owner
                                         end,
                                     active =
                                         if NFactive =:= undefined -> PFactive;
                                            true -> NFactive
                                         end,
                                     sc_expiry_at_block =
                                         if NFsc_expiry_at_block =:=
                                                undefined ->
                                                PFsc_expiry_at_block;
                                            true -> NFsc_expiry_at_block
                                         end,
                                     sc_original_dc_amount =
                                         if NFsc_original_dc_amount =:=
                                                undefined ->
                                                PFsc_original_dc_amount;
                                            true -> NFsc_original_dc_amount
                                         end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_is_overpaid_req_v1_pb/3}).
merge_msg_gateway_sc_is_overpaid_req_v1_pb(#gateway_sc_is_overpaid_req_v1_pb{sc_id
                                                                                 =
                                                                                 PFsc_id,
                                                                             sc_owner
                                                                                 =
                                                                                 PFsc_owner,
                                                                             total_dcs
                                                                                 =
                                                                                 PFtotal_dcs},
                                           #gateway_sc_is_overpaid_req_v1_pb{sc_id
                                                                                 =
                                                                                 NFsc_id,
                                                                             sc_owner
                                                                                 =
                                                                                 NFsc_owner,
                                                                             total_dcs
                                                                                 =
                                                                                 NFtotal_dcs},
                                           _) ->
    #gateway_sc_is_overpaid_req_v1_pb{sc_id =
                                          if NFsc_id =:= undefined -> PFsc_id;
                                             true -> NFsc_id
                                          end,
                                      sc_owner =
                                          if NFsc_owner =:= undefined ->
                                                 PFsc_owner;
                                             true -> NFsc_owner
                                          end,
                                      total_dcs =
                                          if NFtotal_dcs =:= undefined ->
                                                 PFtotal_dcs;
                                             true -> NFtotal_dcs
                                          end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_is_overpaid_resp_v1_pb/3}).
merge_msg_gateway_sc_is_overpaid_resp_v1_pb(#gateway_sc_is_overpaid_resp_v1_pb{sc_id
                                                                                   =
                                                                                   PFsc_id,
                                                                               sc_owner
                                                                                   =
                                                                                   PFsc_owner,
                                                                               overpaid
                                                                                   =
                                                                                   PFoverpaid},
                                            #gateway_sc_is_overpaid_resp_v1_pb{sc_id
                                                                                   =
                                                                                   NFsc_id,
                                                                               sc_owner
                                                                                   =
                                                                                   NFsc_owner,
                                                                               overpaid
                                                                                   =
                                                                                   NFoverpaid},
                                            _) ->
    #gateway_sc_is_overpaid_resp_v1_pb{sc_id =
                                           if NFsc_id =:= undefined -> PFsc_id;
                                              true -> NFsc_id
                                           end,
                                       sc_owner =
                                           if NFsc_owner =:= undefined ->
                                                  PFsc_owner;
                                              true -> NFsc_owner
                                           end,
                                       overpaid =
                                           if NFoverpaid =:= undefined ->
                                                  PFoverpaid;
                                              true -> NFoverpaid
                                           end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_close_req_v1_pb/3}).
merge_msg_gateway_sc_close_req_v1_pb(#gateway_sc_close_req_v1_pb{close_txn
                                                                     =
                                                                     PFclose_txn},
                                     #gateway_sc_close_req_v1_pb{close_txn =
                                                                     NFclose_txn},
                                     TrUserData) ->
    #gateway_sc_close_req_v1_pb{close_txn =
                                    if PFclose_txn /= undefined,
                                       NFclose_txn /= undefined ->
                                           merge_msg_blockchain_txn_state_channel_close_v1_pb(PFclose_txn,
                                                                                              NFclose_txn,
                                                                                              TrUserData);
                                       PFclose_txn == undefined -> NFclose_txn;
                                       NFclose_txn == undefined -> PFclose_txn
                                    end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_close_resp_v1_pb/3}).
merge_msg_gateway_sc_close_resp_v1_pb(#gateway_sc_close_resp_v1_pb{sc_id
                                                                       =
                                                                       PFsc_id,
                                                                   response =
                                                                       PFresponse},
                                      #gateway_sc_close_resp_v1_pb{sc_id =
                                                                       NFsc_id,
                                                                   response =
                                                                       NFresponse},
                                      _) ->
    #gateway_sc_close_resp_v1_pb{sc_id =
                                     if NFsc_id =:= undefined -> PFsc_id;
                                        true -> NFsc_id
                                     end,
                                 response =
                                     if NFresponse =:= undefined -> PFresponse;
                                        true -> NFresponse
                                     end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_follow_req_v1_pb/3}).
merge_msg_gateway_sc_follow_req_v1_pb(#gateway_sc_follow_req_v1_pb{sc_id
                                                                       =
                                                                       PFsc_id,
                                                                   sc_owner =
                                                                       PFsc_owner},
                                      #gateway_sc_follow_req_v1_pb{sc_id =
                                                                       NFsc_id,
                                                                   sc_owner =
                                                                       NFsc_owner},
                                      _) ->
    #gateway_sc_follow_req_v1_pb{sc_id =
                                     if NFsc_id =:= undefined -> PFsc_id;
                                        true -> NFsc_id
                                     end,
                                 sc_owner =
                                     if NFsc_owner =:= undefined -> PFsc_owner;
                                        true -> NFsc_owner
                                     end}.

-compile({nowarn_unused_function,merge_msg_gateway_sc_follow_streamed_resp_v1_pb/3}).
merge_msg_gateway_sc_follow_streamed_resp_v1_pb(#gateway_sc_follow_streamed_resp_v1_pb{sc_id
                                                                                           =
                                                                                           PFsc_id,
                                                                                       sc_owner
                                                                                           =
                                                                                           PFsc_owner,
                                                                                       close_state
                                                                                           =
                                                                                           PFclose_state},
                                                #gateway_sc_follow_streamed_resp_v1_pb{sc_id
                                                                                           =
                                                                                           NFsc_id,
                                                                                       sc_owner
                                                                                           =
                                                                                           NFsc_owner,
                                                                                       close_state
                                                                                           =
                                                                                           NFclose_state},
                                                _) ->
    #gateway_sc_follow_streamed_resp_v1_pb{sc_id =
                                               if NFsc_id =:= undefined ->
                                                      PFsc_id;
                                                  true -> NFsc_id
                                               end,
                                           sc_owner =
                                               if NFsc_owner =:= undefined ->
                                                      PFsc_owner;
                                                  true -> NFsc_owner
                                               end,
                                           close_state =
                                               if NFclose_state =:= undefined ->
                                                      PFclose_state;
                                                  true -> NFclose_state
                                               end}.

-compile({nowarn_unused_function,merge_msg_routing_pb/3}).
merge_msg_routing_pb(#routing_pb{oui = PFoui,
                                 owner = PFowner, addresses = PFaddresses,
                                 filters = PFfilters, subnets = PFsubnets},
                     #routing_pb{oui = NFoui, owner = NFowner,
                                 addresses = NFaddresses, filters = NFfilters,
                                 subnets = NFsubnets},
                     TrUserData) ->
    #routing_pb{oui =
                    if NFoui =:= undefined -> PFoui;
                       true -> NFoui
                    end,
                owner =
                    if NFowner =:= undefined -> PFowner;
                       true -> NFowner
                    end,
                addresses =
                    if PFaddresses /= undefined, NFaddresses /= undefined ->
                           'erlang_++'(PFaddresses, NFaddresses, TrUserData);
                       PFaddresses == undefined -> NFaddresses;
                       NFaddresses == undefined -> PFaddresses
                    end,
                filters =
                    if PFfilters /= undefined, NFfilters /= undefined ->
                           'erlang_++'(PFfilters, NFfilters, TrUserData);
                       PFfilters == undefined -> NFfilters;
                       NFfilters == undefined -> PFfilters
                    end,
                subnets =
                    if PFsubnets /= undefined, NFsubnets /= undefined ->
                           'erlang_++'(PFsubnets, NFsubnets, TrUserData);
                       PFsubnets == undefined -> NFsubnets;
                       NFsubnets == undefined -> PFsubnets
                    end}.

-compile({nowarn_unused_function,merge_msg_routing_address_pb/3}).
merge_msg_routing_address_pb(#routing_address_pb{pub_key
                                                     = PFpub_key,
                                                 uri = PFuri},
                             #routing_address_pb{pub_key = NFpub_key,
                                                 uri = NFuri},
                             _) ->
    #routing_address_pb{pub_key =
                            if NFpub_key =:= undefined -> PFpub_key;
                               true -> NFpub_key
                            end,
                        uri =
                            if NFuri =:= undefined -> PFuri;
                               true -> NFuri
                            end}.

-compile({nowarn_unused_function,merge_msg_gateway_routing_req_v1_pb/3}).
merge_msg_gateway_routing_req_v1_pb(#gateway_routing_req_v1_pb{height
                                                                   = PFheight},
                                    #gateway_routing_req_v1_pb{height =
                                                                   NFheight},
                                    _) ->
    #gateway_routing_req_v1_pb{height =
                                   if NFheight =:= undefined -> PFheight;
                                      true -> NFheight
                                   end}.

-compile({nowarn_unused_function,merge_msg_gateway_routing_streamed_resp_v1_pb/3}).
merge_msg_gateway_routing_streamed_resp_v1_pb(#gateway_routing_streamed_resp_v1_pb{routings
                                                                                       =
                                                                                       PFroutings},
                                              #gateway_routing_streamed_resp_v1_pb{routings
                                                                                       =
                                                                                       NFroutings},
                                              TrUserData) ->
    #gateway_routing_streamed_resp_v1_pb{routings =
                                             if PFroutings /= undefined,
                                                NFroutings /= undefined ->
                                                    'erlang_++'(PFroutings,
                                                                NFroutings,
                                                                TrUserData);
                                                PFroutings == undefined ->
                                                    NFroutings;
                                                NFroutings == undefined ->
                                                    PFroutings
                                             end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_req_v1_pb/3}).
merge_msg_gateway_poc_req_v1_pb(#gateway_poc_req_v1_pb{address
                                                           = PFaddress,
                                                       signature = PFsignature},
                                #gateway_poc_req_v1_pb{address = NFaddress,
                                                       signature = NFsignature},
                                _) ->
    #gateway_poc_req_v1_pb{address =
                               if NFaddress =:= undefined -> PFaddress;
                                  true -> NFaddress
                               end,
                           signature =
                               if NFsignature =:= undefined -> PFsignature;
                                  true -> NFsignature
                               end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_challenge_notification_resp_v1_pb/3}).
merge_msg_gateway_poc_challenge_notification_resp_v1_pb(#gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                                                                           =
                                                                                                           PFchallenger,
                                                                                                       block_hash
                                                                                                           =
                                                                                                           PFblock_hash,
                                                                                                       onion_key_hash
                                                                                                           =
                                                                                                           PFonion_key_hash},
                                                        #gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                                                                           =
                                                                                                           NFchallenger,
                                                                                                       block_hash
                                                                                                           =
                                                                                                           NFblock_hash,
                                                                                                       onion_key_hash
                                                                                                           =
                                                                                                           NFonion_key_hash},
                                                        TrUserData) ->
    #gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                       =
                                                       if PFchallenger /=
                                                              undefined,
                                                          NFchallenger /=
                                                              undefined ->
                                                              merge_msg_routing_address_pb(PFchallenger,
                                                                                           NFchallenger,
                                                                                           TrUserData);
                                                          PFchallenger ==
                                                              undefined ->
                                                              NFchallenger;
                                                          NFchallenger ==
                                                              undefined ->
                                                              PFchallenger
                                                       end,
                                                   block_hash =
                                                       if NFblock_hash =:=
                                                              undefined ->
                                                              PFblock_hash;
                                                          true -> NFblock_hash
                                                       end,
                                                   onion_key_hash =
                                                       if NFonion_key_hash =:=
                                                              undefined ->
                                                              PFonion_key_hash;
                                                          true ->
                                                              NFonion_key_hash
                                                       end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_check_challenge_target_req_v1_pb/3}).
merge_msg_gateway_poc_check_challenge_target_req_v1_pb(#gateway_poc_check_challenge_target_req_v1_pb{address
                                                                                                         =
                                                                                                         PFaddress,
                                                                                                     challenger
                                                                                                         =
                                                                                                         PFchallenger,
                                                                                                     block_hash
                                                                                                         =
                                                                                                         PFblock_hash,
                                                                                                     onion_key_hash
                                                                                                         =
                                                                                                         PFonion_key_hash,
                                                                                                     height
                                                                                                         =
                                                                                                         PFheight,
                                                                                                     notifier
                                                                                                         =
                                                                                                         PFnotifier,
                                                                                                     notifier_sig
                                                                                                         =
                                                                                                         PFnotifier_sig,
                                                                                                     challengee_sig
                                                                                                         =
                                                                                                         PFchallengee_sig},
                                                       #gateway_poc_check_challenge_target_req_v1_pb{address
                                                                                                         =
                                                                                                         NFaddress,
                                                                                                     challenger
                                                                                                         =
                                                                                                         NFchallenger,
                                                                                                     block_hash
                                                                                                         =
                                                                                                         NFblock_hash,
                                                                                                     onion_key_hash
                                                                                                         =
                                                                                                         NFonion_key_hash,
                                                                                                     height
                                                                                                         =
                                                                                                         NFheight,
                                                                                                     notifier
                                                                                                         =
                                                                                                         NFnotifier,
                                                                                                     notifier_sig
                                                                                                         =
                                                                                                         NFnotifier_sig,
                                                                                                     challengee_sig
                                                                                                         =
                                                                                                         NFchallengee_sig},
                                                       _) ->
    #gateway_poc_check_challenge_target_req_v1_pb{address =
                                                      if NFaddress =:=
                                                             undefined ->
                                                             PFaddress;
                                                         true -> NFaddress
                                                      end,
                                                  challenger =
                                                      if NFchallenger =:=
                                                             undefined ->
                                                             PFchallenger;
                                                         true -> NFchallenger
                                                      end,
                                                  block_hash =
                                                      if NFblock_hash =:=
                                                             undefined ->
                                                             PFblock_hash;
                                                         true -> NFblock_hash
                                                      end,
                                                  onion_key_hash =
                                                      if NFonion_key_hash =:=
                                                             undefined ->
                                                             PFonion_key_hash;
                                                         true ->
                                                             NFonion_key_hash
                                                      end,
                                                  height =
                                                      if NFheight =:=
                                                             undefined ->
                                                             PFheight;
                                                         true -> NFheight
                                                      end,
                                                  notifier =
                                                      if NFnotifier =:=
                                                             undefined ->
                                                             PFnotifier;
                                                         true -> NFnotifier
                                                      end,
                                                  notifier_sig =
                                                      if NFnotifier_sig =:=
                                                             undefined ->
                                                             PFnotifier_sig;
                                                         true -> NFnotifier_sig
                                                      end,
                                                  challengee_sig =
                                                      if NFchallengee_sig =:=
                                                             undefined ->
                                                             PFchallengee_sig;
                                                         true ->
                                                             NFchallengee_sig
                                                      end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_region_params_req_v1_pb/3}).
merge_msg_gateway_poc_region_params_req_v1_pb(#gateway_poc_region_params_req_v1_pb{address
                                                                                       =
                                                                                       PFaddress,
                                                                                   signature
                                                                                       =
                                                                                       PFsignature},
                                              #gateway_poc_region_params_req_v1_pb{address
                                                                                       =
                                                                                       NFaddress,
                                                                                   signature
                                                                                       =
                                                                                       NFsignature},
                                              _) ->
    #gateway_poc_region_params_req_v1_pb{address =
                                             if NFaddress =:= undefined ->
                                                    PFaddress;
                                                true -> NFaddress
                                             end,
                                         signature =
                                             if NFsignature =:= undefined ->
                                                    PFsignature;
                                                true -> NFsignature
                                             end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_region_params_resp_v1_pb/3}).
merge_msg_gateway_poc_region_params_resp_v1_pb(#gateway_poc_region_params_resp_v1_pb{address
                                                                                         =
                                                                                         PFaddress,
                                                                                     region
                                                                                         =
                                                                                         PFregion,
                                                                                     params
                                                                                         =
                                                                                         PFparams},
                                               #gateway_poc_region_params_resp_v1_pb{address
                                                                                         =
                                                                                         NFaddress,
                                                                                     region
                                                                                         =
                                                                                         NFregion,
                                                                                     params
                                                                                         =
                                                                                         NFparams},
                                               TrUserData) ->
    #gateway_poc_region_params_resp_v1_pb{address =
                                              if NFaddress =:= undefined ->
                                                     PFaddress;
                                                 true -> NFaddress
                                              end,
                                          region =
                                              if NFregion =:= undefined ->
                                                     PFregion;
                                                 true -> NFregion
                                              end,
                                          params =
                                              if PFparams /= undefined,
                                                 NFparams /= undefined ->
                                                     merge_msg_blockchain_region_params_v1_pb(PFparams,
                                                                                              NFparams,
                                                                                              TrUserData);
                                                 PFparams == undefined ->
                                                     NFparams;
                                                 NFparams == undefined ->
                                                     PFparams
                                              end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_check_challenge_target_resp_v1_pb/3}).
merge_msg_gateway_poc_check_challenge_target_resp_v1_pb(#gateway_poc_check_challenge_target_resp_v1_pb{target
                                                                                                           =
                                                                                                           PFtarget,
                                                                                                       onion
                                                                                                           =
                                                                                                           PFonion},
                                                        #gateway_poc_check_challenge_target_resp_v1_pb{target
                                                                                                           =
                                                                                                           NFtarget,
                                                                                                       onion
                                                                                                           =
                                                                                                           NFonion},
                                                        _) ->
    #gateway_poc_check_challenge_target_resp_v1_pb{target =
                                                       if NFtarget =:=
                                                              undefined ->
                                                              PFtarget;
                                                          true -> NFtarget
                                                       end,
                                                   onion =
                                                       if NFonion =:=
                                                              undefined ->
                                                              PFonion;
                                                          true -> NFonion
                                                       end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_report_req_v1_pb/3}).
merge_msg_gateway_poc_report_req_v1_pb(#gateway_poc_report_req_v1_pb{onion_key_hash
                                                                         =
                                                                         PFonion_key_hash,
                                                                     msg =
                                                                         PFmsg},
                                       #gateway_poc_report_req_v1_pb{onion_key_hash
                                                                         =
                                                                         NFonion_key_hash,
                                                                     msg =
                                                                         NFmsg},
                                       TrUserData) ->
    #gateway_poc_report_req_v1_pb{onion_key_hash =
                                      if NFonion_key_hash =:= undefined ->
                                             PFonion_key_hash;
                                         true -> NFonion_key_hash
                                      end,
                                  msg =
                                      case {PFmsg, NFmsg} of
                                          {{receipt, OPFmsg},
                                           {receipt, ONFmsg}} ->
                                              {receipt,
                                               merge_msg_blockchain_poc_receipt_v1_pb(OPFmsg,
                                                                                      ONFmsg,
                                                                                      TrUserData)};
                                          {{witness, OPFmsg},
                                           {witness, ONFmsg}} ->
                                              {witness,
                                               merge_msg_blockchain_poc_witness_v1_pb(OPFmsg,
                                                                                      ONFmsg,
                                                                                      TrUserData)};
                                          {_, undefined} -> PFmsg;
                                          _ -> NFmsg
                                      end}.

-compile({nowarn_unused_function,merge_msg_gateway_address_routing_data_req_v1_pb/3}).
merge_msg_gateway_address_routing_data_req_v1_pb(#gateway_address_routing_data_req_v1_pb{address
                                                                                             =
                                                                                             PFaddress},
                                                 #gateway_address_routing_data_req_v1_pb{address
                                                                                             =
                                                                                             NFaddress},
                                                 _) ->
    #gateway_address_routing_data_req_v1_pb{address =
                                                if NFaddress =:= undefined ->
                                                       PFaddress;
                                                   true -> NFaddress
                                                end}.

-compile({nowarn_unused_function,merge_msg_gateway_poc_key_routing_data_req_v1_pb/3}).
merge_msg_gateway_poc_key_routing_data_req_v1_pb(#gateway_poc_key_routing_data_req_v1_pb{key
                                                                                             =
                                                                                             PFkey},
                                                 #gateway_poc_key_routing_data_req_v1_pb{key
                                                                                             =
                                                                                             NFkey},
                                                 _) ->
    #gateway_poc_key_routing_data_req_v1_pb{key =
                                                if NFkey =:= undefined -> PFkey;
                                                   true -> NFkey
                                                end}.

-compile({nowarn_unused_function,merge_msg_gateway_public_routing_data_resp_v1_pb/3}).
merge_msg_gateway_public_routing_data_resp_v1_pb(#gateway_public_routing_data_resp_v1_pb{address
                                                                                             =
                                                                                             PFaddress,
                                                                                         public_uri
                                                                                             =
                                                                                             PFpublic_uri},
                                                 #gateway_public_routing_data_resp_v1_pb{address
                                                                                             =
                                                                                             NFaddress,
                                                                                         public_uri
                                                                                             =
                                                                                             NFpublic_uri},
                                                 TrUserData) ->
    #gateway_public_routing_data_resp_v1_pb{address =
                                                if NFaddress =:= undefined ->
                                                       PFaddress;
                                                   true -> NFaddress
                                                end,
                                            public_uri =
                                                if PFpublic_uri /= undefined,
                                                   NFpublic_uri /= undefined ->
                                                       merge_msg_routing_address_pb(PFpublic_uri,
                                                                                    NFpublic_uri,
                                                                                    TrUserData);
                                                   PFpublic_uri == undefined ->
                                                       NFpublic_uri;
                                                   NFpublic_uri == undefined ->
                                                       PFpublic_uri
                                                end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_summary_v1_pb/3}).
merge_msg_blockchain_state_channel_summary_v1_pb(#blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                                                             =
                                                                                             PFclient_pubkeybin,
                                                                                         num_packets
                                                                                             =
                                                                                             PFnum_packets,
                                                                                         num_dcs
                                                                                             =
                                                                                             PFnum_dcs},
                                                 #blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                                                             =
                                                                                             NFclient_pubkeybin,
                                                                                         num_packets
                                                                                             =
                                                                                             NFnum_packets,
                                                                                         num_dcs
                                                                                             =
                                                                                             NFnum_dcs},
                                                 _) ->
    #blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                =
                                                if NFclient_pubkeybin =:=
                                                       undefined ->
                                                       PFclient_pubkeybin;
                                                   true -> NFclient_pubkeybin
                                                end,
                                            num_packets =
                                                if NFnum_packets =:=
                                                       undefined ->
                                                       PFnum_packets;
                                                   true -> NFnum_packets
                                                end,
                                            num_dcs =
                                                if NFnum_dcs =:= undefined ->
                                                       PFnum_dcs;
                                                   true -> NFnum_dcs
                                                end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_v1_pb/3}).
merge_msg_blockchain_state_channel_v1_pb(#blockchain_state_channel_v1_pb{id
                                                                             =
                                                                             PFid,
                                                                         owner =
                                                                             PFowner,
                                                                         credits
                                                                             =
                                                                             PFcredits,
                                                                         nonce =
                                                                             PFnonce,
                                                                         summaries
                                                                             =
                                                                             PFsummaries,
                                                                         root_hash
                                                                             =
                                                                             PFroot_hash,
                                                                         skewed
                                                                             =
                                                                             PFskewed,
                                                                         state =
                                                                             PFstate,
                                                                         expire_at_block
                                                                             =
                                                                             PFexpire_at_block,
                                                                         signature
                                                                             =
                                                                             PFsignature},
                                         #blockchain_state_channel_v1_pb{id =
                                                                             NFid,
                                                                         owner =
                                                                             NFowner,
                                                                         credits
                                                                             =
                                                                             NFcredits,
                                                                         nonce =
                                                                             NFnonce,
                                                                         summaries
                                                                             =
                                                                             NFsummaries,
                                                                         root_hash
                                                                             =
                                                                             NFroot_hash,
                                                                         skewed
                                                                             =
                                                                             NFskewed,
                                                                         state =
                                                                             NFstate,
                                                                         expire_at_block
                                                                             =
                                                                             NFexpire_at_block,
                                                                         signature
                                                                             =
                                                                             NFsignature},
                                         TrUserData) ->
    #blockchain_state_channel_v1_pb{id =
                                        if NFid =:= undefined -> PFid;
                                           true -> NFid
                                        end,
                                    owner =
                                        if NFowner =:= undefined -> PFowner;
                                           true -> NFowner
                                        end,
                                    credits =
                                        if NFcredits =:= undefined -> PFcredits;
                                           true -> NFcredits
                                        end,
                                    nonce =
                                        if NFnonce =:= undefined -> PFnonce;
                                           true -> NFnonce
                                        end,
                                    summaries =
                                        if PFsummaries /= undefined,
                                           NFsummaries /= undefined ->
                                               'erlang_++'(PFsummaries,
                                                           NFsummaries,
                                                           TrUserData);
                                           PFsummaries == undefined ->
                                               NFsummaries;
                                           NFsummaries == undefined ->
                                               PFsummaries
                                        end,
                                    root_hash =
                                        if NFroot_hash =:= undefined ->
                                               PFroot_hash;
                                           true -> NFroot_hash
                                        end,
                                    skewed =
                                        if NFskewed =:= undefined -> PFskewed;
                                           true -> NFskewed
                                        end,
                                    state =
                                        if NFstate =:= undefined -> PFstate;
                                           true -> NFstate
                                        end,
                                    expire_at_block =
                                        if NFexpire_at_block =:= undefined ->
                                               PFexpire_at_block;
                                           true -> NFexpire_at_block
                                        end,
                                    signature =
                                        if NFsignature =:= undefined ->
                                               PFsignature;
                                           true -> NFsignature
                                        end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_response_v1_pb/3}).
merge_msg_blockchain_state_channel_response_v1_pb(#blockchain_state_channel_response_v1_pb{accepted
                                                                                               =
                                                                                               PFaccepted,
                                                                                           downlink
                                                                                               =
                                                                                               PFdownlink},
                                                  #blockchain_state_channel_response_v1_pb{accepted
                                                                                               =
                                                                                               NFaccepted,
                                                                                           downlink
                                                                                               =
                                                                                               NFdownlink},
                                                  TrUserData) ->
    #blockchain_state_channel_response_v1_pb{accepted =
                                                 if NFaccepted =:= undefined ->
                                                        PFaccepted;
                                                    true -> NFaccepted
                                                 end,
                                             downlink =
                                                 if PFdownlink /= undefined,
                                                    NFdownlink /= undefined ->
                                                        merge_msg_packet_pb(PFdownlink,
                                                                            NFdownlink,
                                                                            TrUserData);
                                                    PFdownlink == undefined ->
                                                        NFdownlink;
                                                    NFdownlink == undefined ->
                                                        PFdownlink
                                                 end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_packet_v1_pb/3}).
merge_msg_blockchain_state_channel_packet_v1_pb(#blockchain_state_channel_packet_v1_pb{packet
                                                                                           =
                                                                                           PFpacket,
                                                                                       hotspot
                                                                                           =
                                                                                           PFhotspot,
                                                                                       signature
                                                                                           =
                                                                                           PFsignature,
                                                                                       region
                                                                                           =
                                                                                           PFregion,
                                                                                       hold_time
                                                                                           =
                                                                                           PFhold_time},
                                                #blockchain_state_channel_packet_v1_pb{packet
                                                                                           =
                                                                                           NFpacket,
                                                                                       hotspot
                                                                                           =
                                                                                           NFhotspot,
                                                                                       signature
                                                                                           =
                                                                                           NFsignature,
                                                                                       region
                                                                                           =
                                                                                           NFregion,
                                                                                       hold_time
                                                                                           =
                                                                                           NFhold_time},
                                                TrUserData) ->
    #blockchain_state_channel_packet_v1_pb{packet =
                                               if PFpacket /= undefined,
                                                  NFpacket /= undefined ->
                                                      merge_msg_packet_pb(PFpacket,
                                                                          NFpacket,
                                                                          TrUserData);
                                                  PFpacket == undefined ->
                                                      NFpacket;
                                                  NFpacket == undefined ->
                                                      PFpacket
                                               end,
                                           hotspot =
                                               if NFhotspot =:= undefined ->
                                                      PFhotspot;
                                                  true -> NFhotspot
                                               end,
                                           signature =
                                               if NFsignature =:= undefined ->
                                                      PFsignature;
                                                  true -> NFsignature
                                               end,
                                           region =
                                               if NFregion =:= undefined ->
                                                      PFregion;
                                                  true -> NFregion
                                               end,
                                           hold_time =
                                               if NFhold_time =:= undefined ->
                                                      PFhold_time;
                                                  true -> NFhold_time
                                               end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_offer_v1_pb/3}).
merge_msg_blockchain_state_channel_offer_v1_pb(#blockchain_state_channel_offer_v1_pb{routing
                                                                                         =
                                                                                         PFrouting,
                                                                                     packet_hash
                                                                                         =
                                                                                         PFpacket_hash,
                                                                                     payload_size
                                                                                         =
                                                                                         PFpayload_size,
                                                                                     fcnt
                                                                                         =
                                                                                         PFfcnt,
                                                                                     hotspot
                                                                                         =
                                                                                         PFhotspot,
                                                                                     signature
                                                                                         =
                                                                                         PFsignature,
                                                                                     region
                                                                                         =
                                                                                         PFregion,
                                                                                     req_diff
                                                                                         =
                                                                                         PFreq_diff},
                                               #blockchain_state_channel_offer_v1_pb{routing
                                                                                         =
                                                                                         NFrouting,
                                                                                     packet_hash
                                                                                         =
                                                                                         NFpacket_hash,
                                                                                     payload_size
                                                                                         =
                                                                                         NFpayload_size,
                                                                                     fcnt
                                                                                         =
                                                                                         NFfcnt,
                                                                                     hotspot
                                                                                         =
                                                                                         NFhotspot,
                                                                                     signature
                                                                                         =
                                                                                         NFsignature,
                                                                                     region
                                                                                         =
                                                                                         NFregion,
                                                                                     req_diff
                                                                                         =
                                                                                         NFreq_diff},
                                               TrUserData) ->
    #blockchain_state_channel_offer_v1_pb{routing =
                                              if PFrouting /= undefined,
                                                 NFrouting /= undefined ->
                                                     merge_msg_routing_information_pb(PFrouting,
                                                                                      NFrouting,
                                                                                      TrUserData);
                                                 PFrouting == undefined ->
                                                     NFrouting;
                                                 NFrouting == undefined ->
                                                     PFrouting
                                              end,
                                          packet_hash =
                                              if NFpacket_hash =:= undefined ->
                                                     PFpacket_hash;
                                                 true -> NFpacket_hash
                                              end,
                                          payload_size =
                                              if NFpayload_size =:= undefined ->
                                                     PFpayload_size;
                                                 true -> NFpayload_size
                                              end,
                                          fcnt =
                                              if NFfcnt =:= undefined -> PFfcnt;
                                                 true -> NFfcnt
                                              end,
                                          hotspot =
                                              if NFhotspot =:= undefined ->
                                                     PFhotspot;
                                                 true -> NFhotspot
                                              end,
                                          signature =
                                              if NFsignature =:= undefined ->
                                                     PFsignature;
                                                 true -> NFsignature
                                              end,
                                          region =
                                              if NFregion =:= undefined ->
                                                     PFregion;
                                                 true -> NFregion
                                              end,
                                          req_diff =
                                              if NFreq_diff =:= undefined ->
                                                     PFreq_diff;
                                                 true -> NFreq_diff
                                              end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_purchase_v1_pb/3}).
merge_msg_blockchain_state_channel_purchase_v1_pb(#blockchain_state_channel_purchase_v1_pb{sc
                                                                                               =
                                                                                               PFsc,
                                                                                           hotspot
                                                                                               =
                                                                                               PFhotspot,
                                                                                           packet_hash
                                                                                               =
                                                                                               PFpacket_hash,
                                                                                           region
                                                                                               =
                                                                                               PFregion,
                                                                                           sc_diff
                                                                                               =
                                                                                               PFsc_diff},
                                                  #blockchain_state_channel_purchase_v1_pb{sc
                                                                                               =
                                                                                               NFsc,
                                                                                           hotspot
                                                                                               =
                                                                                               NFhotspot,
                                                                                           packet_hash
                                                                                               =
                                                                                               NFpacket_hash,
                                                                                           region
                                                                                               =
                                                                                               NFregion,
                                                                                           sc_diff
                                                                                               =
                                                                                               NFsc_diff},
                                                  TrUserData) ->
    #blockchain_state_channel_purchase_v1_pb{sc =
                                                 if PFsc /= undefined,
                                                    NFsc /= undefined ->
                                                        merge_msg_blockchain_state_channel_v1_pb(PFsc,
                                                                                                 NFsc,
                                                                                                 TrUserData);
                                                    PFsc == undefined -> NFsc;
                                                    NFsc == undefined -> PFsc
                                                 end,
                                             hotspot =
                                                 if NFhotspot =:= undefined ->
                                                        PFhotspot;
                                                    true -> NFhotspot
                                                 end,
                                             packet_hash =
                                                 if NFpacket_hash =:=
                                                        undefined ->
                                                        PFpacket_hash;
                                                    true -> NFpacket_hash
                                                 end,
                                             region =
                                                 if NFregion =:= undefined ->
                                                        PFregion;
                                                    true -> NFregion
                                                 end,
                                             sc_diff =
                                                 if PFsc_diff /= undefined,
                                                    NFsc_diff /= undefined ->
                                                        merge_msg_blockchain_state_channel_diff_v1_pb(PFsc_diff,
                                                                                                      NFsc_diff,
                                                                                                      TrUserData);
                                                    PFsc_diff == undefined ->
                                                        NFsc_diff;
                                                    NFsc_diff == undefined ->
                                                        PFsc_diff
                                                 end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_diff_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_v1_pb(#blockchain_state_channel_diff_v1_pb{id
                                                                                       =
                                                                                       PFid,
                                                                                   add_nonce
                                                                                       =
                                                                                       PFadd_nonce,
                                                                                   signature
                                                                                       =
                                                                                       PFsignature,
                                                                                   diffs
                                                                                       =
                                                                                       PFdiffs},
                                              #blockchain_state_channel_diff_v1_pb{id
                                                                                       =
                                                                                       NFid,
                                                                                   add_nonce
                                                                                       =
                                                                                       NFadd_nonce,
                                                                                   signature
                                                                                       =
                                                                                       NFsignature,
                                                                                   diffs
                                                                                       =
                                                                                       NFdiffs},
                                              TrUserData) ->
    #blockchain_state_channel_diff_v1_pb{id =
                                             if NFid =:= undefined -> PFid;
                                                true -> NFid
                                             end,
                                         add_nonce =
                                             if NFadd_nonce =:= undefined ->
                                                    PFadd_nonce;
                                                true -> NFadd_nonce
                                             end,
                                         signature =
                                             if NFsignature =:= undefined ->
                                                    PFsignature;
                                                true -> NFsignature
                                             end,
                                         diffs =
                                             if PFdiffs /= undefined,
                                                NFdiffs /= undefined ->
                                                    'erlang_++'(PFdiffs,
                                                                NFdiffs,
                                                                TrUserData);
                                                PFdiffs == undefined -> NFdiffs;
                                                NFdiffs == undefined -> PFdiffs
                                             end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_diff_entry_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_entry_v1_pb(#blockchain_state_channel_diff_entry_v1_pb{entry
                                                                                                   =
                                                                                                   PFentry},
                                                    #blockchain_state_channel_diff_entry_v1_pb{entry
                                                                                                   =
                                                                                                   NFentry},
                                                    TrUserData) ->
    #blockchain_state_channel_diff_entry_v1_pb{entry =
                                                   case {PFentry, NFentry} of
                                                       {{append, OPFentry},
                                                        {append, ONFentry}} ->
                                                           {append,
                                                            merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(OPFentry,
                                                                                                                         ONFentry,
                                                                                                                         TrUserData)};
                                                       {{add, OPFentry},
                                                        {add, ONFentry}} ->
                                                           {add,
                                                            merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(OPFentry,
                                                                                                                         ONFentry,
                                                                                                                         TrUserData)};
                                                       {_, undefined} ->
                                                           PFentry;
                                                       _ -> NFentry
                                                   end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_diff_append_summary_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_append_summary_v1_pb(#blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                                                                                     =
                                                                                                                     PFclient_pubkeybin,
                                                                                                                 num_packets
                                                                                                                     =
                                                                                                                     PFnum_packets,
                                                                                                                 num_dcs
                                                                                                                     =
                                                                                                                     PFnum_dcs},
                                                             #blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                                                                                     =
                                                                                                                     NFclient_pubkeybin,
                                                                                                                 num_packets
                                                                                                                     =
                                                                                                                     NFnum_packets,
                                                                                                                 num_dcs
                                                                                                                     =
                                                                                                                     NFnum_dcs},
                                                             _) ->
    #blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                            =
                                                            if
                                                                NFclient_pubkeybin
                                                                    =:=
                                                                    undefined ->
                                                                    PFclient_pubkeybin;
                                                                true ->
                                                                    NFclient_pubkeybin
                                                            end,
                                                        num_packets =
                                                            if NFnum_packets =:=
                                                                   undefined ->
                                                                   PFnum_packets;
                                                               true ->
                                                                   NFnum_packets
                                                            end,
                                                        num_dcs =
                                                            if NFnum_dcs =:=
                                                                   undefined ->
                                                                   PFnum_dcs;
                                                               true -> NFnum_dcs
                                                            end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_diff_update_summary_v1_pb/3}).
merge_msg_blockchain_state_channel_diff_update_summary_v1_pb(#blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                                                                                     =
                                                                                                                     PFclient_index,
                                                                                                                 add_packets
                                                                                                                     =
                                                                                                                     PFadd_packets,
                                                                                                                 add_dcs
                                                                                                                     =
                                                                                                                     PFadd_dcs},
                                                             #blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                                                                                     =
                                                                                                                     NFclient_index,
                                                                                                                 add_packets
                                                                                                                     =
                                                                                                                     NFadd_packets,
                                                                                                                 add_dcs
                                                                                                                     =
                                                                                                                     NFadd_dcs},
                                                             _) ->
    #blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                            =
                                                            if NFclient_index
                                                                   =:=
                                                                   undefined ->
                                                                   PFclient_index;
                                                               true ->
                                                                   NFclient_index
                                                            end,
                                                        add_packets =
                                                            if NFadd_packets =:=
                                                                   undefined ->
                                                                   PFadd_packets;
                                                               true ->
                                                                   NFadd_packets
                                                            end,
                                                        add_dcs =
                                                            if NFadd_dcs =:=
                                                                   undefined ->
                                                                   PFadd_dcs;
                                                               true -> NFadd_dcs
                                                            end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_banner_v1_pb/3}).
merge_msg_blockchain_state_channel_banner_v1_pb(#blockchain_state_channel_banner_v1_pb{sc
                                                                                           =
                                                                                           PFsc},
                                                #blockchain_state_channel_banner_v1_pb{sc
                                                                                           =
                                                                                           NFsc},
                                                TrUserData) ->
    #blockchain_state_channel_banner_v1_pb{sc =
                                               if PFsc /= undefined,
                                                  NFsc /= undefined ->
                                                      merge_msg_blockchain_state_channel_v1_pb(PFsc,
                                                                                               NFsc,
                                                                                               TrUserData);
                                                  PFsc == undefined -> NFsc;
                                                  NFsc == undefined -> PFsc
                                               end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_rejection_v1_pb/3}).
merge_msg_blockchain_state_channel_rejection_v1_pb(#blockchain_state_channel_rejection_v1_pb{reject
                                                                                                 =
                                                                                                 PFreject,
                                                                                             packet_hash
                                                                                                 =
                                                                                                 PFpacket_hash},
                                                   #blockchain_state_channel_rejection_v1_pb{reject
                                                                                                 =
                                                                                                 NFreject,
                                                                                             packet_hash
                                                                                                 =
                                                                                                 NFpacket_hash},
                                                   _) ->
    #blockchain_state_channel_rejection_v1_pb{reject =
                                                  if NFreject =:= undefined ->
                                                         PFreject;
                                                     true -> NFreject
                                                  end,
                                              packet_hash =
                                                  if NFpacket_hash =:=
                                                         undefined ->
                                                         PFpacket_hash;
                                                     true -> NFpacket_hash
                                                  end}.

-compile({nowarn_unused_function,merge_msg_blockchain_state_channel_message_v1_pb/3}).
merge_msg_blockchain_state_channel_message_v1_pb(#blockchain_state_channel_message_v1_pb{msg
                                                                                             =
                                                                                             PFmsg},
                                                 #blockchain_state_channel_message_v1_pb{msg
                                                                                             =
                                                                                             NFmsg},
                                                 TrUserData) ->
    #blockchain_state_channel_message_v1_pb{msg =
                                                case {PFmsg, NFmsg} of
                                                    {{response, OPFmsg},
                                                     {response, ONFmsg}} ->
                                                        {response,
                                                         merge_msg_blockchain_state_channel_response_v1_pb(OPFmsg,
                                                                                                           ONFmsg,
                                                                                                           TrUserData)};
                                                    {{packet, OPFmsg},
                                                     {packet, ONFmsg}} ->
                                                        {packet,
                                                         merge_msg_blockchain_state_channel_packet_v1_pb(OPFmsg,
                                                                                                         ONFmsg,
                                                                                                         TrUserData)};
                                                    {{offer, OPFmsg},
                                                     {offer, ONFmsg}} ->
                                                        {offer,
                                                         merge_msg_blockchain_state_channel_offer_v1_pb(OPFmsg,
                                                                                                        ONFmsg,
                                                                                                        TrUserData)};
                                                    {{purchase, OPFmsg},
                                                     {purchase, ONFmsg}} ->
                                                        {purchase,
                                                         merge_msg_blockchain_state_channel_purchase_v1_pb(OPFmsg,
                                                                                                           ONFmsg,
                                                                                                           TrUserData)};
                                                    {{banner, OPFmsg},
                                                     {banner, ONFmsg}} ->
                                                        {banner,
                                                         merge_msg_blockchain_state_channel_banner_v1_pb(OPFmsg,
                                                                                                         ONFmsg,
                                                                                                         TrUserData)};
                                                    {{reject, OPFmsg},
                                                     {reject, ONFmsg}} ->
                                                        {reject,
                                                         merge_msg_blockchain_state_channel_rejection_v1_pb(OPFmsg,
                                                                                                            ONFmsg,
                                                                                                            TrUserData)};
                                                    {_, undefined} -> PFmsg;
                                                    _ -> NFmsg
                                                end}.

-compile({nowarn_unused_function,merge_msg_eui_pb/3}).
merge_msg_eui_pb(#eui_pb{deveui = PFdeveui,
                         appeui = PFappeui},
                 #eui_pb{deveui = NFdeveui, appeui = NFappeui}, _) ->
    #eui_pb{deveui =
                if NFdeveui =:= undefined -> PFdeveui;
                   true -> NFdeveui
                end,
            appeui =
                if NFappeui =:= undefined -> PFappeui;
                   true -> NFappeui
                end}.

-compile({nowarn_unused_function,merge_msg_routing_information_pb/3}).
merge_msg_routing_information_pb(#routing_information_pb{data
                                                             = PFdata},
                                 #routing_information_pb{data = NFdata},
                                 TrUserData) ->
    #routing_information_pb{data =
                                case {PFdata, NFdata} of
                                    {{eui, OPFdata}, {eui, ONFdata}} ->
                                        {eui,
                                         merge_msg_eui_pb(OPFdata,
                                                          ONFdata,
                                                          TrUserData)};
                                    {_, undefined} -> PFdata;
                                    _ -> NFdata
                                end}.

-compile({nowarn_unused_function,merge_msg_window_pb/3}).
merge_msg_window_pb(#window_pb{timestamp = PFtimestamp,
                               frequency = PFfrequency, datarate = PFdatarate},
                    #window_pb{timestamp = NFtimestamp,
                               frequency = NFfrequency, datarate = NFdatarate},
                    _) ->
    #window_pb{timestamp =
                   if NFtimestamp =:= undefined -> PFtimestamp;
                      true -> NFtimestamp
                   end,
               frequency =
                   if NFfrequency =:= undefined -> PFfrequency;
                      true -> NFfrequency
                   end,
               datarate =
                   if NFdatarate =:= undefined -> PFdatarate;
                      true -> NFdatarate
                   end}.

-compile({nowarn_unused_function,merge_msg_packet_pb/3}).
merge_msg_packet_pb(#packet_pb{oui = PFoui,
                               type = PFtype, payload = PFpayload,
                               timestamp = PFtimestamp,
                               signal_strength = PFsignal_strength,
                               frequency = PFfrequency, datarate = PFdatarate,
                               snr = PFsnr, routing = PFrouting,
                               rx2_window = PFrx2_window},
                    #packet_pb{oui = NFoui, type = NFtype,
                               payload = NFpayload, timestamp = NFtimestamp,
                               signal_strength = NFsignal_strength,
                               frequency = NFfrequency, datarate = NFdatarate,
                               snr = NFsnr, routing = NFrouting,
                               rx2_window = NFrx2_window},
                    TrUserData) ->
    #packet_pb{oui =
                   if NFoui =:= undefined -> PFoui;
                      true -> NFoui
                   end,
               type =
                   if NFtype =:= undefined -> PFtype;
                      true -> NFtype
                   end,
               payload =
                   if NFpayload =:= undefined -> PFpayload;
                      true -> NFpayload
                   end,
               timestamp =
                   if NFtimestamp =:= undefined -> PFtimestamp;
                      true -> NFtimestamp
                   end,
               signal_strength =
                   if NFsignal_strength =:= undefined -> PFsignal_strength;
                      true -> NFsignal_strength
                   end,
               frequency =
                   if NFfrequency =:= undefined -> PFfrequency;
                      true -> NFfrequency
                   end,
               datarate =
                   if NFdatarate =:= undefined -> PFdatarate;
                      true -> NFdatarate
                   end,
               snr =
                   if NFsnr =:= undefined -> PFsnr;
                      true -> NFsnr
                   end,
               routing =
                   if PFrouting /= undefined, NFrouting /= undefined ->
                          merge_msg_routing_information_pb(PFrouting,
                                                           NFrouting,
                                                           TrUserData);
                      PFrouting == undefined -> NFrouting;
                      NFrouting == undefined -> PFrouting
                   end,
               rx2_window =
                   if PFrx2_window /= undefined,
                      NFrx2_window /= undefined ->
                          merge_msg_window_pb(PFrx2_window,
                                              NFrx2_window,
                                              TrUserData);
                      PFrx2_window == undefined -> NFrx2_window;
                      NFrx2_window == undefined -> PFrx2_window
                   end}.

-compile({nowarn_unused_function,merge_msg_blockchain_txn_state_channel_close_v1_pb/3}).
merge_msg_blockchain_txn_state_channel_close_v1_pb(#blockchain_txn_state_channel_close_v1_pb{state_channel
                                                                                                 =
                                                                                                 PFstate_channel,
                                                                                             closer
                                                                                                 =
                                                                                                 PFcloser,
                                                                                             signature
                                                                                                 =
                                                                                                 PFsignature,
                                                                                             fee
                                                                                                 =
                                                                                                 PFfee,
                                                                                             conflicts_with
                                                                                                 =
                                                                                                 PFconflicts_with},
                                                   #blockchain_txn_state_channel_close_v1_pb{state_channel
                                                                                                 =
                                                                                                 NFstate_channel,
                                                                                             closer
                                                                                                 =
                                                                                                 NFcloser,
                                                                                             signature
                                                                                                 =
                                                                                                 NFsignature,
                                                                                             fee
                                                                                                 =
                                                                                                 NFfee,
                                                                                             conflicts_with
                                                                                                 =
                                                                                                 NFconflicts_with},
                                                   TrUserData) ->
    #blockchain_txn_state_channel_close_v1_pb{state_channel
                                                  =
                                                  if PFstate_channel /=
                                                         undefined,
                                                     NFstate_channel /=
                                                         undefined ->
                                                         merge_msg_blockchain_state_channel_v1_pb(PFstate_channel,
                                                                                                  NFstate_channel,
                                                                                                  TrUserData);
                                                     PFstate_channel ==
                                                         undefined ->
                                                         NFstate_channel;
                                                     NFstate_channel ==
                                                         undefined ->
                                                         PFstate_channel
                                                  end,
                                              closer =
                                                  if NFcloser =:= undefined ->
                                                         PFcloser;
                                                     true -> NFcloser
                                                  end,
                                              signature =
                                                  if NFsignature =:=
                                                         undefined ->
                                                         PFsignature;
                                                     true -> NFsignature
                                                  end,
                                              fee =
                                                  if NFfee =:= undefined ->
                                                         PFfee;
                                                     true -> NFfee
                                                  end,
                                              conflicts_with =
                                                  if PFconflicts_with /=
                                                         undefined,
                                                     NFconflicts_with /=
                                                         undefined ->
                                                         merge_msg_blockchain_state_channel_v1_pb(PFconflicts_with,
                                                                                                  NFconflicts_with,
                                                                                                  TrUserData);
                                                     PFconflicts_with ==
                                                         undefined ->
                                                         NFconflicts_with;
                                                     NFconflicts_with ==
                                                         undefined ->
                                                         PFconflicts_with
                                                  end}.

-compile({nowarn_unused_function,merge_msg_blockchain_var_v1_pb/3}).
merge_msg_blockchain_var_v1_pb(#blockchain_var_v1_pb{name
                                                         = PFname,
                                                     type = PFtype,
                                                     value = PFvalue},
                               #blockchain_var_v1_pb{name = NFname,
                                                     type = NFtype,
                                                     value = NFvalue},
                               _) ->
    #blockchain_var_v1_pb{name =
                              if NFname =:= undefined -> PFname;
                                 true -> NFname
                              end,
                          type =
                              if NFtype =:= undefined -> PFtype;
                                 true -> NFtype
                              end,
                          value =
                              if NFvalue =:= undefined -> PFvalue;
                                 true -> NFvalue
                              end}.

-compile({nowarn_unused_function,merge_msg_blockchain_txn_vars_v1_pb/3}).
merge_msg_blockchain_txn_vars_v1_pb(#blockchain_txn_vars_v1_pb{vars
                                                                   = PFvars,
                                                               version_predicate
                                                                   =
                                                                   PFversion_predicate,
                                                               proof = PFproof,
                                                               master_key =
                                                                   PFmaster_key,
                                                               key_proof =
                                                                   PFkey_proof,
                                                               cancels =
                                                                   PFcancels,
                                                               unsets =
                                                                   PFunsets,
                                                               nonce = PFnonce,
                                                               multi_keys =
                                                                   PFmulti_keys,
                                                               multi_proofs =
                                                                   PFmulti_proofs,
                                                               multi_key_proofs
                                                                   =
                                                                   PFmulti_key_proofs},
                                    #blockchain_txn_vars_v1_pb{vars = NFvars,
                                                               version_predicate
                                                                   =
                                                                   NFversion_predicate,
                                                               proof = NFproof,
                                                               master_key =
                                                                   NFmaster_key,
                                                               key_proof =
                                                                   NFkey_proof,
                                                               cancels =
                                                                   NFcancels,
                                                               unsets =
                                                                   NFunsets,
                                                               nonce = NFnonce,
                                                               multi_keys =
                                                                   NFmulti_keys,
                                                               multi_proofs =
                                                                   NFmulti_proofs,
                                                               multi_key_proofs
                                                                   =
                                                                   NFmulti_key_proofs},
                                    TrUserData) ->
    #blockchain_txn_vars_v1_pb{vars =
                                   if PFvars /= undefined,
                                      NFvars /= undefined ->
                                          'erlang_++'(PFvars,
                                                      NFvars,
                                                      TrUserData);
                                      PFvars == undefined -> NFvars;
                                      NFvars == undefined -> PFvars
                                   end,
                               version_predicate =
                                   if NFversion_predicate =:= undefined ->
                                          PFversion_predicate;
                                      true -> NFversion_predicate
                                   end,
                               proof =
                                   if NFproof =:= undefined -> PFproof;
                                      true -> NFproof
                                   end,
                               master_key =
                                   if NFmaster_key =:= undefined ->
                                          PFmaster_key;
                                      true -> NFmaster_key
                                   end,
                               key_proof =
                                   if NFkey_proof =:= undefined -> PFkey_proof;
                                      true -> NFkey_proof
                                   end,
                               cancels =
                                   if PFcancels /= undefined,
                                      NFcancels /= undefined ->
                                          'erlang_++'(PFcancels,
                                                      NFcancels,
                                                      TrUserData);
                                      PFcancels == undefined -> NFcancels;
                                      NFcancels == undefined -> PFcancels
                                   end,
                               unsets =
                                   if PFunsets /= undefined,
                                      NFunsets /= undefined ->
                                          'erlang_++'(PFunsets,
                                                      NFunsets,
                                                      TrUserData);
                                      PFunsets == undefined -> NFunsets;
                                      NFunsets == undefined -> PFunsets
                                   end,
                               nonce =
                                   if NFnonce =:= undefined -> PFnonce;
                                      true -> NFnonce
                                   end,
                               multi_keys =
                                   if PFmulti_keys /= undefined,
                                      NFmulti_keys /= undefined ->
                                          'erlang_++'(PFmulti_keys,
                                                      NFmulti_keys,
                                                      TrUserData);
                                      PFmulti_keys == undefined -> NFmulti_keys;
                                      NFmulti_keys == undefined -> PFmulti_keys
                                   end,
                               multi_proofs =
                                   if PFmulti_proofs /= undefined,
                                      NFmulti_proofs /= undefined ->
                                          'erlang_++'(PFmulti_proofs,
                                                      NFmulti_proofs,
                                                      TrUserData);
                                      PFmulti_proofs == undefined ->
                                          NFmulti_proofs;
                                      NFmulti_proofs == undefined ->
                                          PFmulti_proofs
                                   end,
                               multi_key_proofs =
                                   if PFmulti_key_proofs /= undefined,
                                      NFmulti_key_proofs /= undefined ->
                                          'erlang_++'(PFmulti_key_proofs,
                                                      NFmulti_key_proofs,
                                                      TrUserData);
                                      PFmulti_key_proofs == undefined ->
                                          NFmulti_key_proofs;
                                      NFmulti_key_proofs == undefined ->
                                          PFmulti_key_proofs
                                   end}.

-compile({nowarn_unused_function,merge_msg_blockchain_txn_poc_receipts_v1_pb/3}).
merge_msg_blockchain_txn_poc_receipts_v1_pb(#blockchain_txn_poc_receipts_v1_pb{challenger
                                                                                   =
                                                                                   PFchallenger,
                                                                               secret
                                                                                   =
                                                                                   PFsecret,
                                                                               onion_key_hash
                                                                                   =
                                                                                   PFonion_key_hash,
                                                                               path
                                                                                   =
                                                                                   PFpath,
                                                                               fee
                                                                                   =
                                                                                   PFfee,
                                                                               signature
                                                                                   =
                                                                                   PFsignature,
                                                                               request_block_hash
                                                                                   =
                                                                                   PFrequest_block_hash},
                                            #blockchain_txn_poc_receipts_v1_pb{challenger
                                                                                   =
                                                                                   NFchallenger,
                                                                               secret
                                                                                   =
                                                                                   NFsecret,
                                                                               onion_key_hash
                                                                                   =
                                                                                   NFonion_key_hash,
                                                                               path
                                                                                   =
                                                                                   NFpath,
                                                                               fee
                                                                                   =
                                                                                   NFfee,
                                                                               signature
                                                                                   =
                                                                                   NFsignature,
                                                                               request_block_hash
                                                                                   =
                                                                                   NFrequest_block_hash},
                                            TrUserData) ->
    #blockchain_txn_poc_receipts_v1_pb{challenger =
                                           if NFchallenger =:= undefined ->
                                                  PFchallenger;
                                              true -> NFchallenger
                                           end,
                                       secret =
                                           if NFsecret =:= undefined ->
                                                  PFsecret;
                                              true -> NFsecret
                                           end,
                                       onion_key_hash =
                                           if NFonion_key_hash =:= undefined ->
                                                  PFonion_key_hash;
                                              true -> NFonion_key_hash
                                           end,
                                       path =
                                           if PFpath /= undefined,
                                              NFpath /= undefined ->
                                                  'erlang_++'(PFpath,
                                                              NFpath,
                                                              TrUserData);
                                              PFpath == undefined -> NFpath;
                                              NFpath == undefined -> PFpath
                                           end,
                                       fee =
                                           if NFfee =:= undefined -> PFfee;
                                              true -> NFfee
                                           end,
                                       signature =
                                           if NFsignature =:= undefined ->
                                                  PFsignature;
                                              true -> NFsignature
                                           end,
                                       request_block_hash =
                                           if NFrequest_block_hash =:=
                                                  undefined ->
                                                  PFrequest_block_hash;
                                              true -> NFrequest_block_hash
                                           end}.

-compile({nowarn_unused_function,merge_msg_blockchain_poc_receipt_v1_pb/3}).
merge_msg_blockchain_poc_receipt_v1_pb(#blockchain_poc_receipt_v1_pb{gateway
                                                                         =
                                                                         PFgateway,
                                                                     timestamp =
                                                                         PFtimestamp,
                                                                     signal =
                                                                         PFsignal,
                                                                     data =
                                                                         PFdata,
                                                                     origin =
                                                                         PForigin,
                                                                     signature =
                                                                         PFsignature,
                                                                     snr =
                                                                         PFsnr,
                                                                     frequency =
                                                                         PFfrequency,
                                                                     channel =
                                                                         PFchannel,
                                                                     datarate =
                                                                         PFdatarate,
                                                                     addr_hash =
                                                                         PFaddr_hash,
                                                                     tx_power =
                                                                         PFtx_power},
                                       #blockchain_poc_receipt_v1_pb{gateway =
                                                                         NFgateway,
                                                                     timestamp =
                                                                         NFtimestamp,
                                                                     signal =
                                                                         NFsignal,
                                                                     data =
                                                                         NFdata,
                                                                     origin =
                                                                         NForigin,
                                                                     signature =
                                                                         NFsignature,
                                                                     snr =
                                                                         NFsnr,
                                                                     frequency =
                                                                         NFfrequency,
                                                                     channel =
                                                                         NFchannel,
                                                                     datarate =
                                                                         NFdatarate,
                                                                     addr_hash =
                                                                         NFaddr_hash,
                                                                     tx_power =
                                                                         NFtx_power},
                                       _) ->
    #blockchain_poc_receipt_v1_pb{gateway =
                                      if NFgateway =:= undefined -> PFgateway;
                                         true -> NFgateway
                                      end,
                                  timestamp =
                                      if NFtimestamp =:= undefined ->
                                             PFtimestamp;
                                         true -> NFtimestamp
                                      end,
                                  signal =
                                      if NFsignal =:= undefined -> PFsignal;
                                         true -> NFsignal
                                      end,
                                  data =
                                      if NFdata =:= undefined -> PFdata;
                                         true -> NFdata
                                      end,
                                  origin =
                                      if NForigin =:= undefined -> PForigin;
                                         true -> NForigin
                                      end,
                                  signature =
                                      if NFsignature =:= undefined ->
                                             PFsignature;
                                         true -> NFsignature
                                      end,
                                  snr =
                                      if NFsnr =:= undefined -> PFsnr;
                                         true -> NFsnr
                                      end,
                                  frequency =
                                      if NFfrequency =:= undefined ->
                                             PFfrequency;
                                         true -> NFfrequency
                                      end,
                                  channel =
                                      if NFchannel =:= undefined -> PFchannel;
                                         true -> NFchannel
                                      end,
                                  datarate =
                                      if NFdatarate =:= undefined -> PFdatarate;
                                         true -> NFdatarate
                                      end,
                                  addr_hash =
                                      if NFaddr_hash =:= undefined ->
                                             PFaddr_hash;
                                         true -> NFaddr_hash
                                      end,
                                  tx_power =
                                      if NFtx_power =:= undefined -> PFtx_power;
                                         true -> NFtx_power
                                      end}.

-compile({nowarn_unused_function,merge_msg_blockchain_poc_witness_v1_pb/3}).
merge_msg_blockchain_poc_witness_v1_pb(#blockchain_poc_witness_v1_pb{gateway
                                                                         =
                                                                         PFgateway,
                                                                     timestamp =
                                                                         PFtimestamp,
                                                                     signal =
                                                                         PFsignal,
                                                                     packet_hash
                                                                         =
                                                                         PFpacket_hash,
                                                                     signature =
                                                                         PFsignature,
                                                                     snr =
                                                                         PFsnr,
                                                                     frequency =
                                                                         PFfrequency,
                                                                     channel =
                                                                         PFchannel,
                                                                     datarate =
                                                                         PFdatarate},
                                       #blockchain_poc_witness_v1_pb{gateway =
                                                                         NFgateway,
                                                                     timestamp =
                                                                         NFtimestamp,
                                                                     signal =
                                                                         NFsignal,
                                                                     packet_hash
                                                                         =
                                                                         NFpacket_hash,
                                                                     signature =
                                                                         NFsignature,
                                                                     snr =
                                                                         NFsnr,
                                                                     frequency =
                                                                         NFfrequency,
                                                                     channel =
                                                                         NFchannel,
                                                                     datarate =
                                                                         NFdatarate},
                                       _) ->
    #blockchain_poc_witness_v1_pb{gateway =
                                      if NFgateway =:= undefined -> PFgateway;
                                         true -> NFgateway
                                      end,
                                  timestamp =
                                      if NFtimestamp =:= undefined ->
                                             PFtimestamp;
                                         true -> NFtimestamp
                                      end,
                                  signal =
                                      if NFsignal =:= undefined -> PFsignal;
                                         true -> NFsignal
                                      end,
                                  packet_hash =
                                      if NFpacket_hash =:= undefined ->
                                             PFpacket_hash;
                                         true -> NFpacket_hash
                                      end,
                                  signature =
                                      if NFsignature =:= undefined ->
                                             PFsignature;
                                         true -> NFsignature
                                      end,
                                  snr =
                                      if NFsnr =:= undefined -> PFsnr;
                                         true -> NFsnr
                                      end,
                                  frequency =
                                      if NFfrequency =:= undefined ->
                                             PFfrequency;
                                         true -> NFfrequency
                                      end,
                                  channel =
                                      if NFchannel =:= undefined -> PFchannel;
                                         true -> NFchannel
                                      end,
                                  datarate =
                                      if NFdatarate =:= undefined -> PFdatarate;
                                         true -> NFdatarate
                                      end}.

-compile({nowarn_unused_function,merge_msg_blockchain_poc_response_v1_pb/3}).
merge_msg_blockchain_poc_response_v1_pb(#blockchain_poc_response_v1_pb{payload
                                                                           =
                                                                           PFpayload},
                                        #blockchain_poc_response_v1_pb{payload =
                                                                           NFpayload},
                                        TrUserData) ->
    #blockchain_poc_response_v1_pb{payload =
                                       case {PFpayload, NFpayload} of
                                           {{receipt, OPFpayload},
                                            {receipt, ONFpayload}} ->
                                               {receipt,
                                                merge_msg_blockchain_poc_receipt_v1_pb(OPFpayload,
                                                                                       ONFpayload,
                                                                                       TrUserData)};
                                           {{witness, OPFpayload},
                                            {witness, ONFpayload}} ->
                                               {witness,
                                                merge_msg_blockchain_poc_witness_v1_pb(OPFpayload,
                                                                                       ONFpayload,
                                                                                       TrUserData)};
                                           {_, undefined} -> PFpayload;
                                           _ -> NFpayload
                                       end}.

-compile({nowarn_unused_function,merge_msg_blockchain_poc_path_element_v1_pb/3}).
merge_msg_blockchain_poc_path_element_v1_pb(#blockchain_poc_path_element_v1_pb{challengee
                                                                                   =
                                                                                   PFchallengee,
                                                                               receipt
                                                                                   =
                                                                                   PFreceipt,
                                                                               witnesses
                                                                                   =
                                                                                   PFwitnesses},
                                            #blockchain_poc_path_element_v1_pb{challengee
                                                                                   =
                                                                                   NFchallengee,
                                                                               receipt
                                                                                   =
                                                                                   NFreceipt,
                                                                               witnesses
                                                                                   =
                                                                                   NFwitnesses},
                                            TrUserData) ->
    #blockchain_poc_path_element_v1_pb{challengee =
                                           if NFchallengee =:= undefined ->
                                                  PFchallengee;
                                              true -> NFchallengee
                                           end,
                                       receipt =
                                           if PFreceipt /= undefined,
                                              NFreceipt /= undefined ->
                                                  merge_msg_blockchain_poc_receipt_v1_pb(PFreceipt,
                                                                                         NFreceipt,
                                                                                         TrUserData);
                                              PFreceipt == undefined ->
                                                  NFreceipt;
                                              NFreceipt == undefined ->
                                                  PFreceipt
                                           end,
                                       witnesses =
                                           if PFwitnesses /= undefined,
                                              NFwitnesses /= undefined ->
                                                  'erlang_++'(PFwitnesses,
                                                              NFwitnesses,
                                                              TrUserData);
                                              PFwitnesses == undefined ->
                                                  NFwitnesses;
                                              NFwitnesses == undefined ->
                                                  PFwitnesses
                                           end}.

-compile({nowarn_unused_function,merge_msg_blockchain_txn_poc_receipts_v2_pb/3}).
merge_msg_blockchain_txn_poc_receipts_v2_pb(#blockchain_txn_poc_receipts_v2_pb{challenger
                                                                                   =
                                                                                   PFchallenger,
                                                                               secret
                                                                                   =
                                                                                   PFsecret,
                                                                               onion_key_hash
                                                                                   =
                                                                                   PFonion_key_hash,
                                                                               path
                                                                                   =
                                                                                   PFpath,
                                                                               fee
                                                                                   =
                                                                                   PFfee,
                                                                               signature
                                                                                   =
                                                                                   PFsignature,
                                                                               block_hash
                                                                                   =
                                                                                   PFblock_hash},
                                            #blockchain_txn_poc_receipts_v2_pb{challenger
                                                                                   =
                                                                                   NFchallenger,
                                                                               secret
                                                                                   =
                                                                                   NFsecret,
                                                                               onion_key_hash
                                                                                   =
                                                                                   NFonion_key_hash,
                                                                               path
                                                                                   =
                                                                                   NFpath,
                                                                               fee
                                                                                   =
                                                                                   NFfee,
                                                                               signature
                                                                                   =
                                                                                   NFsignature,
                                                                               block_hash
                                                                                   =
                                                                                   NFblock_hash},
                                            TrUserData) ->
    #blockchain_txn_poc_receipts_v2_pb{challenger =
                                           if NFchallenger =:= undefined ->
                                                  PFchallenger;
                                              true -> NFchallenger
                                           end,
                                       secret =
                                           if NFsecret =:= undefined ->
                                                  PFsecret;
                                              true -> NFsecret
                                           end,
                                       onion_key_hash =
                                           if NFonion_key_hash =:= undefined ->
                                                  PFonion_key_hash;
                                              true -> NFonion_key_hash
                                           end,
                                       path =
                                           if PFpath /= undefined,
                                              NFpath /= undefined ->
                                                  'erlang_++'(PFpath,
                                                              NFpath,
                                                              TrUserData);
                                              PFpath == undefined -> NFpath;
                                              NFpath == undefined -> PFpath
                                           end,
                                       fee =
                                           if NFfee =:= undefined -> PFfee;
                                              true -> NFfee
                                           end,
                                       signature =
                                           if NFsignature =:= undefined ->
                                                  PFsignature;
                                              true -> NFsignature
                                           end,
                                       block_hash =
                                           if NFblock_hash =:= undefined ->
                                                  PFblock_hash;
                                              true -> NFblock_hash
                                           end}.

-compile({nowarn_unused_function,merge_msg_blockchain_region_params_v1_pb/3}).
merge_msg_blockchain_region_params_v1_pb(#blockchain_region_params_v1_pb{region_params
                                                                             =
                                                                             PFregion_params},
                                         #blockchain_region_params_v1_pb{region_params
                                                                             =
                                                                             NFregion_params},
                                         TrUserData) ->
    #blockchain_region_params_v1_pb{region_params =
                                        if PFregion_params /= undefined,
                                           NFregion_params /= undefined ->
                                               'erlang_++'(PFregion_params,
                                                           NFregion_params,
                                                           TrUserData);
                                           PFregion_params == undefined ->
                                               NFregion_params;
                                           NFregion_params == undefined ->
                                               PFregion_params
                                        end}.

-compile({nowarn_unused_function,merge_msg_tagged_spreading_pb/3}).
merge_msg_tagged_spreading_pb(#tagged_spreading_pb{region_spreading
                                                       = PFregion_spreading,
                                                   max_packet_size =
                                                       PFmax_packet_size},
                              #tagged_spreading_pb{region_spreading =
                                                       NFregion_spreading,
                                                   max_packet_size =
                                                       NFmax_packet_size},
                              _) ->
    #tagged_spreading_pb{region_spreading =
                             if NFregion_spreading =:= undefined ->
                                    PFregion_spreading;
                                true -> NFregion_spreading
                             end,
                         max_packet_size =
                             if NFmax_packet_size =:= undefined ->
                                    PFmax_packet_size;
                                true -> NFmax_packet_size
                             end}.

-compile({nowarn_unused_function,merge_msg_blockchain_region_spreading_v1_pb/3}).
merge_msg_blockchain_region_spreading_v1_pb(#blockchain_region_spreading_v1_pb{tagged_spreading
                                                                                   =
                                                                                   PFtagged_spreading},
                                            #blockchain_region_spreading_v1_pb{tagged_spreading
                                                                                   =
                                                                                   NFtagged_spreading},
                                            TrUserData) ->
    #blockchain_region_spreading_v1_pb{tagged_spreading =
                                           if PFtagged_spreading /= undefined,
                                              NFtagged_spreading /= undefined ->
                                                  'erlang_++'(PFtagged_spreading,
                                                              NFtagged_spreading,
                                                              TrUserData);
                                              PFtagged_spreading == undefined ->
                                                  NFtagged_spreading;
                                              NFtagged_spreading == undefined ->
                                                  PFtagged_spreading
                                           end}.

-compile({nowarn_unused_function,merge_msg_blockchain_region_param_v1_pb/3}).
merge_msg_blockchain_region_param_v1_pb(#blockchain_region_param_v1_pb{channel_frequency
                                                                           =
                                                                           PFchannel_frequency,
                                                                       bandwidth
                                                                           =
                                                                           PFbandwidth,
                                                                       max_eirp
                                                                           =
                                                                           PFmax_eirp,
                                                                       spreading
                                                                           =
                                                                           PFspreading},
                                        #blockchain_region_param_v1_pb{channel_frequency
                                                                           =
                                                                           NFchannel_frequency,
                                                                       bandwidth
                                                                           =
                                                                           NFbandwidth,
                                                                       max_eirp
                                                                           =
                                                                           NFmax_eirp,
                                                                       spreading
                                                                           =
                                                                           NFspreading},
                                        TrUserData) ->
    #blockchain_region_param_v1_pb{channel_frequency =
                                       if NFchannel_frequency =:= undefined ->
                                              PFchannel_frequency;
                                          true -> NFchannel_frequency
                                       end,
                                   bandwidth =
                                       if NFbandwidth =:= undefined ->
                                              PFbandwidth;
                                          true -> NFbandwidth
                                       end,
                                   max_eirp =
                                       if NFmax_eirp =:= undefined ->
                                              PFmax_eirp;
                                          true -> NFmax_eirp
                                       end,
                                   spreading =
                                       if PFspreading /= undefined,
                                          NFspreading /= undefined ->
                                              merge_msg_blockchain_region_spreading_v1_pb(PFspreading,
                                                                                          NFspreading,
                                                                                          TrUserData);
                                          PFspreading == undefined ->
                                              NFspreading;
                                          NFspreading == undefined ->
                                              PFspreading
                                       end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        empty_pb -> v_msg_empty_pb(Msg, [MsgName], TrUserData);
        gateway_success_resp_pb ->
            v_msg_gateway_success_resp_pb(Msg,
                                          [MsgName],
                                          TrUserData);
        gateway_error_resp_pb ->
            v_msg_gateway_error_resp_pb(Msg, [MsgName], TrUserData);
        gateway_config_req_v1_pb ->
            v_msg_gateway_config_req_v1_pb(Msg,
                                           [MsgName],
                                           TrUserData);
        gateway_config_resp_v1_pb ->
            v_msg_gateway_config_resp_v1_pb(Msg,
                                            [MsgName],
                                            TrUserData);
        gateway_config_update_req_v1_pb ->
            v_msg_gateway_config_update_req_v1_pb(Msg,
                                                  [MsgName],
                                                  TrUserData);
        gateway_config_update_streamed_resp_v1_pb ->
            v_msg_gateway_config_update_streamed_resp_v1_pb(Msg,
                                                            [MsgName],
                                                            TrUserData);
        gateway_validators_req_v1_pb ->
            v_msg_gateway_validators_req_v1_pb(Msg,
                                               [MsgName],
                                               TrUserData);
        gateway_validators_resp_v1_pb ->
            v_msg_gateway_validators_resp_v1_pb(Msg,
                                                [MsgName],
                                                TrUserData);
        gateway_resp_v1_pb ->
            v_msg_gateway_resp_v1_pb(Msg, [MsgName], TrUserData);
        gateway_sc_is_active_req_v1_pb ->
            v_msg_gateway_sc_is_active_req_v1_pb(Msg,
                                                 [MsgName],
                                                 TrUserData);
        gateway_sc_is_active_resp_v1_pb ->
            v_msg_gateway_sc_is_active_resp_v1_pb(Msg,
                                                  [MsgName],
                                                  TrUserData);
        gateway_sc_is_overpaid_req_v1_pb ->
            v_msg_gateway_sc_is_overpaid_req_v1_pb(Msg,
                                                   [MsgName],
                                                   TrUserData);
        gateway_sc_is_overpaid_resp_v1_pb ->
            v_msg_gateway_sc_is_overpaid_resp_v1_pb(Msg,
                                                    [MsgName],
                                                    TrUserData);
        gateway_sc_close_req_v1_pb ->
            v_msg_gateway_sc_close_req_v1_pb(Msg,
                                             [MsgName],
                                             TrUserData);
        gateway_sc_close_resp_v1_pb ->
            v_msg_gateway_sc_close_resp_v1_pb(Msg,
                                              [MsgName],
                                              TrUserData);
        gateway_sc_follow_req_v1_pb ->
            v_msg_gateway_sc_follow_req_v1_pb(Msg,
                                              [MsgName],
                                              TrUserData);
        gateway_sc_follow_streamed_resp_v1_pb ->
            v_msg_gateway_sc_follow_streamed_resp_v1_pb(Msg,
                                                        [MsgName],
                                                        TrUserData);
        routing_pb ->
            v_msg_routing_pb(Msg, [MsgName], TrUserData);
        routing_address_pb ->
            v_msg_routing_address_pb(Msg, [MsgName], TrUserData);
        gateway_routing_req_v1_pb ->
            v_msg_gateway_routing_req_v1_pb(Msg,
                                            [MsgName],
                                            TrUserData);
        gateway_routing_streamed_resp_v1_pb ->
            v_msg_gateway_routing_streamed_resp_v1_pb(Msg,
                                                      [MsgName],
                                                      TrUserData);
        gateway_poc_req_v1_pb ->
            v_msg_gateway_poc_req_v1_pb(Msg, [MsgName], TrUserData);
        gateway_poc_challenge_notification_resp_v1_pb ->
            v_msg_gateway_poc_challenge_notification_resp_v1_pb(Msg,
                                                                [MsgName],
                                                                TrUserData);
        gateway_poc_check_challenge_target_req_v1_pb ->
            v_msg_gateway_poc_check_challenge_target_req_v1_pb(Msg,
                                                               [MsgName],
                                                               TrUserData);
        gateway_poc_region_params_req_v1_pb ->
            v_msg_gateway_poc_region_params_req_v1_pb(Msg,
                                                      [MsgName],
                                                      TrUserData);
        gateway_poc_region_params_resp_v1_pb ->
            v_msg_gateway_poc_region_params_resp_v1_pb(Msg,
                                                       [MsgName],
                                                       TrUserData);
        gateway_poc_check_challenge_target_resp_v1_pb ->
            v_msg_gateway_poc_check_challenge_target_resp_v1_pb(Msg,
                                                                [MsgName],
                                                                TrUserData);
        gateway_poc_report_req_v1_pb ->
            v_msg_gateway_poc_report_req_v1_pb(Msg,
                                               [MsgName],
                                               TrUserData);
        gateway_address_routing_data_req_v1_pb ->
            v_msg_gateway_address_routing_data_req_v1_pb(Msg,
                                                         [MsgName],
                                                         TrUserData);
        gateway_poc_key_routing_data_req_v1_pb ->
            v_msg_gateway_poc_key_routing_data_req_v1_pb(Msg,
                                                         [MsgName],
                                                         TrUserData);
        gateway_public_routing_data_resp_v1_pb ->
            v_msg_gateway_public_routing_data_resp_v1_pb(Msg,
                                                         [MsgName],
                                                         TrUserData);
        blockchain_state_channel_summary_v1_pb ->
            v_msg_blockchain_state_channel_summary_v1_pb(Msg,
                                                         [MsgName],
                                                         TrUserData);
        blockchain_state_channel_v1_pb ->
            v_msg_blockchain_state_channel_v1_pb(Msg,
                                                 [MsgName],
                                                 TrUserData);
        blockchain_state_channel_response_v1_pb ->
            v_msg_blockchain_state_channel_response_v1_pb(Msg,
                                                          [MsgName],
                                                          TrUserData);
        blockchain_state_channel_packet_v1_pb ->
            v_msg_blockchain_state_channel_packet_v1_pb(Msg,
                                                        [MsgName],
                                                        TrUserData);
        blockchain_state_channel_offer_v1_pb ->
            v_msg_blockchain_state_channel_offer_v1_pb(Msg,
                                                       [MsgName],
                                                       TrUserData);
        blockchain_state_channel_purchase_v1_pb ->
            v_msg_blockchain_state_channel_purchase_v1_pb(Msg,
                                                          [MsgName],
                                                          TrUserData);
        blockchain_state_channel_diff_v1_pb ->
            v_msg_blockchain_state_channel_diff_v1_pb(Msg,
                                                      [MsgName],
                                                      TrUserData);
        blockchain_state_channel_diff_entry_v1_pb ->
            v_msg_blockchain_state_channel_diff_entry_v1_pb(Msg,
                                                            [MsgName],
                                                            TrUserData);
        blockchain_state_channel_diff_append_summary_v1_pb ->
            v_msg_blockchain_state_channel_diff_append_summary_v1_pb(Msg,
                                                                     [MsgName],
                                                                     TrUserData);
        blockchain_state_channel_diff_update_summary_v1_pb ->
            v_msg_blockchain_state_channel_diff_update_summary_v1_pb(Msg,
                                                                     [MsgName],
                                                                     TrUserData);
        blockchain_state_channel_banner_v1_pb ->
            v_msg_blockchain_state_channel_banner_v1_pb(Msg,
                                                        [MsgName],
                                                        TrUserData);
        blockchain_state_channel_rejection_v1_pb ->
            v_msg_blockchain_state_channel_rejection_v1_pb(Msg,
                                                           [MsgName],
                                                           TrUserData);
        blockchain_state_channel_message_v1_pb ->
            v_msg_blockchain_state_channel_message_v1_pb(Msg,
                                                         [MsgName],
                                                         TrUserData);
        eui_pb -> v_msg_eui_pb(Msg, [MsgName], TrUserData);
        routing_information_pb ->
            v_msg_routing_information_pb(Msg,
                                         [MsgName],
                                         TrUserData);
        window_pb ->
            v_msg_window_pb(Msg, [MsgName], TrUserData);
        packet_pb ->
            v_msg_packet_pb(Msg, [MsgName], TrUserData);
        blockchain_txn_state_channel_close_v1_pb ->
            v_msg_blockchain_txn_state_channel_close_v1_pb(Msg,
                                                           [MsgName],
                                                           TrUserData);
        blockchain_var_v1_pb ->
            v_msg_blockchain_var_v1_pb(Msg, [MsgName], TrUserData);
        blockchain_txn_vars_v1_pb ->
            v_msg_blockchain_txn_vars_v1_pb(Msg,
                                            [MsgName],
                                            TrUserData);
        blockchain_txn_poc_receipts_v1_pb ->
            v_msg_blockchain_txn_poc_receipts_v1_pb(Msg,
                                                    [MsgName],
                                                    TrUserData);
        blockchain_poc_receipt_v1_pb ->
            v_msg_blockchain_poc_receipt_v1_pb(Msg,
                                               [MsgName],
                                               TrUserData);
        blockchain_poc_witness_v1_pb ->
            v_msg_blockchain_poc_witness_v1_pb(Msg,
                                               [MsgName],
                                               TrUserData);
        blockchain_poc_response_v1_pb ->
            v_msg_blockchain_poc_response_v1_pb(Msg,
                                                [MsgName],
                                                TrUserData);
        blockchain_poc_path_element_v1_pb ->
            v_msg_blockchain_poc_path_element_v1_pb(Msg,
                                                    [MsgName],
                                                    TrUserData);
        blockchain_txn_poc_receipts_v2_pb ->
            v_msg_blockchain_txn_poc_receipts_v2_pb(Msg,
                                                    [MsgName],
                                                    TrUserData);
        blockchain_region_params_v1_pb ->
            v_msg_blockchain_region_params_v1_pb(Msg,
                                                 [MsgName],
                                                 TrUserData);
        tagged_spreading_pb ->
            v_msg_tagged_spreading_pb(Msg, [MsgName], TrUserData);
        blockchain_region_spreading_v1_pb ->
            v_msg_blockchain_region_spreading_v1_pb(Msg,
                                                    [MsgName],
                                                    TrUserData);
        blockchain_region_param_v1_pb ->
            v_msg_blockchain_region_param_v1_pb(Msg,
                                                [MsgName],
                                                TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_empty_pb/3}).
-dialyzer({nowarn_function,v_msg_empty_pb/3}).
v_msg_empty_pb(#empty_pb{}, _Path, _) -> ok;
v_msg_empty_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, empty_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_gateway_success_resp_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_success_resp_pb/3}).
v_msg_gateway_success_resp_pb(#gateway_success_resp_pb{resp
                                                           = F1,
                                                       details = F2},
                              Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [resp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [details | Path], TrUserData)
    end,
    ok;
v_msg_gateway_success_resp_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_success_resp_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_error_resp_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_error_resp_pb/3}).
v_msg_gateway_error_resp_pb(#gateway_error_resp_pb{error
                                                       = F1,
                                                   details = F2},
                            Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [error | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [details | Path], TrUserData)
    end,
    ok;
v_msg_gateway_error_resp_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_error_resp_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_config_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_config_req_v1_pb/3}).
v_msg_gateway_config_req_v1_pb(#gateway_config_req_v1_pb{keys
                                                             = F1},
                               Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_string(Elem, [keys | Path], TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of, string},
                         F1,
                         [keys | Path])
    end,
    ok;
v_msg_gateway_config_req_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_config_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_config_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_config_resp_v1_pb/3}).
v_msg_gateway_config_resp_v1_pb(#gateway_config_resp_v1_pb{result
                                                               = F1},
                                Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_blockchain_var_v1_pb(Elem,
                                           [result | Path],
                                           TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_var_v1_pb}},
                         F1,
                         [result | Path])
    end,
    ok;
v_msg_gateway_config_resp_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_config_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_config_update_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_config_update_req_v1_pb/3}).
v_msg_gateway_config_update_req_v1_pb(#gateway_config_update_req_v1_pb{},
                                      _Path, _) ->
    ok;
v_msg_gateway_config_update_req_v1_pb(X, Path,
                                      _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_config_update_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_config_update_streamed_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_config_update_streamed_resp_v1_pb/3}).
v_msg_gateway_config_update_streamed_resp_v1_pb(#gateway_config_update_streamed_resp_v1_pb{keys
                                                                                               =
                                                                                               F1},
                                                Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_string(Elem, [keys | Path], TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of, string},
                         F1,
                         [keys | Path])
    end,
    ok;
v_msg_gateway_config_update_streamed_resp_v1_pb(X, Path,
                                                _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_config_update_streamed_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_validators_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_validators_req_v1_pb/3}).
v_msg_gateway_validators_req_v1_pb(#gateway_validators_req_v1_pb{quantity
                                                                     = F1},
                                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [quantity | Path], TrUserData)
    end,
    ok;
v_msg_gateway_validators_req_v1_pb(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_validators_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_validators_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_validators_resp_v1_pb/3}).
v_msg_gateway_validators_resp_v1_pb(#gateway_validators_resp_v1_pb{result
                                                                       = F1},
                                    Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_routing_address_pb(Elem,
                                         [result | Path],
                                         TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, routing_address_pb}},
                         F1,
                         [result | Path])
    end,
    ok;
v_msg_gateway_validators_resp_v1_pb(X, Path,
                                    _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_validators_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_resp_v1_pb/3}).
v_msg_gateway_resp_v1_pb(#gateway_resp_v1_pb{height =
                                                 F1,
                                             signature = F2, msg = F3,
                                             block_time = F4, block_age = F5},
                         Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [height | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [signature | Path], TrUserData)
    end,
    case F3 of
        undefined -> ok;
        {is_active_resp, OF3} ->
            v_msg_gateway_sc_is_active_resp_v1_pb(OF3,
                                                  [is_active_resp, msg | Path],
                                                  TrUserData);
        {is_overpaid_resp, OF3} ->
            v_msg_gateway_sc_is_overpaid_resp_v1_pb(OF3,
                                                    [is_overpaid_resp, msg
                                                     | Path],
                                                    TrUserData);
        {close_resp, OF3} ->
            v_msg_gateway_sc_close_resp_v1_pb(OF3,
                                              [close_resp, msg | Path],
                                              TrUserData);
        {follow_streamed_resp, OF3} ->
            v_msg_gateway_sc_follow_streamed_resp_v1_pb(OF3,
                                                        [follow_streamed_resp,
                                                         msg
                                                         | Path],
                                                        TrUserData);
        {routing_streamed_resp, OF3} ->
            v_msg_gateway_routing_streamed_resp_v1_pb(OF3,
                                                      [routing_streamed_resp,
                                                       msg
                                                       | Path],
                                                      TrUserData);
        {config_resp, OF3} ->
            v_msg_gateway_config_resp_v1_pb(OF3,
                                            [config_resp, msg | Path],
                                            TrUserData);
        {config_update_streamed_resp, OF3} ->
            v_msg_gateway_config_update_streamed_resp_v1_pb(OF3,
                                                            [config_update_streamed_resp,
                                                             msg
                                                             | Path],
                                                            TrUserData);
        {validators_resp, OF3} ->
            v_msg_gateway_validators_resp_v1_pb(OF3,
                                                [validators_resp, msg | Path],
                                                TrUserData);
        {success_resp, OF3} ->
            v_msg_gateway_success_resp_pb(OF3,
                                          [success_resp, msg | Path],
                                          TrUserData);
        {error_resp, OF3} ->
            v_msg_gateway_error_resp_pb(OF3,
                                        [error_resp, msg | Path],
                                        TrUserData);
        {poc_challenge_resp, OF3} ->
            v_msg_gateway_poc_challenge_notification_resp_v1_pb(OF3,
                                                                [poc_challenge_resp,
                                                                 msg
                                                                 | Path],
                                                                TrUserData);
        {poc_check_target_resp, OF3} ->
            v_msg_gateway_poc_check_challenge_target_resp_v1_pb(OF3,
                                                                [poc_check_target_resp,
                                                                 msg
                                                                 | Path],
                                                                TrUserData);
        {public_route, OF3} ->
            v_msg_gateway_public_routing_data_resp_v1_pb(OF3,
                                                         [public_route, msg
                                                          | Path],
                                                         TrUserData);
        {poc_region_params_resp, OF3} ->
            v_msg_gateway_poc_region_params_resp_v1_pb(OF3,
                                                       [poc_region_params_resp,
                                                        msg
                                                        | Path],
                                                       TrUserData);
        _ -> mk_type_error(invalid_oneof, F3, [msg | Path])
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_uint64(F4, [block_time | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           v_type_uint64(F5, [block_age | Path], TrUserData)
    end,
    ok;
v_msg_gateway_resp_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_is_active_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_is_active_req_v1_pb/3}).
v_msg_gateway_sc_is_active_req_v1_pb(#gateway_sc_is_active_req_v1_pb{sc_id
                                                                         = F1,
                                                                     sc_owner =
                                                                         F2},
                                     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [sc_owner | Path], TrUserData)
    end,
    ok;
v_msg_gateway_sc_is_active_req_v1_pb(X, Path,
                                     _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_is_active_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_is_active_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_is_active_resp_v1_pb/3}).
v_msg_gateway_sc_is_active_resp_v1_pb(#gateway_sc_is_active_resp_v1_pb{sc_id
                                                                           = F1,
                                                                       sc_owner
                                                                           = F2,
                                                                       active =
                                                                           F3,
                                                                       sc_expiry_at_block
                                                                           = F4,
                                                                       sc_original_dc_amount
                                                                           =
                                                                           F5},
                                      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [sc_owner | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [active | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_uint64(F4,
                         [sc_expiry_at_block | Path],
                         TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           v_type_uint64(F5,
                         [sc_original_dc_amount | Path],
                         TrUserData)
    end,
    ok;
v_msg_gateway_sc_is_active_resp_v1_pb(X, Path,
                                      _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_is_active_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_is_overpaid_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_is_overpaid_req_v1_pb/3}).
v_msg_gateway_sc_is_overpaid_req_v1_pb(#gateway_sc_is_overpaid_req_v1_pb{sc_id
                                                                             =
                                                                             F1,
                                                                         sc_owner
                                                                             =
                                                                             F2,
                                                                         total_dcs
                                                                             =
                                                                             F3},
                                       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [sc_owner | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_uint64(F3, [total_dcs | Path], TrUserData)
    end,
    ok;
v_msg_gateway_sc_is_overpaid_req_v1_pb(X, Path,
                                       _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_is_overpaid_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_is_overpaid_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_is_overpaid_resp_v1_pb/3}).
v_msg_gateway_sc_is_overpaid_resp_v1_pb(#gateway_sc_is_overpaid_resp_v1_pb{sc_id
                                                                               =
                                                                               F1,
                                                                           sc_owner
                                                                               =
                                                                               F2,
                                                                           overpaid
                                                                               =
                                                                               F3},
                                        Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [sc_owner | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [overpaid | Path], TrUserData)
    end,
    ok;
v_msg_gateway_sc_is_overpaid_resp_v1_pb(X, Path,
                                        _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_is_overpaid_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_close_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_close_req_v1_pb/3}).
v_msg_gateway_sc_close_req_v1_pb(#gateway_sc_close_req_v1_pb{close_txn
                                                                 = F1},
                                 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_blockchain_txn_state_channel_close_v1_pb(F1,
                                                          [close_txn | Path],
                                                          TrUserData)
    end,
    ok;
v_msg_gateway_sc_close_req_v1_pb(X, Path,
                                 _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_close_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_close_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_close_resp_v1_pb/3}).
v_msg_gateway_sc_close_resp_v1_pb(#gateway_sc_close_resp_v1_pb{sc_id
                                                                   = F1,
                                                               response = F2},
                                  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [response | Path], TrUserData)
    end,
    ok;
v_msg_gateway_sc_close_resp_v1_pb(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_close_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_follow_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_follow_req_v1_pb/3}).
v_msg_gateway_sc_follow_req_v1_pb(#gateway_sc_follow_req_v1_pb{sc_id
                                                                   = F1,
                                                               sc_owner = F2},
                                  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [sc_owner | Path], TrUserData)
    end,
    ok;
v_msg_gateway_sc_follow_req_v1_pb(X, Path,
                                  _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_follow_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_sc_follow_streamed_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_sc_follow_streamed_resp_v1_pb/3}).
v_msg_gateway_sc_follow_streamed_resp_v1_pb(#gateway_sc_follow_streamed_resp_v1_pb{sc_id
                                                                                       =
                                                                                       F1,
                                                                                   sc_owner
                                                                                       =
                                                                                       F2,
                                                                                   close_state
                                                                                       =
                                                                                       F3},
                                            Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [sc_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [sc_owner | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           'v_enum_helium.close_state'(F3,
                                       [close_state | Path],
                                       TrUserData)
    end,
    ok;
v_msg_gateway_sc_follow_streamed_resp_v1_pb(X, Path,
                                            _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_sc_follow_streamed_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_routing_pb/3}).
-dialyzer({nowarn_function,v_msg_routing_pb/3}).
v_msg_routing_pb(#routing_pb{oui = F1, owner = F2,
                             addresses = F3, filters = F4, subnets = F5},
                 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [oui | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [owner | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_routing_address_pb(Elem,
                                         [addresses | Path],
                                         TrUserData)
                || Elem <- F3],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, routing_address_pb}},
                         F3,
                         [addresses | Path])
    end,
    if is_list(F4) ->
           _ = [v_type_bytes(Elem, [filters | Path], TrUserData)
                || Elem <- F4],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F4,
                         [filters | Path])
    end,
    if is_list(F5) ->
           _ = [v_type_bytes(Elem, [subnets | Path], TrUserData)
                || Elem <- F5],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F5,
                         [subnets | Path])
    end,
    ok;
v_msg_routing_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_routing_address_pb/3}).
-dialyzer({nowarn_function,v_msg_routing_address_pb/3}).
v_msg_routing_address_pb(#routing_address_pb{pub_key =
                                                 F1,
                                             uri = F2},
                         Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [pub_key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [uri | Path], TrUserData)
    end,
    ok;
v_msg_routing_address_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_address_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_routing_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_routing_req_v1_pb/3}).
v_msg_gateway_routing_req_v1_pb(#gateway_routing_req_v1_pb{height
                                                               = F1},
                                Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [height | Path], TrUserData)
    end,
    ok;
v_msg_gateway_routing_req_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_routing_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_routing_streamed_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_routing_streamed_resp_v1_pb/3}).
v_msg_gateway_routing_streamed_resp_v1_pb(#gateway_routing_streamed_resp_v1_pb{routings
                                                                                   =
                                                                                   F1},
                                          Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_routing_pb(Elem,
                                 [routings | Path],
                                 TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of, {msg, routing_pb}},
                         F1,
                         [routings | Path])
    end,
    ok;
v_msg_gateway_routing_streamed_resp_v1_pb(X, Path,
                                          _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_routing_streamed_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_req_v1_pb/3}).
v_msg_gateway_poc_req_v1_pb(#gateway_poc_req_v1_pb{address
                                                       = F1,
                                                   signature = F2},
                            Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [signature | Path], TrUserData)
    end,
    ok;
v_msg_gateway_poc_req_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, gateway_poc_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_challenge_notification_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_challenge_notification_resp_v1_pb/3}).
v_msg_gateway_poc_challenge_notification_resp_v1_pb(#gateway_poc_challenge_notification_resp_v1_pb{challenger
                                                                                                       =
                                                                                                       F1,
                                                                                                   block_hash
                                                                                                       =
                                                                                                       F2,
                                                                                                   onion_key_hash
                                                                                                       =
                                                                                                       F3},
                                                    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_routing_address_pb(F1,
                                    [challenger | Path],
                                    TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_bytes(F2, [block_hash | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_bytes(F3, [onion_key_hash | Path], TrUserData)
    end,
    ok;
v_msg_gateway_poc_challenge_notification_resp_v1_pb(X,
                                                    Path, _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_challenge_notification_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_check_challenge_target_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_check_challenge_target_req_v1_pb/3}).
v_msg_gateway_poc_check_challenge_target_req_v1_pb(#gateway_poc_check_challenge_target_req_v1_pb{address
                                                                                                     =
                                                                                                     F1,
                                                                                                 challenger
                                                                                                     =
                                                                                                     F2,
                                                                                                 block_hash
                                                                                                     =
                                                                                                     F3,
                                                                                                 onion_key_hash
                                                                                                     =
                                                                                                     F4,
                                                                                                 height
                                                                                                     =
                                                                                                     F5,
                                                                                                 notifier
                                                                                                     =
                                                                                                     F6,
                                                                                                 notifier_sig
                                                                                                     =
                                                                                                     F7,
                                                                                                 challengee_sig
                                                                                                     =
                                                                                                     F8},
                                                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_bytes(F2, [challenger | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_bytes(F3, [block_hash | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_bytes(F4, [onion_key_hash | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [height | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [notifier | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
           v_type_bytes(F7, [notifier_sig | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
           v_type_bytes(F8, [challengee_sig | Path], TrUserData)
    end,
    ok;
v_msg_gateway_poc_check_challenge_target_req_v1_pb(X,
                                                   Path, _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_check_challenge_target_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_region_params_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_region_params_req_v1_pb/3}).
v_msg_gateway_poc_region_params_req_v1_pb(#gateway_poc_region_params_req_v1_pb{address
                                                                                   =
                                                                                   F1,
                                                                               signature
                                                                                   =
                                                                                   F2},
                                          Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [signature | Path], TrUserData)
    end,
    ok;
v_msg_gateway_poc_region_params_req_v1_pb(X, Path,
                                          _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_region_params_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_region_params_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_region_params_resp_v1_pb/3}).
v_msg_gateway_poc_region_params_resp_v1_pb(#gateway_poc_region_params_resp_v1_pb{address
                                                                                     =
                                                                                     F1,
                                                                                 region
                                                                                     =
                                                                                     F2,
                                                                                 params
                                                                                     =
                                                                                     F3},
                                           Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [region | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_msg_blockchain_region_params_v1_pb(F3,
                                                [params | Path],
                                                TrUserData)
    end,
    ok;
v_msg_gateway_poc_region_params_resp_v1_pb(X, Path,
                                           _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_region_params_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_check_challenge_target_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_check_challenge_target_resp_v1_pb/3}).
v_msg_gateway_poc_check_challenge_target_resp_v1_pb(#gateway_poc_check_challenge_target_resp_v1_pb{target
                                                                                                       =
                                                                                                       F1,
                                                                                                   onion
                                                                                                       =
                                                                                                       F2},
                                                    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [target | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [onion | Path], TrUserData)
    end,
    ok;
v_msg_gateway_poc_check_challenge_target_resp_v1_pb(X,
                                                    Path, _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_check_challenge_target_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_report_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_report_req_v1_pb/3}).
v_msg_gateway_poc_report_req_v1_pb(#gateway_poc_report_req_v1_pb{onion_key_hash
                                                                     = F1,
                                                                 msg = F2},
                                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_bytes(F1, [onion_key_hash | Path], TrUserData)
    end,
    case F2 of
        undefined -> ok;
        {receipt, OF2} ->
            v_msg_blockchain_poc_receipt_v1_pb(OF2,
                                               [receipt, msg | Path],
                                               TrUserData);
        {witness, OF2} ->
            v_msg_blockchain_poc_witness_v1_pb(OF2,
                                               [witness, msg | Path],
                                               TrUserData);
        _ -> mk_type_error(invalid_oneof, F2, [msg | Path])
    end,
    ok;
v_msg_gateway_poc_report_req_v1_pb(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_report_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_address_routing_data_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_address_routing_data_req_v1_pb/3}).
v_msg_gateway_address_routing_data_req_v1_pb(#gateway_address_routing_data_req_v1_pb{address
                                                                                         =
                                                                                         F1},
                                             Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [address | Path], TrUserData)
    end,
    ok;
v_msg_gateway_address_routing_data_req_v1_pb(X, Path,
                                             _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_address_routing_data_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_poc_key_routing_data_req_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_poc_key_routing_data_req_v1_pb/3}).
v_msg_gateway_poc_key_routing_data_req_v1_pb(#gateway_poc_key_routing_data_req_v1_pb{key
                                                                                         =
                                                                                         F1},
                                             Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [key | Path], TrUserData)
    end,
    ok;
v_msg_gateway_poc_key_routing_data_req_v1_pb(X, Path,
                                             _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_poc_key_routing_data_req_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_gateway_public_routing_data_resp_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_gateway_public_routing_data_resp_v1_pb/3}).
v_msg_gateway_public_routing_data_resp_v1_pb(#gateway_public_routing_data_resp_v1_pb{address
                                                                                         =
                                                                                         F1,
                                                                                     public_uri
                                                                                         =
                                                                                         F2},
                                             Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_msg_routing_address_pb(F2,
                                    [public_uri | Path],
                                    TrUserData)
    end,
    ok;
v_msg_gateway_public_routing_data_resp_v1_pb(X, Path,
                                             _TrUserData) ->
    mk_type_error({expected_msg,
                   gateway_public_routing_data_resp_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_summary_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_summary_v1_pb/3}).
v_msg_blockchain_state_channel_summary_v1_pb(#blockchain_state_channel_summary_v1_pb{client_pubkeybin
                                                                                         =
                                                                                         F1,
                                                                                     num_packets
                                                                                         =
                                                                                         F2,
                                                                                     num_dcs
                                                                                         =
                                                                                         F3},
                                             Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_bytes(F1, [client_pubkeybin | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [num_packets | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [num_dcs | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_summary_v1_pb(X, Path,
                                             _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_summary_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_v1_pb/3}).
v_msg_blockchain_state_channel_v1_pb(#blockchain_state_channel_v1_pb{id
                                                                         = F1,
                                                                     owner = F2,
                                                                     credits =
                                                                         F3,
                                                                     nonce = F4,
                                                                     summaries =
                                                                         F5,
                                                                     root_hash =
                                                                         F6,
                                                                     skewed =
                                                                         F7,
                                                                     state = F8,
                                                                     expire_at_block
                                                                         = F9,
                                                                     signature =
                                                                         F10},
                                     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [owner | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [credits | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [nonce | Path], TrUserData)
    end,
    if is_list(F5) ->
           _ = [v_msg_blockchain_state_channel_summary_v1_pb(Elem,
                                                             [summaries | Path],
                                                             TrUserData)
                || Elem <- F5],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_state_channel_summary_v1_pb}},
                         F5,
                         [summaries | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [root_hash | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bytes(F7, [skewed | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
           'v_enum_helium.blockchain_state_channel_state_v1'(F8,
                                                             [state | Path],
                                                             TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
           v_type_uint64(F9, [expire_at_block | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
           v_type_bytes(F10, [signature | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_v1_pb(X, Path,
                                     _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_response_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_response_v1_pb/3}).
v_msg_blockchain_state_channel_response_v1_pb(#blockchain_state_channel_response_v1_pb{accepted
                                                                                           =
                                                                                           F1,
                                                                                       downlink
                                                                                           =
                                                                                           F2},
                                              Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [accepted | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_msg_packet_pb(F2, [downlink | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_response_v1_pb(X, Path,
                                              _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_response_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_packet_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_packet_v1_pb/3}).
v_msg_blockchain_state_channel_packet_v1_pb(#blockchain_state_channel_packet_v1_pb{packet
                                                                                       =
                                                                                       F1,
                                                                                   hotspot
                                                                                       =
                                                                                       F2,
                                                                                   signature
                                                                                       =
                                                                                       F3,
                                                                                   region
                                                                                       =
                                                                                       F4,
                                                                                   hold_time
                                                                                       =
                                                                                       F5},
                                            Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_packet_pb(F1, [packet | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [hotspot | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [signature | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           'v_enum_helium.Region'(F4, [region | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           v_type_uint64(F5, [hold_time | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_packet_v1_pb(X, Path,
                                            _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_packet_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_offer_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_offer_v1_pb/3}).
v_msg_blockchain_state_channel_offer_v1_pb(#blockchain_state_channel_offer_v1_pb{routing
                                                                                     =
                                                                                     F1,
                                                                                 packet_hash
                                                                                     =
                                                                                     F2,
                                                                                 payload_size
                                                                                     =
                                                                                     F3,
                                                                                 fcnt
                                                                                     =
                                                                                     F4,
                                                                                 hotspot
                                                                                     =
                                                                                     F5,
                                                                                 signature
                                                                                     =
                                                                                     F6,
                                                                                 region
                                                                                     =
                                                                                     F7,
                                                                                 req_diff
                                                                                     =
                                                                                     F8},
                                           Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_routing_information_pb(F1,
                                        [routing | Path],
                                        TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_bytes(F2, [packet_hash | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_uint64(F3, [payload_size | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [fcnt | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [hotspot | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [signature | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
           'v_enum_helium.Region'(F7, [region | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [req_diff | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_offer_v1_pb(X, Path,
                                           _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_offer_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_purchase_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_purchase_v1_pb/3}).
v_msg_blockchain_state_channel_purchase_v1_pb(#blockchain_state_channel_purchase_v1_pb{sc
                                                                                           =
                                                                                           F1,
                                                                                       hotspot
                                                                                           =
                                                                                           F2,
                                                                                       packet_hash
                                                                                           =
                                                                                           F3,
                                                                                       region
                                                                                           =
                                                                                           F4,
                                                                                       sc_diff
                                                                                           =
                                                                                           F5},
                                              Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_blockchain_state_channel_v1_pb(F1,
                                                [sc | Path],
                                                TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [hotspot | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_bytes(F3, [packet_hash | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           'v_enum_helium.Region'(F4, [region | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           v_msg_blockchain_state_channel_diff_v1_pb(F5,
                                                     [sc_diff | Path],
                                                     TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_purchase_v1_pb(X, Path,
                                              _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_purchase_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_diff_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_diff_v1_pb/3}).
v_msg_blockchain_state_channel_diff_v1_pb(#blockchain_state_channel_diff_v1_pb{id
                                                                                   =
                                                                                   F1,
                                                                               add_nonce
                                                                                   =
                                                                                   F2,
                                                                               signature
                                                                                   =
                                                                                   F3,
                                                                               diffs
                                                                                   =
                                                                                   F4},
                                          Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [add_nonce | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [signature | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ =
               [v_msg_blockchain_state_channel_diff_entry_v1_pb(Elem,
                                                                [diffs | Path],
                                                                TrUserData)
                || Elem <- F4],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_state_channel_diff_entry_v1_pb}},
                         F4,
                         [diffs | Path])
    end,
    ok;
v_msg_blockchain_state_channel_diff_v1_pb(X, Path,
                                          _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_diff_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_diff_entry_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_diff_entry_v1_pb/3}).
v_msg_blockchain_state_channel_diff_entry_v1_pb(#blockchain_state_channel_diff_entry_v1_pb{entry
                                                                                               =
                                                                                               F1},
                                                Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {append, OF1} ->
            v_msg_blockchain_state_channel_diff_append_summary_v1_pb(OF1,
                                                                     [append,
                                                                      entry
                                                                      | Path],
                                                                     TrUserData);
        {add, OF1} ->
            v_msg_blockchain_state_channel_diff_update_summary_v1_pb(OF1,
                                                                     [add, entry
                                                                      | Path],
                                                                     TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [entry | Path])
    end,
    ok;
v_msg_blockchain_state_channel_diff_entry_v1_pb(X, Path,
                                                _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_diff_entry_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_diff_append_summary_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_diff_append_summary_v1_pb/3}).
v_msg_blockchain_state_channel_diff_append_summary_v1_pb(#blockchain_state_channel_diff_append_summary_v1_pb{client_pubkeybin
                                                                                                                 =
                                                                                                                 F1,
                                                                                                             num_packets
                                                                                                                 =
                                                                                                                 F2,
                                                                                                             num_dcs
                                                                                                                 =
                                                                                                                 F3},
                                                         Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_bytes(F1, [client_pubkeybin | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [num_packets | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [num_dcs | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_diff_append_summary_v1_pb(X,
                                                         Path, _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_diff_append_summary_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_diff_update_summary_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_diff_update_summary_v1_pb/3}).
v_msg_blockchain_state_channel_diff_update_summary_v1_pb(#blockchain_state_channel_diff_update_summary_v1_pb{client_index
                                                                                                                 =
                                                                                                                 F1,
                                                                                                             add_packets
                                                                                                                 =
                                                                                                                 F2,
                                                                                                             add_dcs
                                                                                                                 =
                                                                                                                 F3},
                                                         Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint64(F1, [client_index | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [add_packets | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [add_dcs | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_diff_update_summary_v1_pb(X,
                                                         Path, _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_diff_update_summary_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_banner_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_banner_v1_pb/3}).
v_msg_blockchain_state_channel_banner_v1_pb(#blockchain_state_channel_banner_v1_pb{sc
                                                                                       =
                                                                                       F1},
                                            Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_blockchain_state_channel_v1_pb(F1,
                                                [sc | Path],
                                                TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_banner_v1_pb(X, Path,
                                            _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_banner_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_rejection_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_rejection_v1_pb/3}).
v_msg_blockchain_state_channel_rejection_v1_pb(#blockchain_state_channel_rejection_v1_pb{reject
                                                                                             =
                                                                                             F1,
                                                                                         packet_hash
                                                                                             =
                                                                                             F2},
                                               Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [reject | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_bytes(F2, [packet_hash | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_state_channel_rejection_v1_pb(X, Path,
                                               _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_rejection_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_state_channel_message_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_state_channel_message_v1_pb/3}).
v_msg_blockchain_state_channel_message_v1_pb(#blockchain_state_channel_message_v1_pb{msg
                                                                                         =
                                                                                         F1},
                                             Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {response, OF1} ->
            v_msg_blockchain_state_channel_response_v1_pb(OF1,
                                                          [response, msg
                                                           | Path],
                                                          TrUserData);
        {packet, OF1} ->
            v_msg_blockchain_state_channel_packet_v1_pb(OF1,
                                                        [packet, msg | Path],
                                                        TrUserData);
        {offer, OF1} ->
            v_msg_blockchain_state_channel_offer_v1_pb(OF1,
                                                       [offer, msg | Path],
                                                       TrUserData);
        {purchase, OF1} ->
            v_msg_blockchain_state_channel_purchase_v1_pb(OF1,
                                                          [purchase, msg
                                                           | Path],
                                                          TrUserData);
        {banner, OF1} ->
            v_msg_blockchain_state_channel_banner_v1_pb(OF1,
                                                        [banner, msg | Path],
                                                        TrUserData);
        {reject, OF1} ->
            v_msg_blockchain_state_channel_rejection_v1_pb(OF1,
                                                           [reject, msg | Path],
                                                           TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok;
v_msg_blockchain_state_channel_message_v1_pb(X, Path,
                                             _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_state_channel_message_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_eui_pb/3}).
-dialyzer({nowarn_function,v_msg_eui_pb/3}).
v_msg_eui_pb(#eui_pb{deveui = F1, appeui = F2}, Path,
             TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [deveui | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [appeui | Path], TrUserData)
    end,
    ok;
v_msg_eui_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, eui_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_routing_information_pb/3}).
-dialyzer({nowarn_function,v_msg_routing_information_pb/3}).
v_msg_routing_information_pb(#routing_information_pb{data
                                                         = F1},
                             Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {devaddr, OF1} ->
            v_type_uint32(OF1, [devaddr, data | Path], TrUserData);
        {eui, OF1} ->
            v_msg_eui_pb(OF1, [eui, data | Path], TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [data | Path])
    end,
    ok;
v_msg_routing_information_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_information_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_window_pb/3}).
-dialyzer({nowarn_function,v_msg_window_pb/3}).
v_msg_window_pb(#window_pb{timestamp = F1,
                           frequency = F2, datarate = F3},
                Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint64(F1, [timestamp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [frequency | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [datarate | Path], TrUserData)
    end,
    ok;
v_msg_window_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, window_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_packet_pb/3}).
-dialyzer({nowarn_function,v_msg_packet_pb/3}).
v_msg_packet_pb(#packet_pb{oui = F1, type = F2,
                           payload = F3, timestamp = F4, signal_strength = F5,
                           frequency = F6, datarate = F7, snr = F8,
                           routing = F9, rx2_window = F10},
                Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [oui | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           'v_enum_packet_pb.packet_type'(F2,
                                          [type | Path],
                                          TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [payload | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_uint64(F4, [timestamp | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           v_type_float(F5, [signal_strength | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [frequency | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [datarate | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [snr | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
           v_msg_routing_information_pb(F9,
                                        [routing | Path],
                                        TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
           v_msg_window_pb(F10, [rx2_window | Path], TrUserData)
    end,
    ok;
v_msg_packet_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, packet_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_blockchain_txn_state_channel_close_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_txn_state_channel_close_v1_pb/3}).
v_msg_blockchain_txn_state_channel_close_v1_pb(#blockchain_txn_state_channel_close_v1_pb{state_channel
                                                                                             =
                                                                                             F1,
                                                                                         closer
                                                                                             =
                                                                                             F2,
                                                                                         signature
                                                                                             =
                                                                                             F3,
                                                                                         fee
                                                                                             =
                                                                                             F4,
                                                                                         conflicts_with
                                                                                             =
                                                                                             F5},
                                               Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_msg_blockchain_state_channel_v1_pb(F1,
                                                [state_channel | Path],
                                                TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [closer | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [signature | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [fee | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           v_msg_blockchain_state_channel_v1_pb(F5,
                                                [conflicts_with | Path],
                                                TrUserData)
    end,
    ok;
v_msg_blockchain_txn_state_channel_close_v1_pb(X, Path,
                                               _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_txn_state_channel_close_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_var_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_var_v1_pb/3}).
v_msg_blockchain_var_v1_pb(#blockchain_var_v1_pb{name =
                                                     F1,
                                                 type = F2, value = F3},
                           Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [name | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [type | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [value | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_var_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, blockchain_var_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_txn_vars_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_txn_vars_v1_pb/3}).
v_msg_blockchain_txn_vars_v1_pb(#blockchain_txn_vars_v1_pb{vars
                                                               = F1,
                                                           version_predicate =
                                                               F2,
                                                           proof = F3,
                                                           master_key = F4,
                                                           key_proof = F5,
                                                           cancels = F6,
                                                           unsets = F7,
                                                           nonce = F8,
                                                           multi_keys = F9,
                                                           multi_proofs = F10,
                                                           multi_key_proofs =
                                                               F11},
                                Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_blockchain_var_v1_pb(Elem,
                                           [vars | Path],
                                           TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_var_v1_pb}},
                         F1,
                         [vars | Path])
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint32(F2,
                         [version_predicate | Path],
                         TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [proof | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_bytes(F4, [master_key | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [key_proof | Path], TrUserData)
    end,
    if is_list(F6) ->
           _ = [v_type_bytes(Elem, [cancels | Path], TrUserData)
                || Elem <- F6],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F6,
                         [cancels | Path])
    end,
    if is_list(F7) ->
           _ = [v_type_bytes(Elem, [unsets | Path], TrUserData)
                || Elem <- F7],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F7,
                         [unsets | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [nonce | Path], TrUserData)
    end,
    if is_list(F9) ->
           _ = [v_type_bytes(Elem, [multi_keys | Path], TrUserData)
                || Elem <- F9],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F9,
                         [multi_keys | Path])
    end,
    if is_list(F10) ->
           _ = [v_type_bytes(Elem,
                             [multi_proofs | Path],
                             TrUserData)
                || Elem <- F10],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F10,
                         [multi_proofs | Path])
    end,
    if is_list(F11) ->
           _ = [v_type_bytes(Elem,
                             [multi_key_proofs | Path],
                             TrUserData)
                || Elem <- F11],
           ok;
       true ->
           mk_type_error({invalid_list_of, bytes},
                         F11,
                         [multi_key_proofs | Path])
    end,
    ok;
v_msg_blockchain_txn_vars_v1_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, blockchain_txn_vars_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_txn_poc_receipts_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_txn_poc_receipts_v1_pb/3}).
v_msg_blockchain_txn_poc_receipts_v1_pb(#blockchain_txn_poc_receipts_v1_pb{challenger
                                                                               =
                                                                               F1,
                                                                           secret
                                                                               =
                                                                               F2,
                                                                           onion_key_hash
                                                                               =
                                                                               F3,
                                                                           path
                                                                               =
                                                                               F4,
                                                                           fee =
                                                                               F5,
                                                                           signature
                                                                               =
                                                                               F6,
                                                                           request_block_hash
                                                                               =
                                                                               F7},
                                        Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_bytes(F1, [challenger | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [secret | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_bytes(F3, [onion_key_hash | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_msg_blockchain_poc_path_element_v1_pb(Elem,
                                                        [path | Path],
                                                        TrUserData)
                || Elem <- F4],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_poc_path_element_v1_pb}},
                         F4,
                         [path | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [fee | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [signature | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
           v_type_bytes(F7,
                        [request_block_hash | Path],
                        TrUserData)
    end,
    ok;
v_msg_blockchain_txn_poc_receipts_v1_pb(X, Path,
                                        _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_txn_poc_receipts_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_poc_receipt_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_poc_receipt_v1_pb/3}).
v_msg_blockchain_poc_receipt_v1_pb(#blockchain_poc_receipt_v1_pb{gateway
                                                                     = F1,
                                                                 timestamp = F2,
                                                                 signal = F3,
                                                                 data = F4,
                                                                 origin = F5,
                                                                 signature = F6,
                                                                 snr = F7,
                                                                 frequency = F8,
                                                                 channel = F9,
                                                                 datarate = F10,
                                                                 addr_hash =
                                                                     F11,
                                                                 tx_power =
                                                                     F12},
                                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [gateway | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_sint32(F3, [signal | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [data | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
           'v_enum_helium.origin'(F5, [origin | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [signature | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [snr | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [frequency | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [channel | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
           v_type_string(F10, [datarate | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true ->
           v_type_bytes(F11, [addr_hash | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_int32(F12, [tx_power | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_poc_receipt_v1_pb(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_poc_receipt_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_poc_witness_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_poc_witness_v1_pb/3}).
v_msg_blockchain_poc_witness_v1_pb(#blockchain_poc_witness_v1_pb{gateway
                                                                     = F1,
                                                                 timestamp = F2,
                                                                 signal = F3,
                                                                 packet_hash =
                                                                     F4,
                                                                 signature = F5,
                                                                 snr = F6,
                                                                 frequency = F7,
                                                                 channel = F8,
                                                                 datarate = F9},
                                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [gateway | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_sint32(F3, [signal | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_bytes(F4, [packet_hash | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bytes(F5, [signature | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [snr | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [frequency | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [channel | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [datarate | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_poc_witness_v1_pb(X, Path,
                                   _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_poc_witness_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_poc_response_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_poc_response_v1_pb/3}).
v_msg_blockchain_poc_response_v1_pb(#blockchain_poc_response_v1_pb{payload
                                                                       = F1},
                                    Path, TrUserData) ->
    case F1 of
        undefined -> ok;
        {receipt, OF1} ->
            v_msg_blockchain_poc_receipt_v1_pb(OF1,
                                               [receipt, payload | Path],
                                               TrUserData);
        {witness, OF1} ->
            v_msg_blockchain_poc_witness_v1_pb(OF1,
                                               [witness, payload | Path],
                                               TrUserData);
        _ -> mk_type_error(invalid_oneof, F1, [payload | Path])
    end,
    ok;
v_msg_blockchain_poc_response_v1_pb(X, Path,
                                    _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_poc_response_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_poc_path_element_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_poc_path_element_v1_pb/3}).
v_msg_blockchain_poc_path_element_v1_pb(#blockchain_poc_path_element_v1_pb{challengee
                                                                               =
                                                                               F1,
                                                                           receipt
                                                                               =
                                                                               F2,
                                                                           witnesses
                                                                               =
                                                                               F3},
                                        Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_bytes(F1, [challengee | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_msg_blockchain_poc_receipt_v1_pb(F2,
                                              [receipt | Path],
                                              TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_msg_blockchain_poc_witness_v1_pb(Elem,
                                                   [witnesses | Path],
                                                   TrUserData)
                || Elem <- F3],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_poc_witness_v1_pb}},
                         F3,
                         [witnesses | Path])
    end,
    ok;
v_msg_blockchain_poc_path_element_v1_pb(X, Path,
                                        _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_poc_path_element_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_txn_poc_receipts_v2_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_txn_poc_receipts_v2_pb/3}).
v_msg_blockchain_txn_poc_receipts_v2_pb(#blockchain_txn_poc_receipts_v2_pb{challenger
                                                                               =
                                                                               F1,
                                                                           secret
                                                                               =
                                                                               F2,
                                                                           onion_key_hash
                                                                               =
                                                                               F3,
                                                                           path
                                                                               =
                                                                               F4,
                                                                           fee =
                                                                               F5,
                                                                           signature
                                                                               =
                                                                               F6,
                                                                           block_hash
                                                                               =
                                                                               F7},
                                        Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_bytes(F1, [challenger | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [secret | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_bytes(F3, [onion_key_hash | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_msg_blockchain_poc_path_element_v1_pb(Elem,
                                                        [path | Path],
                                                        TrUserData)
                || Elem <- F4],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_poc_path_element_v1_pb}},
                         F4,
                         [path | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [fee | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [signature | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
           v_type_bytes(F7, [block_hash | Path], TrUserData)
    end,
    ok;
v_msg_blockchain_txn_poc_receipts_v2_pb(X, Path,
                                        _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_txn_poc_receipts_v2_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_region_params_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_region_params_v1_pb/3}).
v_msg_blockchain_region_params_v1_pb(#blockchain_region_params_v1_pb{region_params
                                                                         = F1},
                                     Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_blockchain_region_param_v1_pb(Elem,
                                                    [region_params | Path],
                                                    TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, blockchain_region_param_v1_pb}},
                         F1,
                         [region_params | Path])
    end,
    ok;
v_msg_blockchain_region_params_v1_pb(X, Path,
                                     _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_region_params_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_tagged_spreading_pb/3}).
-dialyzer({nowarn_function,v_msg_tagged_spreading_pb/3}).
v_msg_tagged_spreading_pb(#tagged_spreading_pb{region_spreading
                                                   = F1,
                                               max_packet_size = F2},
                          Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           'v_enum_helium.RegionSpreading'(F1,
                                           [region_spreading | Path],
                                           TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint32(F2, [max_packet_size | Path], TrUserData)
    end,
    ok;
v_msg_tagged_spreading_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, tagged_spreading_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_region_spreading_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_region_spreading_v1_pb/3}).
v_msg_blockchain_region_spreading_v1_pb(#blockchain_region_spreading_v1_pb{tagged_spreading
                                                                               =
                                                                               F1},
                                        Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_msg_tagged_spreading_pb(Elem,
                                          [tagged_spreading | Path],
                                          TrUserData)
                || Elem <- F1],
           ok;
       true ->
           mk_type_error({invalid_list_of,
                          {msg, tagged_spreading_pb}},
                         F1,
                         [tagged_spreading | Path])
    end,
    ok;
v_msg_blockchain_region_spreading_v1_pb(X, Path,
                                        _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_region_spreading_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_blockchain_region_param_v1_pb/3}).
-dialyzer({nowarn_function,v_msg_blockchain_region_param_v1_pb/3}).
v_msg_blockchain_region_param_v1_pb(#blockchain_region_param_v1_pb{channel_frequency
                                                                       = F1,
                                                                   bandwidth =
                                                                       F2,
                                                                   max_eirp =
                                                                       F3,
                                                                   spreading =
                                                                       F4},
                                    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint64(F1,
                         [channel_frequency | Path],
                         TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint32(F2, [bandwidth | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [max_eirp | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_msg_blockchain_region_spreading_v1_pb(F4,
                                                   [spreading | Path],
                                                   TrUserData)
    end,
    ok;
v_msg_blockchain_region_param_v1_pb(X, Path,
                                    _TrUserData) ->
    mk_type_error({expected_msg,
                   blockchain_region_param_v1_pb},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_helium.close_state'/3}).
-dialyzer({nowarn_function,'v_enum_helium.close_state'/3}).
'v_enum_helium.close_state'(close_state_closable, _Path,
                            _TrUserData) ->
    ok;
'v_enum_helium.close_state'(close_state_closing, _Path,
                            _TrUserData) ->
    ok;
'v_enum_helium.close_state'(close_state_closed, _Path,
                            _TrUserData) ->
    ok;
'v_enum_helium.close_state'(close_state_dispute, _Path,
                            _TrUserData) ->
    ok;
'v_enum_helium.close_state'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.close_state'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'helium.close_state'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_helium.Region'/3}).
-dialyzer({nowarn_function,'v_enum_helium.Region'/3}).
'v_enum_helium.Region'('US915', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('EU868', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('EU433', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('CN470', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('CN779', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AU915', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AS923_1', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('KR920', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('IN865', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AS923_2', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AS923_3', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AS923_4', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.Region'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'helium.Region'}, X, Path).

-compile({nowarn_unused_function,'v_enum_helium.blockchain_state_channel_state_v1'/3}).
-dialyzer({nowarn_function,'v_enum_helium.blockchain_state_channel_state_v1'/3}).
'v_enum_helium.blockchain_state_channel_state_v1'(open,
                                                  _Path, _TrUserData) ->
    ok;
'v_enum_helium.blockchain_state_channel_state_v1'(closed,
                                                  _Path, _TrUserData) ->
    ok;
'v_enum_helium.blockchain_state_channel_state_v1'(V,
                                                  Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.blockchain_state_channel_state_v1'(X,
                                                  Path, _TrUserData) ->
    mk_type_error({invalid_enum,
                   'helium.blockchain_state_channel_state_v1'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_packet_pb.packet_type'/3}).
-dialyzer({nowarn_function,'v_enum_packet_pb.packet_type'/3}).
'v_enum_packet_pb.packet_type'(longfi, _Path,
                               _TrUserData) ->
    ok;
'v_enum_packet_pb.packet_type'(lorawan, _Path,
                               _TrUserData) ->
    ok;
'v_enum_packet_pb.packet_type'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_packet_pb.packet_type'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'packet_pb.packet_type'},
                  X,
                  Path).

-compile({nowarn_unused_function,'v_enum_helium.origin'/3}).
-dialyzer({nowarn_function,'v_enum_helium.origin'/3}).
'v_enum_helium.origin'(p2p, _Path, _TrUserData) -> ok;
'v_enum_helium.origin'(radio, _Path, _TrUserData) -> ok;
'v_enum_helium.origin'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.origin'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'helium.origin'}, X, Path).

-compile({nowarn_unused_function,'v_enum_helium.RegionSpreading'/3}).
-dialyzer({nowarn_function,'v_enum_helium.RegionSpreading'/3}).
'v_enum_helium.RegionSpreading'('SF_INVALID', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'('SF7', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'('SF8', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'('SF9', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'('SF10', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'('SF11', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'('SF12', _Path,
                                _TrUserData) ->
    ok;
'v_enum_helium.RegionSpreading'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.RegionSpreading'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'helium.RegionSpreading'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
                  N,
                  Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
                  N,
                  Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint32,
                   unsigned,
                   32},
                  N,
                  Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint64,
                   unsigned,
                   64},
                  N,
                  Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'helium.close_state'},
      [{close_state_closable, 0},
       {close_state_closing, 1},
       {close_state_closed, 2},
       {close_state_dispute, 3}]},
     {{enum, 'helium.Region'},
      [{'US915', 0},
       {'EU868', 1},
       {'EU433', 2},
       {'CN470', 3},
       {'CN779', 4},
       {'AU915', 5},
       {'AS923_1', 6},
       {'KR920', 7},
       {'IN865', 8},
       {'AS923_2', 9},
       {'AS923_3', 10},
       {'AS923_4', 11}]},
     {{enum, 'helium.blockchain_state_channel_state_v1'},
      [{open, 0}, {closed, 1}]},
     {{enum, 'packet_pb.packet_type'},
      [{longfi, 0}, {lorawan, 1}]},
     {{enum, 'helium.origin'}, [{p2p, 0}, {radio, 1}]},
     {{enum, 'helium.RegionSpreading'},
      [{'SF_INVALID', 0},
       {'SF7', 1},
       {'SF8', 2},
       {'SF9', 3},
       {'SF10', 4},
       {'SF11', 5},
       {'SF12', 6}]},
     {{msg, empty_pb}, []},
     {{msg, gateway_success_resp_pb},
      [[{name, resp},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, details},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_error_resp_pb},
      [[{name, error},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, details},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_config_req_v1_pb},
      [[{name, keys},
        {fnum, 1},
        {rnum, 2},
        {type, string},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, gateway_config_resp_v1_pb},
      [[{name, result},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_var_v1_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, gateway_config_update_req_v1_pb}, []},
     {{msg, gateway_config_update_streamed_resp_v1_pb},
      [[{name, keys},
        {fnum, 1},
        {rnum, 2},
        {type, string},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, gateway_validators_req_v1_pb},
      [[{name, quantity},
        {fnum, 1},
        {rnum, 2},
        {type, uint32},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_validators_resp_v1_pb},
      [[{name, result},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, routing_address_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, gateway_resp_v1_pb},
      [[{name, height},
        {fnum, 1},
        {rnum, 2},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, msg},
        {rnum, 4},
        {fields,
         [[{name, is_active_resp},
           {fnum, 3},
           {rnum, 4},
           {type, {msg, gateway_sc_is_active_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, is_overpaid_resp},
           {fnum, 4},
           {rnum, 4},
           {type, {msg, gateway_sc_is_overpaid_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, close_resp},
           {fnum, 5},
           {rnum, 4},
           {type, {msg, gateway_sc_close_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, follow_streamed_resp},
           {fnum, 6},
           {rnum, 4},
           {type, {msg, gateway_sc_follow_streamed_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, routing_streamed_resp},
           {fnum, 7},
           {rnum, 4},
           {type, {msg, gateway_routing_streamed_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, config_resp},
           {fnum, 8},
           {rnum, 4},
           {type, {msg, gateway_config_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, config_update_streamed_resp},
           {fnum, 9},
           {rnum, 4},
           {type,
            {msg, gateway_config_update_streamed_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, validators_resp},
           {fnum, 12},
           {rnum, 4},
           {type, {msg, gateway_validators_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, success_resp},
           {fnum, 13},
           {rnum, 4},
           {type, {msg, gateway_success_resp_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, error_resp},
           {fnum, 14},
           {rnum, 4},
           {type, {msg, gateway_error_resp_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, poc_challenge_resp},
           {fnum, 15},
           {rnum, 4},
           {type,
            {msg, gateway_poc_challenge_notification_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, poc_check_target_resp},
           {fnum, 16},
           {rnum, 4},
           {type,
            {msg, gateway_poc_check_challenge_target_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, public_route},
           {fnum, 17},
           {rnum, 4},
           {type, {msg, gateway_public_routing_data_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, poc_region_params_resp},
           {fnum, 18},
           {rnum, 4},
           {type, {msg, gateway_poc_region_params_resp_v1_pb}},
           {occurrence, optional},
           {opts, []}]]}],
       [{name, block_time},
        {fnum, 10},
        {rnum, 5},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, block_age},
        {fnum, 11},
        {rnum, 6},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_is_active_req_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_is_active_resp_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, active},
        {fnum, 3},
        {rnum, 4},
        {type, bool},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_expiry_at_block},
        {fnum, 4},
        {rnum, 5},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_original_dc_amount},
        {fnum, 5},
        {rnum, 6},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_is_overpaid_req_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, total_dcs},
        {fnum, 3},
        {rnum, 4},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_is_overpaid_resp_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, overpaid},
        {fnum, 3},
        {rnum, 4},
        {type, bool},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_close_req_v1_pb},
      [[{name, close_txn},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_txn_state_channel_close_v1_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_close_resp_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, response},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_follow_req_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_sc_follow_streamed_resp_v1_pb},
      [[{name, sc_id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, close_state},
        {fnum, 3},
        {rnum, 4},
        {type, {enum, 'helium.close_state'}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, routing_pb},
      [[{name, oui},
        {fnum, 1},
        {rnum, 2},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, addresses},
        {fnum, 3},
        {rnum, 4},
        {type, {msg, routing_address_pb}},
        {occurrence, repeated},
        {opts, []}],
       [{name, filters},
        {fnum, 4},
        {rnum, 5},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}],
       [{name, subnets},
        {fnum, 5},
        {rnum, 6},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, routing_address_pb},
      [[{name, pub_key},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, uri},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_routing_req_v1_pb},
      [[{name, height},
        {fnum, 1},
        {rnum, 2},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_routing_streamed_resp_v1_pb},
      [[{name, routings},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, routing_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, gateway_poc_req_v1_pb},
      [[{name, address},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_challenge_notification_resp_v1_pb},
      [[{name, challenger},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, routing_address_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, block_hash},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, onion_key_hash},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_check_challenge_target_req_v1_pb},
      [[{name, address},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, challenger},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, block_hash},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, onion_key_hash},
        {fnum, 4},
        {rnum, 5},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, height},
        {fnum, 5},
        {rnum, 6},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, notifier},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, notifier_sig},
        {fnum, 7},
        {rnum, 8},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, challengee_sig},
        {fnum, 8},
        {rnum, 9},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_region_params_req_v1_pb},
      [[{name, address},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_region_params_resp_v1_pb},
      [[{name, address},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, region},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, params},
        {fnum, 3},
        {rnum, 4},
        {type, {msg, blockchain_region_params_v1_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_check_challenge_target_resp_v1_pb},
      [[{name, target},
        {fnum, 1},
        {rnum, 2},
        {type, bool},
        {occurrence, optional},
        {opts, []}],
       [{name, onion},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_report_req_v1_pb},
      [[{name, onion_key_hash},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, msg},
        {rnum, 3},
        {fields,
         [[{name, receipt},
           {fnum, 2},
           {rnum, 3},
           {type, {msg, blockchain_poc_receipt_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, witness},
           {fnum, 3},
           {rnum, 3},
           {type, {msg, blockchain_poc_witness_v1_pb}},
           {occurrence, optional},
           {opts, []}]]}]]},
     {{msg, gateway_address_routing_data_req_v1_pb},
      [[{name, address},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_poc_key_routing_data_req_v1_pb},
      [[{name, key},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, gateway_public_routing_data_resp_v1_pb},
      [[{name, address},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, public_uri},
        {fnum, 2},
        {rnum, 3},
        {type, {msg, routing_address_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_summary_v1_pb},
      [[{name, client_pubkeybin},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, num_packets},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, num_dcs},
        {fnum, 3},
        {rnum, 4},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_v1_pb},
      [[{name, id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, owner},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, credits},
        {fnum, 3},
        {rnum, 4},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, nonce},
        {fnum, 4},
        {rnum, 5},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, summaries},
        {fnum, 5},
        {rnum, 6},
        {type, {msg, blockchain_state_channel_summary_v1_pb}},
        {occurrence, repeated},
        {opts, []}],
       [{name, root_hash},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, skewed},
        {fnum, 7},
        {rnum, 8},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, state},
        {fnum, 8},
        {rnum, 9},
        {type,
         {enum, 'helium.blockchain_state_channel_state_v1'}},
        {occurrence, optional},
        {opts, []}],
       [{name, expire_at_block},
        {fnum, 9},
        {rnum, 10},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 10},
        {rnum, 11},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_response_v1_pb},
      [[{name, accepted},
        {fnum, 1},
        {rnum, 2},
        {type, bool},
        {occurrence, optional},
        {opts, []}],
       [{name, downlink},
        {fnum, 4},
        {rnum, 3},
        {type, {msg, packet_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_packet_v1_pb},
      [[{name, packet},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, packet_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, hotspot},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, region},
        {fnum, 4},
        {rnum, 5},
        {type, {enum, 'helium.Region'}},
        {occurrence, optional},
        {opts, []}],
       [{name, hold_time},
        {fnum, 5},
        {rnum, 6},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_offer_v1_pb},
      [[{name, routing},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, routing_information_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, packet_hash},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, payload_size},
        {fnum, 3},
        {rnum, 4},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, fcnt},
        {fnum, 4},
        {rnum, 5},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, hotspot},
        {fnum, 5},
        {rnum, 6},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, region},
        {fnum, 7},
        {rnum, 8},
        {type, {enum, 'helium.Region'}},
        {occurrence, optional},
        {opts, []}],
       [{name, req_diff},
        {fnum, 8},
        {rnum, 9},
        {type, bool},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_purchase_v1_pb},
      [[{name, sc},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_state_channel_v1_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, hotspot},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, packet_hash},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, region},
        {fnum, 4},
        {rnum, 5},
        {type, {enum, 'helium.Region'}},
        {occurrence, optional},
        {opts, []}],
       [{name, sc_diff},
        {fnum, 5},
        {rnum, 6},
        {type, {msg, blockchain_state_channel_diff_v1_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_diff_v1_pb},
      [[{name, id},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, add_nonce},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, diffs},
        {fnum, 4},
        {rnum, 5},
        {type,
         {msg, blockchain_state_channel_diff_entry_v1_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, blockchain_state_channel_diff_entry_v1_pb},
      [[{name, entry},
        {rnum, 2},
        {fields,
         [[{name, append},
           {fnum, 1},
           {rnum, 2},
           {type,
            {msg,
             blockchain_state_channel_diff_append_summary_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, add},
           {fnum, 2},
           {rnum, 2},
           {type,
            {msg,
             blockchain_state_channel_diff_update_summary_v1_pb}},
           {occurrence, optional},
           {opts, []}]]}]]},
     {{msg,
       blockchain_state_channel_diff_append_summary_v1_pb},
      [[{name, client_pubkeybin},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, num_packets},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, num_dcs},
        {fnum, 3},
        {rnum, 4},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg,
       blockchain_state_channel_diff_update_summary_v1_pb},
      [[{name, client_index},
        {fnum, 1},
        {rnum, 2},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, add_packets},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, add_dcs},
        {fnum, 3},
        {rnum, 4},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_banner_v1_pb},
      [[{name, sc},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_state_channel_v1_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_rejection_v1_pb},
      [[{name, reject},
        {fnum, 1},
        {rnum, 2},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, packet_hash},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_state_channel_message_v1_pb},
      [[{name, msg},
        {rnum, 2},
        {fields,
         [[{name, response},
           {fnum, 2},
           {rnum, 2},
           {type, {msg, blockchain_state_channel_response_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, packet},
           {fnum, 4},
           {rnum, 2},
           {type, {msg, blockchain_state_channel_packet_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, offer},
           {fnum, 5},
           {rnum, 2},
           {type, {msg, blockchain_state_channel_offer_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, purchase},
           {fnum, 6},
           {rnum, 2},
           {type, {msg, blockchain_state_channel_purchase_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, banner},
           {fnum, 7},
           {rnum, 2},
           {type, {msg, blockchain_state_channel_banner_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, reject},
           {fnum, 8},
           {rnum, 2},
           {type, {msg, blockchain_state_channel_rejection_v1_pb}},
           {occurrence, optional},
           {opts, []}]]}]]},
     {{msg, eui_pb},
      [[{name, deveui},
        {fnum, 1},
        {rnum, 2},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, appeui},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, routing_information_pb},
      [[{name, data},
        {rnum, 2},
        {fields,
         [[{name, devaddr},
           {fnum, 1},
           {rnum, 2},
           {type, uint32},
           {occurrence, optional},
           {opts, []}],
          [{name, eui},
           {fnum, 2},
           {rnum, 2},
           {type, {msg, eui_pb}},
           {occurrence, optional},
           {opts, []}]]}]]},
     {{msg, window_pb},
      [[{name, timestamp},
        {fnum, 1},
        {rnum, 2},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, frequency},
        {fnum, 2},
        {rnum, 3},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, datarate},
        {fnum, 3},
        {rnum, 4},
        {type, string},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, packet_pb},
      [[{name, oui},
        {fnum, 1},
        {rnum, 2},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, type},
        {fnum, 2},
        {rnum, 3},
        {type, {enum, 'packet_pb.packet_type'}},
        {occurrence, optional},
        {opts, []}],
       [{name, payload},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, timestamp},
        {fnum, 4},
        {rnum, 5},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signal_strength},
        {fnum, 5},
        {rnum, 6},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, frequency},
        {fnum, 6},
        {rnum, 7},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, datarate},
        {fnum, 7},
        {rnum, 8},
        {type, string},
        {occurrence, optional},
        {opts, []}],
       [{name, snr},
        {fnum, 8},
        {rnum, 9},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, routing},
        {fnum, 9},
        {rnum, 10},
        {type, {msg, routing_information_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, rx2_window},
        {fnum, 10},
        {rnum, 11},
        {type, {msg, window_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_txn_state_channel_close_v1_pb},
      [[{name, state_channel},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_state_channel_v1_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, closer},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, fee},
        {fnum, 4},
        {rnum, 5},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, conflicts_with},
        {fnum, 5},
        {rnum, 6},
        {type, {msg, blockchain_state_channel_v1_pb}},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_var_v1_pb},
      [[{name, name},
        {fnum, 1},
        {rnum, 2},
        {type, string},
        {occurrence, optional},
        {opts, []}],
       [{name, type},
        {fnum, 2},
        {rnum, 3},
        {type, string},
        {occurrence, optional},
        {opts, []}],
       [{name, value},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_txn_vars_v1_pb},
      [[{name, vars},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_var_v1_pb}},
        {occurrence, repeated},
        {opts, []}],
       [{name, version_predicate},
        {fnum, 2},
        {rnum, 3},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, proof},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, master_key},
        {fnum, 4},
        {rnum, 5},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, key_proof},
        {fnum, 5},
        {rnum, 6},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, cancels},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}],
       [{name, unsets},
        {fnum, 7},
        {rnum, 8},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}],
       [{name, nonce},
        {fnum, 8},
        {rnum, 9},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, multi_keys},
        {fnum, 9},
        {rnum, 10},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}],
       [{name, multi_proofs},
        {fnum, 10},
        {rnum, 11},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}],
       [{name, multi_key_proofs},
        {fnum, 11},
        {rnum, 12},
        {type, bytes},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, blockchain_txn_poc_receipts_v1_pb},
      [[{name, challenger},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, secret},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, onion_key_hash},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, path},
        {fnum, 4},
        {rnum, 5},
        {type, {msg, blockchain_poc_path_element_v1_pb}},
        {occurrence, repeated},
        {opts, []}],
       [{name, fee},
        {fnum, 5},
        {rnum, 6},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, request_block_hash},
        {fnum, 7},
        {rnum, 8},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_poc_receipt_v1_pb},
      [[{name, gateway},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, timestamp},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signal},
        {fnum, 3},
        {rnum, 4},
        {type, sint32},
        {occurrence, optional},
        {opts, []}],
       [{name, data},
        {fnum, 4},
        {rnum, 5},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, origin},
        {fnum, 5},
        {rnum, 6},
        {type, {enum, 'helium.origin'}},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, snr},
        {fnum, 7},
        {rnum, 8},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, frequency},
        {fnum, 8},
        {rnum, 9},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, channel},
        {fnum, 9},
        {rnum, 10},
        {type, int32},
        {occurrence, optional},
        {opts, []}],
       [{name, datarate},
        {fnum, 10},
        {rnum, 11},
        {type, string},
        {occurrence, optional},
        {opts, []}],
       [{name, addr_hash},
        {fnum, 11},
        {rnum, 12},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, tx_power},
        {fnum, 12},
        {rnum, 13},
        {type, int32},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_poc_witness_v1_pb},
      [[{name, gateway},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, timestamp},
        {fnum, 2},
        {rnum, 3},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signal},
        {fnum, 3},
        {rnum, 4},
        {type, sint32},
        {occurrence, optional},
        {opts, []}],
       [{name, packet_hash},
        {fnum, 4},
        {rnum, 5},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 5},
        {rnum, 6},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, snr},
        {fnum, 6},
        {rnum, 7},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, frequency},
        {fnum, 7},
        {rnum, 8},
        {type, float},
        {occurrence, optional},
        {opts, []}],
       [{name, channel},
        {fnum, 8},
        {rnum, 9},
        {type, int32},
        {occurrence, optional},
        {opts, []}],
       [{name, datarate},
        {fnum, 9},
        {rnum, 10},
        {type, string},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_poc_response_v1_pb},
      [[{name, payload},
        {rnum, 2},
        {fields,
         [[{name, receipt},
           {fnum, 1},
           {rnum, 2},
           {type, {msg, blockchain_poc_receipt_v1_pb}},
           {occurrence, optional},
           {opts, []}],
          [{name, witness},
           {fnum, 2},
           {rnum, 2},
           {type, {msg, blockchain_poc_witness_v1_pb}},
           {occurrence, optional},
           {opts, []}]]}]]},
     {{msg, blockchain_poc_path_element_v1_pb},
      [[{name, challengee},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, receipt},
        {fnum, 2},
        {rnum, 3},
        {type, {msg, blockchain_poc_receipt_v1_pb}},
        {occurrence, optional},
        {opts, []}],
       [{name, witnesses},
        {fnum, 3},
        {rnum, 4},
        {type, {msg, blockchain_poc_witness_v1_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, blockchain_txn_poc_receipts_v2_pb},
      [[{name, challenger},
        {fnum, 1},
        {rnum, 2},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, secret},
        {fnum, 2},
        {rnum, 3},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, onion_key_hash},
        {fnum, 3},
        {rnum, 4},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, path},
        {fnum, 4},
        {rnum, 5},
        {type, {msg, blockchain_poc_path_element_v1_pb}},
        {occurrence, repeated},
        {opts, []}],
       [{name, fee},
        {fnum, 5},
        {rnum, 6},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, signature},
        {fnum, 6},
        {rnum, 7},
        {type, bytes},
        {occurrence, optional},
        {opts, []}],
       [{name, block_hash},
        {fnum, 7},
        {rnum, 8},
        {type, bytes},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_region_params_v1_pb},
      [[{name, region_params},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, blockchain_region_param_v1_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, tagged_spreading_pb},
      [[{name, region_spreading},
        {fnum, 1},
        {rnum, 2},
        {type, {enum, 'helium.RegionSpreading'}},
        {occurrence, optional},
        {opts, []}],
       [{name, max_packet_size},
        {fnum, 2},
        {rnum, 3},
        {type, uint32},
        {occurrence, optional},
        {opts, []}]]},
     {{msg, blockchain_region_spreading_v1_pb},
      [[{name, tagged_spreading},
        {fnum, 1},
        {rnum, 2},
        {type, {msg, tagged_spreading_pb}},
        {occurrence, repeated},
        {opts, []}]]},
     {{msg, blockchain_region_param_v1_pb},
      [[{name, channel_frequency},
        {fnum, 1},
        {rnum, 2},
        {type, uint64},
        {occurrence, optional},
        {opts, []}],
       [{name, bandwidth},
        {fnum, 2},
        {rnum, 3},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, max_eirp},
        {fnum, 3},
        {rnum, 4},
        {type, uint32},
        {occurrence, optional},
        {opts, []}],
       [{name, spreading},
        {fnum, 4},
        {rnum, 5},
        {type, {msg, blockchain_region_spreading_v1_pb}},
        {occurrence, optional},
        {opts, []}]]}].


get_msg_names() ->
    [empty_pb,
     gateway_success_resp_pb,
     gateway_error_resp_pb,
     gateway_config_req_v1_pb,
     gateway_config_resp_v1_pb,
     gateway_config_update_req_v1_pb,
     gateway_config_update_streamed_resp_v1_pb,
     gateway_validators_req_v1_pb,
     gateway_validators_resp_v1_pb,
     gateway_resp_v1_pb,
     gateway_sc_is_active_req_v1_pb,
     gateway_sc_is_active_resp_v1_pb,
     gateway_sc_is_overpaid_req_v1_pb,
     gateway_sc_is_overpaid_resp_v1_pb,
     gateway_sc_close_req_v1_pb,
     gateway_sc_close_resp_v1_pb,
     gateway_sc_follow_req_v1_pb,
     gateway_sc_follow_streamed_resp_v1_pb,
     routing_pb,
     routing_address_pb,
     gateway_routing_req_v1_pb,
     gateway_routing_streamed_resp_v1_pb,
     gateway_poc_req_v1_pb,
     gateway_poc_challenge_notification_resp_v1_pb,
     gateway_poc_check_challenge_target_req_v1_pb,
     gateway_poc_region_params_req_v1_pb,
     gateway_poc_region_params_resp_v1_pb,
     gateway_poc_check_challenge_target_resp_v1_pb,
     gateway_poc_report_req_v1_pb,
     gateway_address_routing_data_req_v1_pb,
     gateway_poc_key_routing_data_req_v1_pb,
     gateway_public_routing_data_resp_v1_pb,
     blockchain_state_channel_summary_v1_pb,
     blockchain_state_channel_v1_pb,
     blockchain_state_channel_response_v1_pb,
     blockchain_state_channel_packet_v1_pb,
     blockchain_state_channel_offer_v1_pb,
     blockchain_state_channel_purchase_v1_pb,
     blockchain_state_channel_diff_v1_pb,
     blockchain_state_channel_diff_entry_v1_pb,
     blockchain_state_channel_diff_append_summary_v1_pb,
     blockchain_state_channel_diff_update_summary_v1_pb,
     blockchain_state_channel_banner_v1_pb,
     blockchain_state_channel_rejection_v1_pb,
     blockchain_state_channel_message_v1_pb,
     eui_pb,
     routing_information_pb,
     window_pb,
     packet_pb,
     blockchain_txn_state_channel_close_v1_pb,
     blockchain_var_v1_pb,
     blockchain_txn_vars_v1_pb,
     blockchain_txn_poc_receipts_v1_pb,
     blockchain_poc_receipt_v1_pb,
     blockchain_poc_witness_v1_pb,
     blockchain_poc_response_v1_pb,
     blockchain_poc_path_element_v1_pb,
     blockchain_txn_poc_receipts_v2_pb,
     blockchain_region_params_v1_pb,
     tagged_spreading_pb,
     blockchain_region_spreading_v1_pb,
     blockchain_region_param_v1_pb].


get_group_names() -> [].


get_msg_or_group_names() ->
    [empty_pb,
     gateway_success_resp_pb,
     gateway_error_resp_pb,
     gateway_config_req_v1_pb,
     gateway_config_resp_v1_pb,
     gateway_config_update_req_v1_pb,
     gateway_config_update_streamed_resp_v1_pb,
     gateway_validators_req_v1_pb,
     gateway_validators_resp_v1_pb,
     gateway_resp_v1_pb,
     gateway_sc_is_active_req_v1_pb,
     gateway_sc_is_active_resp_v1_pb,
     gateway_sc_is_overpaid_req_v1_pb,
     gateway_sc_is_overpaid_resp_v1_pb,
     gateway_sc_close_req_v1_pb,
     gateway_sc_close_resp_v1_pb,
     gateway_sc_follow_req_v1_pb,
     gateway_sc_follow_streamed_resp_v1_pb,
     routing_pb,
     routing_address_pb,
     gateway_routing_req_v1_pb,
     gateway_routing_streamed_resp_v1_pb,
     gateway_poc_req_v1_pb,
     gateway_poc_challenge_notification_resp_v1_pb,
     gateway_poc_check_challenge_target_req_v1_pb,
     gateway_poc_region_params_req_v1_pb,
     gateway_poc_region_params_resp_v1_pb,
     gateway_poc_check_challenge_target_resp_v1_pb,
     gateway_poc_report_req_v1_pb,
     gateway_address_routing_data_req_v1_pb,
     gateway_poc_key_routing_data_req_v1_pb,
     gateway_public_routing_data_resp_v1_pb,
     blockchain_state_channel_summary_v1_pb,
     blockchain_state_channel_v1_pb,
     blockchain_state_channel_response_v1_pb,
     blockchain_state_channel_packet_v1_pb,
     blockchain_state_channel_offer_v1_pb,
     blockchain_state_channel_purchase_v1_pb,
     blockchain_state_channel_diff_v1_pb,
     blockchain_state_channel_diff_entry_v1_pb,
     blockchain_state_channel_diff_append_summary_v1_pb,
     blockchain_state_channel_diff_update_summary_v1_pb,
     blockchain_state_channel_banner_v1_pb,
     blockchain_state_channel_rejection_v1_pb,
     blockchain_state_channel_message_v1_pb,
     eui_pb,
     routing_information_pb,
     window_pb,
     packet_pb,
     blockchain_txn_state_channel_close_v1_pb,
     blockchain_var_v1_pb,
     blockchain_txn_vars_v1_pb,
     blockchain_txn_poc_receipts_v1_pb,
     blockchain_poc_receipt_v1_pb,
     blockchain_poc_witness_v1_pb,
     blockchain_poc_response_v1_pb,
     blockchain_poc_path_element_v1_pb,
     blockchain_txn_poc_receipts_v2_pb,
     blockchain_region_params_v1_pb,
     tagged_spreading_pb,
     blockchain_region_spreading_v1_pb,
     blockchain_region_param_v1_pb].


get_enum_names() ->
    ['helium.close_state',
     'helium.Region',
     'helium.blockchain_state_channel_state_v1',
     'packet_pb.packet_type',
     'helium.origin',
     'helium.RegionSpreading'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(empty_pb) -> [];
find_msg_def(gateway_success_resp_pb) ->
    [[{name, resp},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, details},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_error_resp_pb) ->
    [[{name, error},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, details},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_config_req_v1_pb) ->
    [[{name, keys},
      {fnum, 1},
      {rnum, 2},
      {type, string},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(gateway_config_resp_v1_pb) ->
    [[{name, result},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_var_v1_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(gateway_config_update_req_v1_pb) -> [];
find_msg_def(gateway_config_update_streamed_resp_v1_pb) ->
    [[{name, keys},
      {fnum, 1},
      {rnum, 2},
      {type, string},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(gateway_validators_req_v1_pb) ->
    [[{name, quantity},
      {fnum, 1},
      {rnum, 2},
      {type, uint32},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_validators_resp_v1_pb) ->
    [[{name, result},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, routing_address_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(gateway_resp_v1_pb) ->
    [[{name, height},
      {fnum, 1},
      {rnum, 2},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, msg},
      {rnum, 4},
      {fields,
       [[{name, is_active_resp},
         {fnum, 3},
         {rnum, 4},
         {type, {msg, gateway_sc_is_active_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, is_overpaid_resp},
         {fnum, 4},
         {rnum, 4},
         {type, {msg, gateway_sc_is_overpaid_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, close_resp},
         {fnum, 5},
         {rnum, 4},
         {type, {msg, gateway_sc_close_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, follow_streamed_resp},
         {fnum, 6},
         {rnum, 4},
         {type, {msg, gateway_sc_follow_streamed_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, routing_streamed_resp},
         {fnum, 7},
         {rnum, 4},
         {type, {msg, gateway_routing_streamed_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, config_resp},
         {fnum, 8},
         {rnum, 4},
         {type, {msg, gateway_config_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, config_update_streamed_resp},
         {fnum, 9},
         {rnum, 4},
         {type,
          {msg, gateway_config_update_streamed_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, validators_resp},
         {fnum, 12},
         {rnum, 4},
         {type, {msg, gateway_validators_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, success_resp},
         {fnum, 13},
         {rnum, 4},
         {type, {msg, gateway_success_resp_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, error_resp},
         {fnum, 14},
         {rnum, 4},
         {type, {msg, gateway_error_resp_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, poc_challenge_resp},
         {fnum, 15},
         {rnum, 4},
         {type,
          {msg, gateway_poc_challenge_notification_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, poc_check_target_resp},
         {fnum, 16},
         {rnum, 4},
         {type,
          {msg, gateway_poc_check_challenge_target_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, public_route},
         {fnum, 17},
         {rnum, 4},
         {type, {msg, gateway_public_routing_data_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, poc_region_params_resp},
         {fnum, 18},
         {rnum, 4},
         {type, {msg, gateway_poc_region_params_resp_v1_pb}},
         {occurrence, optional},
         {opts, []}]]}],
     [{name, block_time},
      {fnum, 10},
      {rnum, 5},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, block_age},
      {fnum, 11},
      {rnum, 6},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_is_active_req_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_is_active_resp_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, active},
      {fnum, 3},
      {rnum, 4},
      {type, bool},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_expiry_at_block},
      {fnum, 4},
      {rnum, 5},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_original_dc_amount},
      {fnum, 5},
      {rnum, 6},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_is_overpaid_req_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, total_dcs},
      {fnum, 3},
      {rnum, 4},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_is_overpaid_resp_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, overpaid},
      {fnum, 3},
      {rnum, 4},
      {type, bool},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_close_req_v1_pb) ->
    [[{name, close_txn},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_txn_state_channel_close_v1_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_close_resp_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, response},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_follow_req_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_sc_follow_streamed_resp_v1_pb) ->
    [[{name, sc_id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, close_state},
      {fnum, 3},
      {rnum, 4},
      {type, {enum, 'helium.close_state'}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(routing_pb) ->
    [[{name, oui},
      {fnum, 1},
      {rnum, 2},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, addresses},
      {fnum, 3},
      {rnum, 4},
      {type, {msg, routing_address_pb}},
      {occurrence, repeated},
      {opts, []}],
     [{name, filters},
      {fnum, 4},
      {rnum, 5},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}],
     [{name, subnets},
      {fnum, 5},
      {rnum, 6},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(routing_address_pb) ->
    [[{name, pub_key},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, uri},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_routing_req_v1_pb) ->
    [[{name, height},
      {fnum, 1},
      {rnum, 2},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_routing_streamed_resp_v1_pb) ->
    [[{name, routings},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, routing_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(gateway_poc_req_v1_pb) ->
    [[{name, address},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_challenge_notification_resp_v1_pb) ->
    [[{name, challenger},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, routing_address_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, block_hash},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, onion_key_hash},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_check_challenge_target_req_v1_pb) ->
    [[{name, address},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, challenger},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, block_hash},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, onion_key_hash},
      {fnum, 4},
      {rnum, 5},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, height},
      {fnum, 5},
      {rnum, 6},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, notifier},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, notifier_sig},
      {fnum, 7},
      {rnum, 8},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, challengee_sig},
      {fnum, 8},
      {rnum, 9},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_region_params_req_v1_pb) ->
    [[{name, address},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_region_params_resp_v1_pb) ->
    [[{name, address},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, region},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, params},
      {fnum, 3},
      {rnum, 4},
      {type, {msg, blockchain_region_params_v1_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_check_challenge_target_resp_v1_pb) ->
    [[{name, target},
      {fnum, 1},
      {rnum, 2},
      {type, bool},
      {occurrence, optional},
      {opts, []}],
     [{name, onion},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_report_req_v1_pb) ->
    [[{name, onion_key_hash},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, msg},
      {rnum, 3},
      {fields,
       [[{name, receipt},
         {fnum, 2},
         {rnum, 3},
         {type, {msg, blockchain_poc_receipt_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, witness},
         {fnum, 3},
         {rnum, 3},
         {type, {msg, blockchain_poc_witness_v1_pb}},
         {occurrence, optional},
         {opts, []}]]}]];
find_msg_def(gateway_address_routing_data_req_v1_pb) ->
    [[{name, address},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_poc_key_routing_data_req_v1_pb) ->
    [[{name, key},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(gateway_public_routing_data_resp_v1_pb) ->
    [[{name, address},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, public_uri},
      {fnum, 2},
      {rnum, 3},
      {type, {msg, routing_address_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_summary_v1_pb) ->
    [[{name, client_pubkeybin},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, num_packets},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, num_dcs},
      {fnum, 3},
      {rnum, 4},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_v1_pb) ->
    [[{name, id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, owner},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, credits},
      {fnum, 3},
      {rnum, 4},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, nonce},
      {fnum, 4},
      {rnum, 5},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, summaries},
      {fnum, 5},
      {rnum, 6},
      {type, {msg, blockchain_state_channel_summary_v1_pb}},
      {occurrence, repeated},
      {opts, []}],
     [{name, root_hash},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, skewed},
      {fnum, 7},
      {rnum, 8},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, state},
      {fnum, 8},
      {rnum, 9},
      {type,
       {enum, 'helium.blockchain_state_channel_state_v1'}},
      {occurrence, optional},
      {opts, []}],
     [{name, expire_at_block},
      {fnum, 9},
      {rnum, 10},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 10},
      {rnum, 11},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_response_v1_pb) ->
    [[{name, accepted},
      {fnum, 1},
      {rnum, 2},
      {type, bool},
      {occurrence, optional},
      {opts, []}],
     [{name, downlink},
      {fnum, 4},
      {rnum, 3},
      {type, {msg, packet_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_packet_v1_pb) ->
    [[{name, packet},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, packet_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, hotspot},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, region},
      {fnum, 4},
      {rnum, 5},
      {type, {enum, 'helium.Region'}},
      {occurrence, optional},
      {opts, []}],
     [{name, hold_time},
      {fnum, 5},
      {rnum, 6},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_offer_v1_pb) ->
    [[{name, routing},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, routing_information_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, packet_hash},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, payload_size},
      {fnum, 3},
      {rnum, 4},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, fcnt},
      {fnum, 4},
      {rnum, 5},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, hotspot},
      {fnum, 5},
      {rnum, 6},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, region},
      {fnum, 7},
      {rnum, 8},
      {type, {enum, 'helium.Region'}},
      {occurrence, optional},
      {opts, []}],
     [{name, req_diff},
      {fnum, 8},
      {rnum, 9},
      {type, bool},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_purchase_v1_pb) ->
    [[{name, sc},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_state_channel_v1_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, hotspot},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, packet_hash},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, region},
      {fnum, 4},
      {rnum, 5},
      {type, {enum, 'helium.Region'}},
      {occurrence, optional},
      {opts, []}],
     [{name, sc_diff},
      {fnum, 5},
      {rnum, 6},
      {type, {msg, blockchain_state_channel_diff_v1_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_diff_v1_pb) ->
    [[{name, id},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, add_nonce},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, diffs},
      {fnum, 4},
      {rnum, 5},
      {type,
       {msg, blockchain_state_channel_diff_entry_v1_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(blockchain_state_channel_diff_entry_v1_pb) ->
    [[{name, entry},
      {rnum, 2},
      {fields,
       [[{name, append},
         {fnum, 1},
         {rnum, 2},
         {type,
          {msg,
           blockchain_state_channel_diff_append_summary_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, add},
         {fnum, 2},
         {rnum, 2},
         {type,
          {msg,
           blockchain_state_channel_diff_update_summary_v1_pb}},
         {occurrence, optional},
         {opts, []}]]}]];
find_msg_def(blockchain_state_channel_diff_append_summary_v1_pb) ->
    [[{name, client_pubkeybin},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, num_packets},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, num_dcs},
      {fnum, 3},
      {rnum, 4},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_diff_update_summary_v1_pb) ->
    [[{name, client_index},
      {fnum, 1},
      {rnum, 2},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, add_packets},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, add_dcs},
      {fnum, 3},
      {rnum, 4},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_banner_v1_pb) ->
    [[{name, sc},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_state_channel_v1_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_rejection_v1_pb) ->
    [[{name, reject},
      {fnum, 1},
      {rnum, 2},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, packet_hash},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_state_channel_message_v1_pb) ->
    [[{name, msg},
      {rnum, 2},
      {fields,
       [[{name, response},
         {fnum, 2},
         {rnum, 2},
         {type, {msg, blockchain_state_channel_response_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, packet},
         {fnum, 4},
         {rnum, 2},
         {type, {msg, blockchain_state_channel_packet_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, offer},
         {fnum, 5},
         {rnum, 2},
         {type, {msg, blockchain_state_channel_offer_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, purchase},
         {fnum, 6},
         {rnum, 2},
         {type, {msg, blockchain_state_channel_purchase_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, banner},
         {fnum, 7},
         {rnum, 2},
         {type, {msg, blockchain_state_channel_banner_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, reject},
         {fnum, 8},
         {rnum, 2},
         {type, {msg, blockchain_state_channel_rejection_v1_pb}},
         {occurrence, optional},
         {opts, []}]]}]];
find_msg_def(eui_pb) ->
    [[{name, deveui},
      {fnum, 1},
      {rnum, 2},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, appeui},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(routing_information_pb) ->
    [[{name, data},
      {rnum, 2},
      {fields,
       [[{name, devaddr},
         {fnum, 1},
         {rnum, 2},
         {type, uint32},
         {occurrence, optional},
         {opts, []}],
        [{name, eui},
         {fnum, 2},
         {rnum, 2},
         {type, {msg, eui_pb}},
         {occurrence, optional},
         {opts, []}]]}]];
find_msg_def(window_pb) ->
    [[{name, timestamp},
      {fnum, 1},
      {rnum, 2},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, frequency},
      {fnum, 2},
      {rnum, 3},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, datarate},
      {fnum, 3},
      {rnum, 4},
      {type, string},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(packet_pb) ->
    [[{name, oui},
      {fnum, 1},
      {rnum, 2},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, type},
      {fnum, 2},
      {rnum, 3},
      {type, {enum, 'packet_pb.packet_type'}},
      {occurrence, optional},
      {opts, []}],
     [{name, payload},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, timestamp},
      {fnum, 4},
      {rnum, 5},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signal_strength},
      {fnum, 5},
      {rnum, 6},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, frequency},
      {fnum, 6},
      {rnum, 7},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, datarate},
      {fnum, 7},
      {rnum, 8},
      {type, string},
      {occurrence, optional},
      {opts, []}],
     [{name, snr},
      {fnum, 8},
      {rnum, 9},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, routing},
      {fnum, 9},
      {rnum, 10},
      {type, {msg, routing_information_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, rx2_window},
      {fnum, 10},
      {rnum, 11},
      {type, {msg, window_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_txn_state_channel_close_v1_pb) ->
    [[{name, state_channel},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_state_channel_v1_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, closer},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, fee},
      {fnum, 4},
      {rnum, 5},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, conflicts_with},
      {fnum, 5},
      {rnum, 6},
      {type, {msg, blockchain_state_channel_v1_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_var_v1_pb) ->
    [[{name, name},
      {fnum, 1},
      {rnum, 2},
      {type, string},
      {occurrence, optional},
      {opts, []}],
     [{name, type},
      {fnum, 2},
      {rnum, 3},
      {type, string},
      {occurrence, optional},
      {opts, []}],
     [{name, value},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_txn_vars_v1_pb) ->
    [[{name, vars},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_var_v1_pb}},
      {occurrence, repeated},
      {opts, []}],
     [{name, version_predicate},
      {fnum, 2},
      {rnum, 3},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, proof},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, master_key},
      {fnum, 4},
      {rnum, 5},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, key_proof},
      {fnum, 5},
      {rnum, 6},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, cancels},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}],
     [{name, unsets},
      {fnum, 7},
      {rnum, 8},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}],
     [{name, nonce},
      {fnum, 8},
      {rnum, 9},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, multi_keys},
      {fnum, 9},
      {rnum, 10},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}],
     [{name, multi_proofs},
      {fnum, 10},
      {rnum, 11},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}],
     [{name, multi_key_proofs},
      {fnum, 11},
      {rnum, 12},
      {type, bytes},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(blockchain_txn_poc_receipts_v1_pb) ->
    [[{name, challenger},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, secret},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, onion_key_hash},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, path},
      {fnum, 4},
      {rnum, 5},
      {type, {msg, blockchain_poc_path_element_v1_pb}},
      {occurrence, repeated},
      {opts, []}],
     [{name, fee},
      {fnum, 5},
      {rnum, 6},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, request_block_hash},
      {fnum, 7},
      {rnum, 8},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_poc_receipt_v1_pb) ->
    [[{name, gateway},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, timestamp},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signal},
      {fnum, 3},
      {rnum, 4},
      {type, sint32},
      {occurrence, optional},
      {opts, []}],
     [{name, data},
      {fnum, 4},
      {rnum, 5},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, origin},
      {fnum, 5},
      {rnum, 6},
      {type, {enum, 'helium.origin'}},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, snr},
      {fnum, 7},
      {rnum, 8},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, frequency},
      {fnum, 8},
      {rnum, 9},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, channel},
      {fnum, 9},
      {rnum, 10},
      {type, int32},
      {occurrence, optional},
      {opts, []}],
     [{name, datarate},
      {fnum, 10},
      {rnum, 11},
      {type, string},
      {occurrence, optional},
      {opts, []}],
     [{name, addr_hash},
      {fnum, 11},
      {rnum, 12},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, tx_power},
      {fnum, 12},
      {rnum, 13},
      {type, int32},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_poc_witness_v1_pb) ->
    [[{name, gateway},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, timestamp},
      {fnum, 2},
      {rnum, 3},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signal},
      {fnum, 3},
      {rnum, 4},
      {type, sint32},
      {occurrence, optional},
      {opts, []}],
     [{name, packet_hash},
      {fnum, 4},
      {rnum, 5},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 5},
      {rnum, 6},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, snr},
      {fnum, 6},
      {rnum, 7},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, frequency},
      {fnum, 7},
      {rnum, 8},
      {type, float},
      {occurrence, optional},
      {opts, []}],
     [{name, channel},
      {fnum, 8},
      {rnum, 9},
      {type, int32},
      {occurrence, optional},
      {opts, []}],
     [{name, datarate},
      {fnum, 9},
      {rnum, 10},
      {type, string},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_poc_response_v1_pb) ->
    [[{name, payload},
      {rnum, 2},
      {fields,
       [[{name, receipt},
         {fnum, 1},
         {rnum, 2},
         {type, {msg, blockchain_poc_receipt_v1_pb}},
         {occurrence, optional},
         {opts, []}],
        [{name, witness},
         {fnum, 2},
         {rnum, 2},
         {type, {msg, blockchain_poc_witness_v1_pb}},
         {occurrence, optional},
         {opts, []}]]}]];
find_msg_def(blockchain_poc_path_element_v1_pb) ->
    [[{name, challengee},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, receipt},
      {fnum, 2},
      {rnum, 3},
      {type, {msg, blockchain_poc_receipt_v1_pb}},
      {occurrence, optional},
      {opts, []}],
     [{name, witnesses},
      {fnum, 3},
      {rnum, 4},
      {type, {msg, blockchain_poc_witness_v1_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(blockchain_txn_poc_receipts_v2_pb) ->
    [[{name, challenger},
      {fnum, 1},
      {rnum, 2},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, secret},
      {fnum, 2},
      {rnum, 3},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, onion_key_hash},
      {fnum, 3},
      {rnum, 4},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, path},
      {fnum, 4},
      {rnum, 5},
      {type, {msg, blockchain_poc_path_element_v1_pb}},
      {occurrence, repeated},
      {opts, []}],
     [{name, fee},
      {fnum, 5},
      {rnum, 6},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, signature},
      {fnum, 6},
      {rnum, 7},
      {type, bytes},
      {occurrence, optional},
      {opts, []}],
     [{name, block_hash},
      {fnum, 7},
      {rnum, 8},
      {type, bytes},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_region_params_v1_pb) ->
    [[{name, region_params},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, blockchain_region_param_v1_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(tagged_spreading_pb) ->
    [[{name, region_spreading},
      {fnum, 1},
      {rnum, 2},
      {type, {enum, 'helium.RegionSpreading'}},
      {occurrence, optional},
      {opts, []}],
     [{name, max_packet_size},
      {fnum, 2},
      {rnum, 3},
      {type, uint32},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(blockchain_region_spreading_v1_pb) ->
    [[{name, tagged_spreading},
      {fnum, 1},
      {rnum, 2},
      {type, {msg, tagged_spreading_pb}},
      {occurrence, repeated},
      {opts, []}]];
find_msg_def(blockchain_region_param_v1_pb) ->
    [[{name, channel_frequency},
      {fnum, 1},
      {rnum, 2},
      {type, uint64},
      {occurrence, optional},
      {opts, []}],
     [{name, bandwidth},
      {fnum, 2},
      {rnum, 3},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, max_eirp},
      {fnum, 3},
      {rnum, 4},
      {type, uint32},
      {occurrence, optional},
      {opts, []}],
     [{name, spreading},
      {fnum, 4},
      {rnum, 5},
      {type, {msg, blockchain_region_spreading_v1_pb}},
      {occurrence, optional},
      {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('helium.close_state') ->
    [{close_state_closable, 0},
     {close_state_closing, 1},
     {close_state_closed, 2},
     {close_state_dispute, 3}];
find_enum_def('helium.Region') ->
    [{'US915', 0},
     {'EU868', 1},
     {'EU433', 2},
     {'CN470', 3},
     {'CN779', 4},
     {'AU915', 5},
     {'AS923_1', 6},
     {'KR920', 7},
     {'IN865', 8},
     {'AS923_2', 9},
     {'AS923_3', 10},
     {'AS923_4', 11}];
find_enum_def('helium.blockchain_state_channel_state_v1') ->
    [{open, 0}, {closed, 1}];
find_enum_def('packet_pb.packet_type') ->
    [{longfi, 0}, {lorawan, 1}];
find_enum_def('helium.origin') ->
    [{p2p, 0}, {radio, 1}];
find_enum_def('helium.RegionSpreading') ->
    [{'SF_INVALID', 0},
     {'SF7', 1},
     {'SF8', 2},
     {'SF9', 3},
     {'SF10', 4},
     {'SF11', 5},
     {'SF12', 6}];
find_enum_def(_) -> error.


enum_symbol_by_value('helium.close_state', Value) ->
    'enum_symbol_by_value_helium.close_state'(Value);
enum_symbol_by_value('helium.Region', Value) ->
    'enum_symbol_by_value_helium.Region'(Value);
enum_symbol_by_value('helium.blockchain_state_channel_state_v1',
                     Value) ->
    'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(Value);
enum_symbol_by_value('packet_pb.packet_type', Value) ->
    'enum_symbol_by_value_packet_pb.packet_type'(Value);
enum_symbol_by_value('helium.origin', Value) ->
    'enum_symbol_by_value_helium.origin'(Value);
enum_symbol_by_value('helium.RegionSpreading', Value) ->
    'enum_symbol_by_value_helium.RegionSpreading'(Value).


enum_value_by_symbol('helium.close_state', Sym) ->
    'enum_value_by_symbol_helium.close_state'(Sym);
enum_value_by_symbol('helium.Region', Sym) ->
    'enum_value_by_symbol_helium.Region'(Sym);
enum_value_by_symbol('helium.blockchain_state_channel_state_v1',
                     Sym) ->
    'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(Sym);
enum_value_by_symbol('packet_pb.packet_type', Sym) ->
    'enum_value_by_symbol_packet_pb.packet_type'(Sym);
enum_value_by_symbol('helium.origin', Sym) ->
    'enum_value_by_symbol_helium.origin'(Sym);
enum_value_by_symbol('helium.RegionSpreading', Sym) ->
    'enum_value_by_symbol_helium.RegionSpreading'(Sym).


'enum_symbol_by_value_helium.close_state'(0) ->
    close_state_closable;
'enum_symbol_by_value_helium.close_state'(1) ->
    close_state_closing;
'enum_symbol_by_value_helium.close_state'(2) ->
    close_state_closed;
'enum_symbol_by_value_helium.close_state'(3) ->
    close_state_dispute.


'enum_value_by_symbol_helium.close_state'(close_state_closable) ->
    0;
'enum_value_by_symbol_helium.close_state'(close_state_closing) ->
    1;
'enum_value_by_symbol_helium.close_state'(close_state_closed) ->
    2;
'enum_value_by_symbol_helium.close_state'(close_state_dispute) ->
    3.

'enum_symbol_by_value_helium.Region'(0) -> 'US915';
'enum_symbol_by_value_helium.Region'(1) -> 'EU868';
'enum_symbol_by_value_helium.Region'(2) -> 'EU433';
'enum_symbol_by_value_helium.Region'(3) -> 'CN470';
'enum_symbol_by_value_helium.Region'(4) -> 'CN779';
'enum_symbol_by_value_helium.Region'(5) -> 'AU915';
'enum_symbol_by_value_helium.Region'(6) -> 'AS923_1';
'enum_symbol_by_value_helium.Region'(7) -> 'KR920';
'enum_symbol_by_value_helium.Region'(8) -> 'IN865';
'enum_symbol_by_value_helium.Region'(9) -> 'AS923_2';
'enum_symbol_by_value_helium.Region'(10) -> 'AS923_3';
'enum_symbol_by_value_helium.Region'(11) -> 'AS923_4'.


'enum_value_by_symbol_helium.Region'('US915') -> 0;
'enum_value_by_symbol_helium.Region'('EU868') -> 1;
'enum_value_by_symbol_helium.Region'('EU433') -> 2;
'enum_value_by_symbol_helium.Region'('CN470') -> 3;
'enum_value_by_symbol_helium.Region'('CN779') -> 4;
'enum_value_by_symbol_helium.Region'('AU915') -> 5;
'enum_value_by_symbol_helium.Region'('AS923_1') -> 6;
'enum_value_by_symbol_helium.Region'('KR920') -> 7;
'enum_value_by_symbol_helium.Region'('IN865') -> 8;
'enum_value_by_symbol_helium.Region'('AS923_2') -> 9;
'enum_value_by_symbol_helium.Region'('AS923_3') -> 10;
'enum_value_by_symbol_helium.Region'('AS923_4') -> 11.

'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(0) ->
    open;
'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(1) ->
    closed.


'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(open) ->
    0;
'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(closed) ->
    1.

'enum_symbol_by_value_packet_pb.packet_type'(0) ->
    longfi;
'enum_symbol_by_value_packet_pb.packet_type'(1) ->
    lorawan.


'enum_value_by_symbol_packet_pb.packet_type'(longfi) ->
    0;
'enum_value_by_symbol_packet_pb.packet_type'(lorawan) ->
    1.

'enum_symbol_by_value_helium.origin'(0) -> p2p;
'enum_symbol_by_value_helium.origin'(1) -> radio.


'enum_value_by_symbol_helium.origin'(p2p) -> 0;
'enum_value_by_symbol_helium.origin'(radio) -> 1.

'enum_symbol_by_value_helium.RegionSpreading'(0) ->
    'SF_INVALID';
'enum_symbol_by_value_helium.RegionSpreading'(1) ->
    'SF7';
'enum_symbol_by_value_helium.RegionSpreading'(2) ->
    'SF8';
'enum_symbol_by_value_helium.RegionSpreading'(3) ->
    'SF9';
'enum_symbol_by_value_helium.RegionSpreading'(4) ->
    'SF10';
'enum_symbol_by_value_helium.RegionSpreading'(5) ->
    'SF11';
'enum_symbol_by_value_helium.RegionSpreading'(6) ->
    'SF12'.


'enum_value_by_symbol_helium.RegionSpreading'('SF_INVALID') ->
    0;
'enum_value_by_symbol_helium.RegionSpreading'('SF7') ->
    1;
'enum_value_by_symbol_helium.RegionSpreading'('SF8') ->
    2;
'enum_value_by_symbol_helium.RegionSpreading'('SF9') ->
    3;
'enum_value_by_symbol_helium.RegionSpreading'('SF10') ->
    4;
'enum_value_by_symbol_helium.RegionSpreading'('SF11') ->
    5;
'enum_value_by_symbol_helium.RegionSpreading'('SF12') ->
    6.


get_service_names() -> ['helium.gateway'].


get_service_def('helium.gateway') ->
    {{service, 'helium.gateway'},
     [[{name, follow_sc},
       {input, gateway_sc_follow_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, true},
       {output_stream, true},
       {opts, []}],
      [{name, routing},
       {input, gateway_routing_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, true},
       {opts, []}],
      [{name, stream_poc},
       {input, gateway_poc_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, true},
       {output_stream, true},
       {opts, []}],
      [{name, config_update},
       {input, gateway_config_update_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, true},
       {opts, []}],
      [{name, is_active_sc},
       {input, gateway_sc_is_active_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, is_overpaid_sc},
       {input, gateway_sc_is_overpaid_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, close_sc},
       {input, gateway_sc_close_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, check_challenge_target},
       {input, gateway_poc_check_challenge_target_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, send_report},
       {input, gateway_poc_report_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, address_to_public_uri},
       {input, gateway_address_routing_data_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, poc_key_to_public_uri},
       {input, gateway_poc_key_routing_data_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, region_params},
       {input, gateway_poc_region_params_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, config},
       {input, gateway_config_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}],
      [{name, validators},
       {input, gateway_validators_req_v1_pb},
       {output, gateway_resp_v1_pb},
       {input_stream, false},
       {output_stream, false},
       {opts, []}]]};
get_service_def(_) -> error.


get_rpc_names('helium.gateway') ->
    [follow_sc,
     routing,
     stream_poc,
     config_update,
     is_active_sc,
     is_overpaid_sc,
     close_sc,
     check_challenge_target,
     send_report,
     address_to_public_uri,
     poc_key_to_public_uri,
     region_params,
     config,
     validators];
get_rpc_names(_) -> error.


find_rpc_def('helium.gateway', RpcName) ->
    'find_rpc_def_helium.gateway'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_helium.gateway'(follow_sc) ->
    [{name, follow_sc},
     {input, gateway_sc_follow_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, true},
     {output_stream, true},
     {opts, []}];
'find_rpc_def_helium.gateway'(routing) ->
    [{name, routing},
     {input, gateway_routing_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, true},
     {opts, []}];
'find_rpc_def_helium.gateway'(stream_poc) ->
    [{name, stream_poc},
     {input, gateway_poc_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, true},
     {output_stream, true},
     {opts, []}];
'find_rpc_def_helium.gateway'(config_update) ->
    [{name, config_update},
     {input, gateway_config_update_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, true},
     {opts, []}];
'find_rpc_def_helium.gateway'(is_active_sc) ->
    [{name, is_active_sc},
     {input, gateway_sc_is_active_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(is_overpaid_sc) ->
    [{name, is_overpaid_sc},
     {input, gateway_sc_is_overpaid_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(close_sc) ->
    [{name, close_sc},
     {input, gateway_sc_close_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(check_challenge_target) ->
    [{name, check_challenge_target},
     {input, gateway_poc_check_challenge_target_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(send_report) ->
    [{name, send_report},
     {input, gateway_poc_report_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(address_to_public_uri) ->
    [{name, address_to_public_uri},
     {input, gateway_address_routing_data_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(poc_key_to_public_uri) ->
    [{name, poc_key_to_public_uri},
     {input, gateway_poc_key_routing_data_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(region_params) ->
    [{name, region_params},
     {input, gateway_poc_region_params_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(config) ->
    [{name, config},
     {input, gateway_config_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(validators) ->
    [{name, validators},
     {input, gateway_validators_req_v1_pb},
     {output, gateway_resp_v1_pb},
     {input_stream, false},
     {output_stream, false},
     {opts, []}];
'find_rpc_def_helium.gateway'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_list(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"helium.gateway">>) -> 'helium.gateway';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('helium.gateway') -> <<"helium.gateway">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"follow_sc">>) ->
    {'helium.gateway', follow_sc};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"routing">>) ->
    {'helium.gateway', routing};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"stream_poc">>) ->
    {'helium.gateway', stream_poc};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"config_update">>) ->
    {'helium.gateway', config_update};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"is_active_sc">>) ->
    {'helium.gateway', is_active_sc};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"is_overpaid_sc">>) ->
    {'helium.gateway', is_overpaid_sc};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"close_sc">>) ->
    {'helium.gateway', close_sc};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"check_challenge_target">>) ->
    {'helium.gateway', check_challenge_target};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"send_report">>) ->
    {'helium.gateway', send_report};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"address_to_public_uri">>) ->
    {'helium.gateway', address_to_public_uri};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"poc_key_to_public_uri">>) ->
    {'helium.gateway', poc_key_to_public_uri};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"region_params">>) ->
    {'helium.gateway', region_params};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"config">>) ->
    {'helium.gateway', config};
fqbins_to_service_and_rpc_name(<<"helium.gateway">>, <<"validators">>) ->
    {'helium.gateway', validators};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('helium.gateway',
                               follow_sc) ->
    {<<"helium.gateway">>, <<"follow_sc">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               routing) ->
    {<<"helium.gateway">>, <<"routing">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               stream_poc) ->
    {<<"helium.gateway">>, <<"stream_poc">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               config_update) ->
    {<<"helium.gateway">>, <<"config_update">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               is_active_sc) ->
    {<<"helium.gateway">>, <<"is_active_sc">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               is_overpaid_sc) ->
    {<<"helium.gateway">>, <<"is_overpaid_sc">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               close_sc) ->
    {<<"helium.gateway">>, <<"close_sc">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               check_challenge_target) ->
    {<<"helium.gateway">>, <<"check_challenge_target">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               send_report) ->
    {<<"helium.gateway">>, <<"send_report">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               address_to_public_uri) ->
    {<<"helium.gateway">>, <<"address_to_public_uri">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               poc_key_to_public_uri) ->
    {<<"helium.gateway">>, <<"poc_key_to_public_uri">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               region_params) ->
    {<<"helium.gateway">>, <<"region_params">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               config) ->
    {<<"helium.gateway">>, <<"config">>};
service_and_rpc_name_to_fqbins('helium.gateway',
                               validators) ->
    {<<"helium.gateway">>, <<"validators">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"helium.empty">>) -> empty_pb;
fqbin_to_msg_name(<<"helium.gateway_success_resp">>) -> gateway_success_resp_pb;
fqbin_to_msg_name(<<"helium.gateway_error_resp">>) -> gateway_error_resp_pb;
fqbin_to_msg_name(<<"helium.gateway_config_req_v1">>) -> gateway_config_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_config_resp_v1">>) -> gateway_config_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_config_update_req_v1">>) ->
    gateway_config_update_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_config_update_streamed_resp_v1">>) ->
    gateway_config_update_streamed_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_validators_req_v1">>) ->
    gateway_validators_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_validators_resp_v1">>) ->
    gateway_validators_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_resp_v1">>) -> gateway_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_is_active_req_v1">>) ->
    gateway_sc_is_active_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_is_active_resp_v1">>) ->
    gateway_sc_is_active_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_is_overpaid_req_v1">>) ->
    gateway_sc_is_overpaid_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_is_overpaid_resp_v1">>) ->
    gateway_sc_is_overpaid_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_close_req_v1">>) ->
    gateway_sc_close_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_close_resp_v1">>) ->
    gateway_sc_close_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_follow_req_v1">>) ->
    gateway_sc_follow_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_sc_follow_streamed_resp_v1">>) ->
    gateway_sc_follow_streamed_resp_v1_pb;
fqbin_to_msg_name(<<"helium.routing">>) -> routing_pb;
fqbin_to_msg_name(<<"helium.routing_address">>) -> routing_address_pb;
fqbin_to_msg_name(<<"helium.gateway_routing_req_v1">>) -> gateway_routing_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_routing_streamed_resp_v1">>) ->
    gateway_routing_streamed_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_req_v1">>) -> gateway_poc_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_challenge_notification_resp_v1">>) ->
    gateway_poc_challenge_notification_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_check_challenge_target_req_v1">>) ->
    gateway_poc_check_challenge_target_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_region_params_req_v1">>) ->
    gateway_poc_region_params_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_region_params_resp_v1">>) ->
    gateway_poc_region_params_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_check_challenge_target_resp_v1">>) ->
    gateway_poc_check_challenge_target_resp_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_report_req_v1">>) ->
    gateway_poc_report_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_address_routing_data_req_v1">>) ->
    gateway_address_routing_data_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_poc_key_routing_data_req_v1">>) ->
    gateway_poc_key_routing_data_req_v1_pb;
fqbin_to_msg_name(<<"helium.gateway_public_routing_data_resp_v1">>) ->
    gateway_public_routing_data_resp_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_summary_v1">>) ->
    blockchain_state_channel_summary_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_v1">>) ->
    blockchain_state_channel_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_response_v1">>) ->
    blockchain_state_channel_response_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_packet_v1">>) ->
    blockchain_state_channel_packet_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_offer_v1">>) ->
    blockchain_state_channel_offer_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_purchase_v1">>) ->
    blockchain_state_channel_purchase_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_v1">>) ->
    blockchain_state_channel_diff_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_entry_v1">>) ->
    blockchain_state_channel_diff_entry_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_append_summary_v1">>) ->
    blockchain_state_channel_diff_append_summary_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_diff_update_summary_v1">>) ->
    blockchain_state_channel_diff_update_summary_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_banner_v1">>) ->
    blockchain_state_channel_banner_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_rejection_v1">>) ->
    blockchain_state_channel_rejection_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_message_v1">>) ->
    blockchain_state_channel_message_v1_pb;
fqbin_to_msg_name(<<"helium.eui">>) -> eui_pb;
fqbin_to_msg_name(<<"helium.routing_information">>) -> routing_information_pb;
fqbin_to_msg_name(<<"helium.window">>) -> window_pb;
fqbin_to_msg_name(<<"helium.packet">>) -> packet_pb;
fqbin_to_msg_name(<<"helium.blockchain_txn_state_channel_close_v1">>) ->
    blockchain_txn_state_channel_close_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_var_v1">>) -> blockchain_var_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_txn_vars_v1">>) -> blockchain_txn_vars_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_txn_poc_receipts_v1">>) ->
    blockchain_txn_poc_receipts_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_poc_receipt_v1">>) ->
    blockchain_poc_receipt_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_poc_witness_v1">>) ->
    blockchain_poc_witness_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_poc_response_v1">>) ->
    blockchain_poc_response_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_poc_path_element_v1">>) ->
    blockchain_poc_path_element_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_txn_poc_receipts_v2">>) ->
    blockchain_txn_poc_receipts_v2_pb;
fqbin_to_msg_name(<<"helium.blockchain_region_params_v1">>) ->
    blockchain_region_params_v1_pb;
fqbin_to_msg_name(<<"helium.tagged_spreading">>) -> tagged_spreading_pb;
fqbin_to_msg_name(<<"helium.blockchain_region_spreading_v1">>) ->
    blockchain_region_spreading_v1_pb;
fqbin_to_msg_name(<<"helium.blockchain_region_param_v1">>) ->
    blockchain_region_param_v1_pb;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(empty_pb) -> <<"helium.empty">>;
msg_name_to_fqbin(gateway_success_resp_pb) -> <<"helium.gateway_success_resp">>;
msg_name_to_fqbin(gateway_error_resp_pb) -> <<"helium.gateway_error_resp">>;
msg_name_to_fqbin(gateway_config_req_v1_pb) -> <<"helium.gateway_config_req_v1">>;
msg_name_to_fqbin(gateway_config_resp_v1_pb) -> <<"helium.gateway_config_resp_v1">>;
msg_name_to_fqbin(gateway_config_update_req_v1_pb) ->
    <<"helium.gateway_config_update_req_v1">>;
msg_name_to_fqbin(gateway_config_update_streamed_resp_v1_pb) ->
    <<"helium.gateway_config_update_streamed_resp_v1">>;
msg_name_to_fqbin(gateway_validators_req_v1_pb) ->
    <<"helium.gateway_validators_req_v1">>;
msg_name_to_fqbin(gateway_validators_resp_v1_pb) ->
    <<"helium.gateway_validators_resp_v1">>;
msg_name_to_fqbin(gateway_resp_v1_pb) -> <<"helium.gateway_resp_v1">>;
msg_name_to_fqbin(gateway_sc_is_active_req_v1_pb) ->
    <<"helium.gateway_sc_is_active_req_v1">>;
msg_name_to_fqbin(gateway_sc_is_active_resp_v1_pb) ->
    <<"helium.gateway_sc_is_active_resp_v1">>;
msg_name_to_fqbin(gateway_sc_is_overpaid_req_v1_pb) ->
    <<"helium.gateway_sc_is_overpaid_req_v1">>;
msg_name_to_fqbin(gateway_sc_is_overpaid_resp_v1_pb) ->
    <<"helium.gateway_sc_is_overpaid_resp_v1">>;
msg_name_to_fqbin(gateway_sc_close_req_v1_pb) ->
    <<"helium.gateway_sc_close_req_v1">>;
msg_name_to_fqbin(gateway_sc_close_resp_v1_pb) ->
    <<"helium.gateway_sc_close_resp_v1">>;
msg_name_to_fqbin(gateway_sc_follow_req_v1_pb) ->
    <<"helium.gateway_sc_follow_req_v1">>;
msg_name_to_fqbin(gateway_sc_follow_streamed_resp_v1_pb) ->
    <<"helium.gateway_sc_follow_streamed_resp_v1">>;
msg_name_to_fqbin(routing_pb) -> <<"helium.routing">>;
msg_name_to_fqbin(routing_address_pb) -> <<"helium.routing_address">>;
msg_name_to_fqbin(gateway_routing_req_v1_pb) -> <<"helium.gateway_routing_req_v1">>;
msg_name_to_fqbin(gateway_routing_streamed_resp_v1_pb) ->
    <<"helium.gateway_routing_streamed_resp_v1">>;
msg_name_to_fqbin(gateway_poc_req_v1_pb) -> <<"helium.gateway_poc_req_v1">>;
msg_name_to_fqbin(gateway_poc_challenge_notification_resp_v1_pb) ->
    <<"helium.gateway_poc_challenge_notification_resp_v1">>;
msg_name_to_fqbin(gateway_poc_check_challenge_target_req_v1_pb) ->
    <<"helium.gateway_poc_check_challenge_target_req_v1">>;
msg_name_to_fqbin(gateway_poc_region_params_req_v1_pb) ->
    <<"helium.gateway_poc_region_params_req_v1">>;
msg_name_to_fqbin(gateway_poc_region_params_resp_v1_pb) ->
    <<"helium.gateway_poc_region_params_resp_v1">>;
msg_name_to_fqbin(gateway_poc_check_challenge_target_resp_v1_pb) ->
    <<"helium.gateway_poc_check_challenge_target_resp_v1">>;
msg_name_to_fqbin(gateway_poc_report_req_v1_pb) ->
    <<"helium.gateway_poc_report_req_v1">>;
msg_name_to_fqbin(gateway_address_routing_data_req_v1_pb) ->
    <<"helium.gateway_address_routing_data_req_v1">>;
msg_name_to_fqbin(gateway_poc_key_routing_data_req_v1_pb) ->
    <<"helium.gateway_poc_key_routing_data_req_v1">>;
msg_name_to_fqbin(gateway_public_routing_data_resp_v1_pb) ->
    <<"helium.gateway_public_routing_data_resp_v1">>;
msg_name_to_fqbin(blockchain_state_channel_summary_v1_pb) ->
    <<"helium.blockchain_state_channel_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_v1_pb) ->
    <<"helium.blockchain_state_channel_v1">>;
msg_name_to_fqbin(blockchain_state_channel_response_v1_pb) ->
    <<"helium.blockchain_state_channel_response_v1">>;
msg_name_to_fqbin(blockchain_state_channel_packet_v1_pb) ->
    <<"helium.blockchain_state_channel_packet_v1">>;
msg_name_to_fqbin(blockchain_state_channel_offer_v1_pb) ->
    <<"helium.blockchain_state_channel_offer_v1">>;
msg_name_to_fqbin(blockchain_state_channel_purchase_v1_pb) ->
    <<"helium.blockchain_state_channel_purchase_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_entry_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_entry_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_append_summary_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_append_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_diff_update_summary_v1_pb) ->
    <<"helium.blockchain_state_channel_diff_update_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_banner_v1_pb) ->
    <<"helium.blockchain_state_channel_banner_v1">>;
msg_name_to_fqbin(blockchain_state_channel_rejection_v1_pb) ->
    <<"helium.blockchain_state_channel_rejection_v1">>;
msg_name_to_fqbin(blockchain_state_channel_message_v1_pb) ->
    <<"helium.blockchain_state_channel_message_v1">>;
msg_name_to_fqbin(eui_pb) -> <<"helium.eui">>;
msg_name_to_fqbin(routing_information_pb) -> <<"helium.routing_information">>;
msg_name_to_fqbin(window_pb) -> <<"helium.window">>;
msg_name_to_fqbin(packet_pb) -> <<"helium.packet">>;
msg_name_to_fqbin(blockchain_txn_state_channel_close_v1_pb) ->
    <<"helium.blockchain_txn_state_channel_close_v1">>;
msg_name_to_fqbin(blockchain_var_v1_pb) -> <<"helium.blockchain_var_v1">>;
msg_name_to_fqbin(blockchain_txn_vars_v1_pb) -> <<"helium.blockchain_txn_vars_v1">>;
msg_name_to_fqbin(blockchain_txn_poc_receipts_v1_pb) ->
    <<"helium.blockchain_txn_poc_receipts_v1">>;
msg_name_to_fqbin(blockchain_poc_receipt_v1_pb) ->
    <<"helium.blockchain_poc_receipt_v1">>;
msg_name_to_fqbin(blockchain_poc_witness_v1_pb) ->
    <<"helium.blockchain_poc_witness_v1">>;
msg_name_to_fqbin(blockchain_poc_response_v1_pb) ->
    <<"helium.blockchain_poc_response_v1">>;
msg_name_to_fqbin(blockchain_poc_path_element_v1_pb) ->
    <<"helium.blockchain_poc_path_element_v1">>;
msg_name_to_fqbin(blockchain_txn_poc_receipts_v2_pb) ->
    <<"helium.blockchain_txn_poc_receipts_v2">>;
msg_name_to_fqbin(blockchain_region_params_v1_pb) ->
    <<"helium.blockchain_region_params_v1">>;
msg_name_to_fqbin(tagged_spreading_pb) -> <<"helium.tagged_spreading">>;
msg_name_to_fqbin(blockchain_region_spreading_v1_pb) ->
    <<"helium.blockchain_region_spreading_v1">>;
msg_name_to_fqbin(blockchain_region_param_v1_pb) ->
    <<"helium.blockchain_region_param_v1">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"helium.close_state">>) -> 'helium.close_state';
fqbin_to_enum_name(<<"helium.Region">>) -> 'helium.Region';
fqbin_to_enum_name(<<"helium.blockchain_state_channel_state_v1">>) ->
    'helium.blockchain_state_channel_state_v1';
fqbin_to_enum_name(<<"helium.packet.packet_type">>) -> 'packet_pb.packet_type';
fqbin_to_enum_name(<<"helium.origin">>) -> 'helium.origin';
fqbin_to_enum_name(<<"helium.RegionSpreading">>) -> 'helium.RegionSpreading';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('helium.close_state') -> <<"helium.close_state">>;
enum_name_to_fqbin('helium.Region') -> <<"helium.Region">>;
enum_name_to_fqbin('helium.blockchain_state_channel_state_v1') ->
    <<"helium.blockchain_state_channel_state_v1">>;
enum_name_to_fqbin('packet_pb.packet_type') -> <<"helium.packet.packet_type">>;
enum_name_to_fqbin('helium.origin') -> <<"helium.origin">>;
enum_name_to_fqbin('helium.RegionSpreading') -> <<"helium.RegionSpreading">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> helium.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "gateway.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["gateway.proto",
     "blockchain_state_channel_v1.proto",
     "packet.proto",
     "blockchain_txn_state_channel_close_v1.proto",
     "blockchain_txn_vars_v1.proto",
     "blockchain_txn_poc_receipts_v1.proto",
     "blockchain_poc_core_v1.proto",
     "blockchain_txn_poc_receipts_v2.proto",
     "blockchain_region_param_v1.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["gateway",
     "blockchain_state_channel_v1",
     "packet",
     "blockchain_txn_state_channel_close_v1",
     "blockchain_txn_vars_v1",
     "blockchain_txn_poc_receipts_v1",
     "blockchain_poc_core_v1",
     "blockchain_txn_poc_receipts_v2",
     "blockchain_region_param_v1"].


get_msg_containment("gateway") ->
    [empty_pb,
     gateway_address_routing_data_req_v1_pb,
     gateway_config_req_v1_pb,
     gateway_config_resp_v1_pb,
     gateway_config_update_req_v1_pb,
     gateway_config_update_streamed_resp_v1_pb,
     gateway_error_resp_pb,
     gateway_poc_challenge_notification_resp_v1_pb,
     gateway_poc_check_challenge_target_req_v1_pb,
     gateway_poc_check_challenge_target_resp_v1_pb,
     gateway_poc_key_routing_data_req_v1_pb,
     gateway_poc_region_params_req_v1_pb,
     gateway_poc_region_params_resp_v1_pb,
     gateway_poc_report_req_v1_pb,
     gateway_poc_req_v1_pb,
     gateway_public_routing_data_resp_v1_pb,
     gateway_resp_v1_pb,
     gateway_routing_req_v1_pb,
     gateway_routing_streamed_resp_v1_pb,
     gateway_sc_close_req_v1_pb,
     gateway_sc_close_resp_v1_pb,
     gateway_sc_follow_req_v1_pb,
     gateway_sc_follow_streamed_resp_v1_pb,
     gateway_sc_is_active_req_v1_pb,
     gateway_sc_is_active_resp_v1_pb,
     gateway_sc_is_overpaid_req_v1_pb,
     gateway_sc_is_overpaid_resp_v1_pb,
     gateway_success_resp_pb,
     gateway_validators_req_v1_pb,
     gateway_validators_resp_v1_pb,
     routing_pb,
     routing_address_pb];
get_msg_containment("blockchain_state_channel_v1") ->
    [blockchain_state_channel_banner_v1_pb,
     blockchain_state_channel_diff_append_summary_v1_pb,
     blockchain_state_channel_diff_entry_v1_pb,
     blockchain_state_channel_diff_update_summary_v1_pb,
     blockchain_state_channel_diff_v1_pb,
     blockchain_state_channel_message_v1_pb,
     blockchain_state_channel_offer_v1_pb,
     blockchain_state_channel_packet_v1_pb,
     blockchain_state_channel_purchase_v1_pb,
     blockchain_state_channel_rejection_v1_pb,
     blockchain_state_channel_response_v1_pb,
     blockchain_state_channel_summary_v1_pb,
     blockchain_state_channel_v1_pb];
get_msg_containment("packet") ->
    [eui_pb, packet_pb, routing_information_pb, window_pb];
get_msg_containment("blockchain_txn_state_channel_close_v1") ->
    [blockchain_txn_state_channel_close_v1_pb];
get_msg_containment("blockchain_txn_vars_v1") ->
    [blockchain_txn_vars_v1_pb, blockchain_var_v1_pb];
get_msg_containment("blockchain_txn_poc_receipts_v1") ->
    [blockchain_txn_poc_receipts_v1_pb];
get_msg_containment("blockchain_poc_core_v1") ->
    [blockchain_poc_path_element_v1_pb,
     blockchain_poc_receipt_v1_pb,
     blockchain_poc_response_v1_pb,
     blockchain_poc_witness_v1_pb];
get_msg_containment("blockchain_txn_poc_receipts_v2") ->
    [blockchain_txn_poc_receipts_v2_pb];
get_msg_containment("blockchain_region_param_v1") ->
    [blockchain_region_param_v1_pb,
     blockchain_region_params_v1_pb,
     blockchain_region_spreading_v1_pb,
     tagged_spreading_pb];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("gateway") -> helium;
get_pkg_containment("blockchain_state_channel_v1") ->
    helium;
get_pkg_containment("packet") -> helium;
get_pkg_containment("blockchain_txn_state_channel_close_v1") ->
    helium;
get_pkg_containment("blockchain_txn_vars_v1") -> helium;
get_pkg_containment("blockchain_txn_poc_receipts_v1") ->
    helium;
get_pkg_containment("blockchain_poc_core_v1") -> helium;
get_pkg_containment("blockchain_txn_poc_receipts_v2") ->
    helium;
get_pkg_containment("blockchain_region_param_v1") ->
    helium;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("gateway") ->
    ['helium.gateway'];
get_service_containment("blockchain_state_channel_v1") ->
    [];
get_service_containment("packet") -> [];
get_service_containment("blockchain_txn_state_channel_close_v1") ->
    [];
get_service_containment("blockchain_txn_vars_v1") -> [];
get_service_containment("blockchain_txn_poc_receipts_v1") ->
    [];
get_service_containment("blockchain_poc_core_v1") -> [];
get_service_containment("blockchain_txn_poc_receipts_v2") ->
    [];
get_service_containment("blockchain_region_param_v1") ->
    [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("gateway") ->
    [{'helium.gateway', follow_sc},
     {'helium.gateway', routing},
     {'helium.gateway', stream_poc},
     {'helium.gateway', config_update},
     {'helium.gateway', is_active_sc},
     {'helium.gateway', is_overpaid_sc},
     {'helium.gateway', close_sc},
     {'helium.gateway', check_challenge_target},
     {'helium.gateway', send_report},
     {'helium.gateway', address_to_public_uri},
     {'helium.gateway', poc_key_to_public_uri},
     {'helium.gateway', region_params},
     {'helium.gateway', config},
     {'helium.gateway', validators}];
get_rpc_containment("blockchain_state_channel_v1") ->
    [];
get_rpc_containment("packet") -> [];
get_rpc_containment("blockchain_txn_state_channel_close_v1") ->
    [];
get_rpc_containment("blockchain_txn_vars_v1") -> [];
get_rpc_containment("blockchain_txn_poc_receipts_v1") ->
    [];
get_rpc_containment("blockchain_poc_core_v1") -> [];
get_rpc_containment("blockchain_txn_poc_receipts_v2") ->
    [];
get_rpc_containment("blockchain_region_param_v1") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("gateway") ->
    ['helium.close_state'];
get_enum_containment("blockchain_state_channel_v1") ->
    ['helium.Region',
     'helium.blockchain_state_channel_state_v1'];
get_enum_containment("packet") ->
    ['packet_pb.packet_type'];
get_enum_containment("blockchain_txn_state_channel_close_v1") ->
    [];
get_enum_containment("blockchain_txn_vars_v1") -> [];
get_enum_containment("blockchain_txn_poc_receipts_v1") ->
    [];
get_enum_containment("blockchain_poc_core_v1") ->
    ['helium.origin'];
get_enum_containment("blockchain_txn_poc_receipts_v2") ->
    [];
get_enum_containment("blockchain_region_param_v1") ->
    ['helium.RegionSpreading'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"helium.gateway_success_resp">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_error_resp">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_region_spreading_v1">>) ->
    "blockchain_region_param_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_region_params_v1">>) ->
    "blockchain_region_param_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_region_param_v1">>) ->
    "blockchain_region_param_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_poc_witness_v1">>) ->
    "blockchain_poc_core_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_poc_response_v1">>) ->
    "blockchain_poc_core_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_poc_receipt_v1">>) ->
    "blockchain_poc_core_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_poc_path_element_v1">>) ->
    "blockchain_poc_core_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_txn_poc_receipts_v1">>) ->
    "blockchain_txn_poc_receipts_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_var_v1">>) ->
    "blockchain_txn_vars_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_txn_vars_v1">>) ->
    "blockchain_txn_vars_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_txn_state_channel_close_v1">>) ->
    "blockchain_txn_state_channel_close_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_response_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_rejection_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_purchase_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_packet_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_offer_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_message_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_update_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_entry_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_diff_append_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_banner_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_validators_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_validators_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_is_overpaid_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_is_overpaid_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_is_active_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_is_active_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_follow_streamed_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_follow_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_close_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_sc_close_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_routing_streamed_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_routing_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_public_routing_data_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_report_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_region_params_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_region_params_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_key_routing_data_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_check_challenge_target_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_check_challenge_target_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_poc_challenge_notification_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_config_update_streamed_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_config_update_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_config_resp_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_config_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.gateway_address_routing_data_req_v1">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_txn_poc_receipts_v2">>) ->
    "blockchain_txn_poc_receipts_v2";
get_proto_by_msg_name_as_fqbin(<<"helium.routing_address">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.packet">>) -> "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.tagged_spreading">>) ->
    "blockchain_region_param_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.window">>) -> "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.routing">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.eui">>) -> "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.empty">>) -> "gateway";
get_proto_by_msg_name_as_fqbin(<<"helium.routing_information">>) -> "packet";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"helium.gateway">>) ->
    "gateway";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"helium.blockchain_state_channel_state_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_enum_name_as_fqbin(<<"helium.packet.packet_type">>) -> "packet";
get_proto_by_enum_name_as_fqbin(<<"helium.close_state">>) -> "gateway";
get_proto_by_enum_name_as_fqbin(<<"helium.RegionSpreading">>) ->
    "blockchain_region_param_v1";
get_proto_by_enum_name_as_fqbin(<<"helium.origin">>) ->
    "blockchain_poc_core_v1";
get_proto_by_enum_name_as_fqbin(<<"helium.Region">>) ->
    "blockchain_state_channel_v1";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"helium">>) ->
    ["blockchain_poc_core_v1",
     "blockchain_region_param_v1",
     "blockchain_state_channel_v1",
     "blockchain_txn_poc_receipts_v1",
     "blockchain_txn_poc_receipts_v2",
     "blockchain_txn_state_channel_close_v1",
     "blockchain_txn_vars_v1",
     "gateway",
     "packet"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
